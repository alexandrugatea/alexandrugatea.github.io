!function(){"use strict";var t={d:function(e,n){for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},o:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)}};t.d({},{uJ:function(){return le},Q2:function(){return $t},dt:function(){return Ht},wW:function(){return fe}});Math.pow(10,8);const e=6048e5,n=864e5,a=6e4,o=36e5;function r(t,e){const n=e?.additionalDigits??2,r=function(t){const e={},n=t.split(i.dateTimeDelimiter);let a;if(n.length>2)return e;/:/.test(n[0])?a=n[0]:(e.date=n[0],a=n[1],i.timeZoneDelimiter.test(e.date)&&(e.date=t.split(i.timeZoneDelimiter)[0],a=t.substr(e.date.length,t.length)));if(a){const t=i.timezone.exec(a);t?(e.time=a.replace(t[1],""),e.timezone=t[1]):e.time=a}return e}(t);let f;if(r.date){const t=function(t,e){const n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),a=t.match(n);if(!a)return{year:NaN,restDateString:""};const o=a[1]?parseInt(a[1]):null,r=a[2]?parseInt(a[2]):null;return{year:null===r?o:100*r,restDateString:t.slice((a[1]||a[2]).length)}}(r.date,n);f=function(t,e){if(null===e)return new Date(NaN);const n=t.match(s);if(!n)return new Date(NaN);const a=!!n[4],o=u(n[1]),r=u(n[2])-1,i=u(n[3]),c=u(n[4]),d=u(n[5])-1;if(a)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,c,d)?function(t,e,n){const a=new Date(0);a.setUTCFullYear(t,0,4);const o=a.getUTCDay()||7,r=7*(e-1)+n+1-o;return a.setUTCDate(a.getUTCDate()+r),a}(e,c,d):new Date(NaN);{const t=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(m[e]||(h(t)?29:28))}(e,r,i)&&function(t,e){return e>=1&&e<=(h(t)?366:365)}(e,o)?(t.setUTCFullYear(e,r,Math.max(o,i)),t):new Date(NaN)}}(t.restDateString,t.year)}if(!f||isNaN(f.getTime()))return new Date(NaN);const g=f.getTime();let p,y=0;if(r.time&&(y=function(t){const e=t.match(c);if(!e)return NaN;const n=l(e[1]),r=l(e[2]),i=l(e[3]);if(!function(t,e,n){if(24===t)return 0===e&&0===n;return n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,r,i))return NaN;return n*o+r*a+1e3*i}(r.time),isNaN(y)))return new Date(NaN);if(!r.timezone){const t=new Date(g+y),e=new Date(0);return e.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),e.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),e}return p=function(t){if("Z"===t)return 0;const e=t.match(d);if(!e)return 0;const n="+"===e[1]?-1:1,r=parseInt(e[2]),i=e[3]&&parseInt(e[3])||0;if(!function(t,e){return e>=0&&e<=59}(0,i))return NaN;return n*(r*o+i*a)}(r.timezone),isNaN(p)?new Date(NaN):new Date(g+y+p)}const i={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},s=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,c=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,d=/^([+-])(\d{2})(?::?(\d{2}))?$/;function u(t){return t?parseInt(t):1}function l(t){return t&&parseFloat(t.replace(",","."))||0}const m=[31,null,31,30,31,30,31,31,30,31,30,31];function h(t){return t%400==0||t%4==0&&t%100!=0}function f(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function g(t,e){const n=f(t),a=f(e),o=n.getTime()-a.getTime();return o<0?-1:o>0?1:o}class p{constructor(t,e){this.name=t,this.description=e,this.todos=[]}addTodo=t=>{this.todos.push(t)};deleteTodo=t=>{this.todos.splice(t,1)};editTodo=(t,e)=>{Object.assign(this.todos[t],e)};sortTodos=()=>{this.todos.sort(((t,e)=>{const n=g(r(`${t.dueDate}`),r(`${e.dueDate}`));if(0!==n)return n;const a={low:3,medium:2,high:1};return a[t.priority]-a[e.priority]}))}}class y{constructor(t,e,n,a,o=!1){this.name=t,this.dueDate=e,this.priority=n,this.projectName=a,this.completed=o}toggleComplete(){this.completed=!this.completed}}const w={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function b(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const v={date:b({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:b({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:b({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},k={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function M(t){return(e,n)=>{let a;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,o=n?.width?String(n.width):e;a=t.formattingValues[o]||t.formattingValues[e]}else{const e=t.defaultWidth,o=n?.width?String(n.width):t.defaultWidth;a=t.values[o]||t.values[e]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function D(t){return(e,n={})=>{const a=n.width,o=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],r=e.match(o);if(!r)return null;const i=r[0],s=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(let n=0;n<t.length;n++)if(e(t[n]))return n;return}(s,(t=>t.test(i))):function(t,e){for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e(t[n]))return n;return}(s,(t=>t.test(i)));let d;d=t.valueCallback?t.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d;return{value:d,rest:e.slice(i.length)}}}var T;const N={code:"en-US",formatDistance:(t,e,n)=>{let a;const o=w[t];return a="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:v,formatRelative:(t,e,n,a)=>k[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:M({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:M({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:M({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:M({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:M({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(T={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(T.matchPattern);if(!n)return null;const a=n[0],o=t.match(T.parsePattern);if(!o)return null;let r=T.valueCallback?T.valueCallback(o[0]):o[0];return r=e.valueCallback?e.valueCallback(r):r,{value:r,rest:t.slice(a.length)}}),era:D({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:D({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:D({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:D({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:D({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let x={};function E(){return x}function S(t){const e=f(t);return e.setHours(0,0,0,0),e}function j(t){const e=f(t),n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),+t-+n}function B(t,e){const a=S(t),o=S(e),r=+a-j(a),i=+o-j(o);return Math.round((r-i)/n)}function C(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function P(t){const e=f(t),n=C(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}function W(t){const e=f(t);return B(e,P(e))+1}function L(t,e){const n=E(),a=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,o=f(t),r=o.getDay(),i=(r<a?7:0)+r-a;return o.setDate(o.getDate()-i),o.setHours(0,0,0,0),o}function I(t){return L(t,{weekStartsOn:1})}function O(t){const e=f(t),n=e.getFullYear(),a=C(t,0);a.setFullYear(n+1,0,4),a.setHours(0,0,0,0);const o=I(a),r=C(t,0);r.setFullYear(n,0,4),r.setHours(0,0,0,0);const i=I(r);return e.getTime()>=o.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function q(t){const e=O(t),n=C(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),I(n)}function H(t){const n=f(t),a=+I(n)-+q(n);return Math.round(a/e)+1}function $(t,e){const n=f(t),a=n.getFullYear(),o=E(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=C(t,0);i.setFullYear(a+1,0,r),i.setHours(0,0,0,0);const s=L(i,e),c=C(t,0);c.setFullYear(a,0,r),c.setHours(0,0,0,0);const d=L(c,e);return n.getTime()>=s.getTime()?a+1:n.getTime()>=d.getTime()?a:a-1}function Y(t,e){const n=E(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,o=$(t,e),r=C(t,0);r.setFullYear(o,0,a),r.setHours(0,0,0,0);return L(r,e)}function F(t,n){const a=f(t),o=+L(a,n)-+Y(a,n);return Math.round(o/e)+1}function A(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const z={y(t,e){const n=t.getFullYear(),a=n>0?n:1-n;return A("yy"===e?a%100:a,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):A(n+1,2)},d(t,e){return A(t.getDate(),e.length)},a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h(t,e){return A(t.getHours()%12||12,e.length)},H(t,e){return A(t.getHours(),e.length)},m(t,e){return A(t.getMinutes(),e.length)},s(t,e){return A(t.getSeconds(),e.length)},S(t,e){const n=e.length,a=t.getMilliseconds();return A(Math.trunc(a*Math.pow(10,n-3)),e.length)}},Q="midnight",U="noon",G="morning",J="afternoon",X="evening",Z="night",R={G:function(t,e,n){const a=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),a=e>0?e:1-e;return n.ordinalNumber(a,{unit:"year"})}return z.y(t,e)},Y:function(t,e,n,a){const o=$(t,a),r=o>0?o:1-o;if("YY"===e){return A(r%100,2)}return"Yo"===e?n.ordinalNumber(r,{unit:"year"}):A(r,e.length)},R:function(t,e){return A(O(t),e.length)},u:function(t,e){return A(t.getFullYear(),e.length)},Q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return A(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){const a=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return A(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){const a=t.getMonth();switch(e){case"M":case"MM":return z.M(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){const a=t.getMonth();switch(e){case"L":return String(a+1);case"LL":return A(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){const o=F(t,a);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):A(o,e.length)},I:function(t,e,n){const a=H(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):A(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):z.d(t,e)},D:function(t,e,n){const a=W(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):A(a,e.length)},E:function(t,e,n){const a=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){const o=t.getDay(),r=(o-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(r);case"ee":return A(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){const o=t.getDay(),r=(o-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(r);case"cc":return A(r,e.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){const a=t.getDay(),o=0===a?7:a;switch(e){case"i":return String(o);case"ii":return A(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){const a=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){const a=t.getHours();let o;switch(o=12===a?U:0===a?Q:a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){const a=t.getHours();let o;switch(o=a>=17?X:a>=12?J:a>=4?G:Z,e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return z.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):z.H(t,e)},K:function(t,e,n){const a=t.getHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):A(a,e.length)},k:function(t,e,n){let a=t.getHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):A(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):z.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):z.s(t,e)},S:function(t,e){return z.S(t,e)},X:function(t,e,n){const a=t.getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return K(a);case"XXXX":case"XX":return _(a);default:return _(a,":")}},x:function(t,e,n){const a=t.getTimezoneOffset();switch(e){case"x":return K(a);case"xxxx":case"xx":return _(a);default:return _(a,":")}},O:function(t,e,n){const a=t.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+V(a,":");default:return"GMT"+_(a,":")}},z:function(t,e,n){const a=t.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+V(a,":");default:return"GMT"+_(a,":")}},t:function(t,e,n){return A(Math.trunc(t.getTime()/1e3),e.length)},T:function(t,e,n){return A(t.getTime(),e.length)}};function V(t,e=""){const n=t>0?"-":"+",a=Math.abs(t),o=Math.trunc(a/60),r=a%60;return 0===r?n+String(o):n+String(o)+e+A(r,2)}function K(t,e){if(t%60==0){return(t>0?"-":"+")+A(Math.abs(t)/60,2)}return _(t,e)}function _(t,e=""){const n=t>0?"-":"+",a=Math.abs(t);return n+A(Math.trunc(a/60),2)+e+A(a%60,2)}const tt=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},et=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},nt={p:et,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],a=n[1],o=n[2];if(!o)return tt(t,e);let r;switch(a){case"P":r=e.dateTime({width:"short"});break;case"PP":r=e.dateTime({width:"medium"});break;case"PPP":r=e.dateTime({width:"long"});break;default:r=e.dateTime({width:"full"})}return r.replace("{{date}}",tt(a,e)).replace("{{time}}",et(o,e))}},at=/^D+$/,ot=/^Y+$/,rt=["D","DD","YY","YYYY"];function it(t){return t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function st(t){if(!it(t)&&"number"!=typeof t)return!1;const e=f(t);return!isNaN(Number(e))}const ct=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,dt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ut=/^'([^]*?)'?$/,lt=/''/g,mt=/[a-zA-Z]/;function ht(t,e,n){const a=E(),o=n?.locale??a.locale??N,r=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,i=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,s=f(t);if(!st(s))throw new RangeError("Invalid time value");let c=e.match(dt).map((t=>{const e=t[0];if("p"===e||"P"===e){return(0,nt[e])(t,o.formatLong)}return t})).join("").match(ct).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const e=t[0];if("'"===e)return{isToken:!1,value:ft(t)};if(R[e])return{isToken:!0,value:t};if(e.match(mt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:t}}));o.localize.preprocessor&&(c=o.localize.preprocessor(s,c));const d={firstWeekContainsDate:r,weekStartsOn:i,locale:o};return c.map((a=>{if(!a.isToken)return a.value;const r=a.value;(!n?.useAdditionalWeekYearTokens&&function(t){return ot.test(t)}(r)||!n?.useAdditionalDayOfYearTokens&&function(t){return at.test(t)}(r))&&function(t,e,n){const a=function(t,e,n){const a="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${e}\`) for formatting ${a} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,e,n);if(console.warn(a),rt.includes(t))throw new RangeError(a)}(r,e,String(t));return(0,R[r[0]])(s,r,o.localize,d)})).join("")}function ft(t){const e=t.match(ut);return e?e[1].replace(lt,"'"):t}function gt(t,e){const n=f(t);if(isNaN(n.getTime()))throw new RangeError("Invalid time value");const a=e?.format??"extended",o=e?.representation??"complete";let r="",i="";const s="extended"===a?"-":"",c="extended"===a?":":"";if("time"!==o){const t=A(n.getDate(),2),e=A(n.getMonth()+1,2);r=`${A(n.getFullYear(),4)}${s}${e}${s}${t}`}if("date"!==o){const t=n.getTimezoneOffset();if(0!==t){const e=Math.abs(t);i=`${t<0?"+":"-"}${A(Math.trunc(e/60),2)}:${A(e%60,2)}`}else i="Z";r=`${r}${""===r?"":"T"}${[A(n.getHours(),2),A(n.getMinutes(),2),A(n.getSeconds(),2)].join(c)}${i}`}return r}function pt(){return S(Date.now())}function yt(t,e){const n=f(t);return isNaN(e)?C(t,NaN):e?(n.setDate(n.getDate()+e),n):n}function wt(t,e){return yt(t,7*e)}const bt=gt(pt(),{representation:"date"}),vt=gt(yt(pt(),1),{representation:"date"}),kt=gt(wt(pt(),1),{representation:"date"}),Mt={Default:{name:"Default",description:"Default project. Cannot be removed",todos:[new y("Default High Prio Task",bt,"high","Default"),new y("Default Medium Prio Task",bt,"medium","Default"),new y("Default Low Prio Task",bt,"low","Default"),new y("Default High Prio Task Tomorrow",vt,"high","Default"),new y("Default Medium Prio Task Next Week",kt,"medium","Default")]}},Dt=t=>ht(t,"E, do 'of' MMMM yyyy HH:mm:ss").replace(/(\d+)(st|nd|rd|th)/,"$1<sup>$2</sup>"),Tt=[{text:"The quick, brown fox jumps over a lazy dog. DJs flock by when MTV ax quiz prog. Junk MTV quiz graced by fox whelps. Bawds jog, flick quartz, vex nymphs. Waltz, bad nymph, for quick",dateAdded:Dt(new Date)},{text:"Sample Note 2",dateAdded:Dt(new Date)}];function Nt(t,e,n){if(t.classList.add("open"),e.classList.add("open"),t===taskModal){const t=projectSelect.options;for(let e=0;e<t.length;e++)if(t[e].value===n){t[e].selected=!0;break}}}function xt(t,e){t.classList.remove("open"),e.classList.remove("open")}function Et(){localStorage.setItem("projects",JSON.stringify(Ht)),localStorage.setItem("notes",JSON.stringify($t))}function St(t,e){const n=E(),a=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,o=f(t),r=o.getDay(),i=6+(r<a?-7:0)-(r-a);return o.setDate(o.getDate()+i),o.setHours(23,59,59,999),o}function jt(t,e){return+S(t)==+S(e)}function Bt(t,e){const n=+f(t),[a,o]=[+f(e.start),+f(e.end)].sort(((t,e)=>t-e));return n>=a&&n<=o}function Ct(t,e){return+f(t)-+f(e)}function Pt(t,e,n){const a=Ct(t,e)/o;return(r=n?.roundingMethod,t=>{const e=(r?Math[r]:Math.trunc)(t);return 0===e?0:e})(a);var r}function Wt(){const t=new Date,e=t.getFullYear(),n=t.getMonth(),a=t.getDate(),o=new Date(0);return o.setFullYear(e,n,a+1),o.setHours(0,0,0,0),o}function Lt(t,e=null){if(tasksContainer.innerHTML="",null===e)t.forEach((t=>{t.sortTodos(),t.todos.forEach(((t,e)=>{It(t,e,tasksContainer)}))}));else{const n=t[e];n.sortTodos(),n.todos.forEach(((t,e)=>{It(t,e,tasksContainer)}))}}function It(t,e,n){const a=function(t,e){const n=document.createElement("div");n.classList.add("task");const a=document.createElement("div");a.classList.add("checkbox-container");const o=document.createElement("input");o.type="checkbox",o.id=`task${t.projectName}${e}`,o.className="toggle-complete",o.setAttribute("data-project",t.projectName),t.completed&&(o.checked=!0);const i=document.createElement("label");i.setAttribute("for",o.id),a.appendChild(o),a.appendChild(i);const s=document.createElement("span");s.className="task-name",s.innerHTML+=t.name,s.innerHTML+=`<span class="task-project">${t.projectName}</span>`;const c=document.createElement("span");c.className="task-date-time";const d=ht(r(t.dueDate),"E, do 'of' MMMM").replace(/(\d+)(st|nd|rd|th)/,"$1<sup>$2</sup>");c.innerHTML=d;const u=new Date,l=r(t.dueDate);if(ht(u,"yyyy-MM-dd")===ht(l,"yyyy-MM-dd")){const t=Pt(Wt(),u);c.innerHTML+=`<span class="due-in">due in ${t} hours</span>`}const m=document.createElement("span");m.className=`task-priority ${t.priority}`;const h=document.createElement("span");m.appendChild(h);const f=document.createElement("button");f.className="edit-task icon",f.textContent="Edit";const g=document.createElement("button");return g.className="delete-task icon",g.textContent="Delete",n.appendChild(m),n.appendChild(a),n.appendChild(s),n.appendChild(c),n.appendChild(f),n.appendChild(g),n}(t,e);n.appendChild(a),t.completed&&a.classList.add("completed"),a.querySelector(".delete-task").onclick=()=>{fe("task",t.name,(()=>{const e=Ht.find((e=>e.name===t.projectName)),n=Ht.indexOf(e),a=e.todos.indexOf(t);e.deleteTodo(a),Et(),Lt(Ht,n)}))},a.querySelector(".edit-task").onclick=()=>{document.getElementById("taskName").value=t.name,document.getElementById("dueDate").value=t.dueDate,document.querySelector(`input[name="priority"][value="${t.priority}"]`).checked=!0,projectSelect.value=t.projectName;const e=Ht.find((e=>e.name===t.projectName)),n=Ht.indexOf(e);Nt(taskModal,le),document.getElementById("saveTaskBtn").onclick=e=>{e.preventDefault(),t.name=document.getElementById("taskName").value,t.dueDate=document.getElementById("dueDate").value,t.priority=document.querySelector('input[name="priority"]:checked').value,t.projectName=projectSelect.value,Et(),Lt(Ht,n),xt(taskModal,le)}},a.querySelector(".toggle-complete").onclick=e=>{const n=Ht.find((e=>e.name===t.projectName)),o=n.todos.indexOf(t);n.todos[o].toggleComplete(),e.target.checked?a.classList.add("completed"):a.classList.remove("completed"),Et()}}function Ot(t,e,n){const a=pt(),o=yt(a,1),i=L(a,{weekStartsOn:1}),s=St(a,{weekStartsOn:1}),c=L(wt(a,1),{weekStartsOn:1}),d=St(c,{weekStartsOn:1});n.innerHTML="",e.forEach((e=>{e.todos.forEach(((e,u)=>{const l=r(e.dueDate);let m=!1;("today"===t&&jt(l,a)||"tomorrow"===t&&jt(l,o)||"thisWeek"===t&&Bt(l,{start:i,end:s})||"nextWeek"===t&&Bt(l,{start:c,end:d}))&&(m=!0),m&&It(e,u,n)}))}))}function qt(t){const e=new p(t.name,t.description);return t.todos.forEach((t=>{const n=new y(t.name,t.dueDate,t.priority,t.projectName,t.completed);e.addTodo(n)})),e}!function(){const t=document.querySelector("#modals");t.innerHTML+='<div id="projectModal" class="modal"> <form class="modal-content" id="projectForm"> <span class="close icon" id="closeProjectModal">close</span> <h2 class="modal-title">Add Project</h2> <p class="note">Only 5 projects are allowed</p> <input type="text" id="projectName" class="user-input" placeholder="Project Name" required> <textarea id="projectDescription" maxlength="50" class="user-input" placeholder="What is this project for"></textarea> <div class="modal-actions"> <button id="saveProjectBtn">Save Project</button> </div> </form> </div>',t.innerHTML+='<div id="taskModal" class="modal"> <form class="modal-content" id="taskForm"> <span class="close icon" id="closeTaskModal">close</span> <h2 class="modal-title">Add Task</h2> <div class="form-group"> <label for="taskName">What needs to get done?</label> <input type="text" id="taskName" class="user-input" placeholder="Task Name" required> </div> <div class="form-group"> <label for="dueDate">What is the due date?</label> <input type="date" id="dueDate" class="user-input"> </div> <div class="priority-container"> <p>Task priority</p> <div class="form-radio"> <input type="radio" name="priority" id="priorityLow" value="low" checked="true" required> <label for="priorityLow">Low</label> </div> <div class="form-radio"> <input type="radio" name="priority" id="priorityMedium" value="medium" required> <label for="priorityMedium">Medium</label> </div> <div class="form-radio"> <input type="radio" name="priority" id="priorityHigh" value="high" required> <label for="priorityHigh">High</label> </div> </div> <select id="projectSelect" class="user-input"></select> <div class="modal-actions"> <button id="saveTaskBtn" type="submit" class="save">Save Task</button> </div> </form> </div>',t.innerHTML+='<div id="noteModal" class="modal"> <form class="modal-content" id="noteForm"> <span class="close icon" id="closeNoteModal">close</span> <h2 class="modal-title">Add Note</h2> <textarea id="noteText" class="user-input" placeholder="Note text" required></textarea> <div class="modal-actions"> <button id="saveNoteBtn">Save Note</button> </div> </form> </div>',t.innerHTML+='<div id="confirmationModal" class="modal"> <div class="modal-content"> <span class="close" id="closeConfirmationModal">&times;</span> <h2 class="modal-title center">Are you sure you want to delete this <span id="conformationModalElement"></span>?</h2> <p id="confirmationMessage" class="text-center"></p> <div class="modal-actions center"> <button id="confirmDeleteBtn" class="button delete">Delete</button> <button id="cancelDeleteBtn" class="button cancel">Cancel</button> </div> </div> </div>',function(t){const e=ht(new Date,"yyyy-MM-dd");t.value=e}(document.getElementById("dueDate"))}(),document.querySelector("#sidebar").innerHTML=' <div class="sidebar-container"> <div class="sidebar-logo">ToDo <span>App</span></div> <div class="sidebar-group"> <div class="group-list"> <div class="list-item active"> <button id="viewAllBtn">All Tasks</button> </div> </div> </div> <div class="sidebar-group due"> <div class="group-title"> <h2 class="title">Due by</h2> </div> <div class="group-list"> <div class="list-item"> <button id="todayBtn">Today</button> </div> <div class="list-item"> <button id="tomorrowBtn">Tomorrow</button> </div> <div class="list-item"> <button id="thisWeekBtn">This Week</button> </div> <div class="list-item"> <button id="nextWeekBtn">Next Week</button> </div> </div> </div> <div class="sidebar-group projects"> <div class="group-title"> <h2 class="title">Projects</h2> <button id="addProjectBtn" class="add-new-element"><span class="icon">add</span></button> </div> <div class="group-list" id="projectList"></div> </div> </div>',document.querySelector("#notes").innerHTML=' <div class="sidebar-container"> <div class="sidebar-group"> <div class="group-title"> <h2 class="title">Notes</h2> <button id="addNoteBtn"><span class="icon">add</span></button> </div> <div class="group-list" id="notesContainer"> <div class="list-item"> <div class="note"> Lorem ipsum dolor sit amet, consectetur adipisicing elit. Commodi fugit ipsum unde illo sit ipsa culpa, eos maxime? Nihil id vero natus tenetur rerum autem esse assumenda alias modi ut! </div> </div> </div> </div> </div>';let Ht=JSON.parse(localStorage.getItem("projects"))||Object.values(Mt).map(qt);Ht=Ht.map(qt);let $t=JSON.parse(localStorage.getItem("notes"))||Tt,Yt=Ht[0].name||"";const Ft=document.getElementById("addProjectBtn"),At=document.getElementById("addTaskBtn"),zt=document.getElementById("addNoteBtn"),Qt=document.getElementById("viewAllBtn"),Ut=document.getElementById("todayBtn"),Gt=document.getElementById("tomorrowBtn"),Jt=document.getElementById("thisWeekBtn"),Xt=document.getElementById("nextWeekBtn"),Zt=document.getElementById("projectModal"),Rt=document.getElementById("taskModal"),Vt=document.getElementById("noteModal"),Kt=document.getElementById("closeProjectModal"),_t=document.getElementById("closeTaskModal"),te=document.getElementById("closeNoteModal"),ee=document.getElementById("confirmationModal"),ne=document.getElementById("closeConfirmationModal"),ae=document.getElementById("projectForm"),oe=document.getElementById("taskForm"),re=document.getElementById("noteForm"),ie=document.getElementById("tasksContainer"),se=document.getElementById("notesContainer"),ce=document.getElementById("projectSelect"),de=document.getElementById("confirmDeleteBtn"),ue=document.getElementById("cancelDeleteBtn"),le=document.getElementById("modals");let me=null;function he(){Ht.length>=5?Ft.setAttribute("disabled","disabled"):Ft.removeAttribute("disabled")}function fe(t,e,n){document.getElementById("conformationModalElement").textContent=t,document.getElementById("confirmationMessage").textContent=e,me=n,le.classList.add("open"),ee.classList.add("open")}function ge(){le.classList.remove("open"),ee.classList.remove("open"),me=null}function pe(){const t=document.getElementById("projectList");t.innerHTML="",Ht.forEach(((e,n)=>{e.sortTodos();const a=document.createElement("div");a.className="list-item","Default"===e.name?a.innerHTML=`<button class="project-button" data-index="${n}">${e.name}</button> <span class="project-description">${e.description}</span>`:a.innerHTML=`<button class="project-button" data-index="${n}">${e.name}</button>\n                                     <button class="delete-project" data-index="${n}"><span class="icon">delete</span></button>\n                                     <span class="project-description">${e.description}</span>`,t.appendChild(a)})),ce.innerHTML="",Ht.forEach((t=>{const e=document.createElement("option");e.value=t.name,e.textContent=t.name,ce.appendChild(e)})),document.querySelectorAll(".project-button").forEach((t=>{t.onclick=t=>{const e=t.target.dataset.index;Yt=Ht[e].name,Lt(Ht,e)}})),document.querySelectorAll(".delete-project").forEach((t=>{t.onclick=t=>{const e=t.target.dataset.index;fe("project",`Name: ${Ht[e].name}, For: ${Ht[e].description}`,(()=>{Ht.splice(e,1),Et(),pe(),he()}))}}))}function ye(){se.innerHTML="",$t.forEach(((t,e)=>{const n=document.createElement("div");n.className="note",n.innerHTML=`\n            <p>${t.text}</p>\n            <p class="note-date">Added on: ${t.dateAdded}</p>\n            <div class="note-actions">\n                <button class="edit-note icon" data-index="${e}">Edit</button>\n                <button class="delete-note icon" data-index="${e}">Delete</button>\n            </div>\n        `,se.appendChild(n),n.querySelector(".delete-note").onclick=()=>{fe("note",null,(()=>{$t.splice(e,1),Et(),ye()}))},n.querySelector(".edit-note").onclick=()=>{document.getElementById("noteText").value=t.text,Nt(Vt,le);let n=e;re.onclick=()=>{$t[n].text=document.getElementById("noteText").value,Et(),ye(),xt(Vt,le)}}}))}Ft.onclick=()=>Nt(Zt,le),At.onclick=()=>Nt(Rt,le,Yt),zt.onclick=()=>Nt(Vt,le),Qt.onclick=()=>Lt(Ht),Ut.onclick=()=>Ot("today",Ht,ie),Gt.onclick=()=>Ot("tomorrow",Ht,ie),Jt.onclick=()=>Ot("thisWeek",Ht,ie),Xt.onclick=()=>Ot("nextWeek",Ht,ie),Kt.onclick=()=>xt(Zt,le),_t.onclick=()=>xt(Rt,le),te.onclick=()=>xt(Vt,le),ne.onclick=()=>ge(),ue.onclick=()=>ge(),de.onclick=()=>{me&&(me(),ge())},ae.onclick=()=>{const t=document.getElementById("projectName").value,e=document.getElementById("projectDescription").value;if(t){const n=new p(t,e);Ht.push(n),Et(),pe(),xt(Zt,le),document.getElementById("projectName").value="",document.getElementById("projectDescription").value="",he()}},oe.onsubmit=t=>{t.preventDefault();const e=document.getElementById("taskName").value,n=document.getElementById("dueDate").value,a=ce.value,o=document.querySelector('input[name="priority"]:checked').value;if(e&&n&&a&&o){const t=new y(e,n,o,a),r=Ht.findIndex((t=>t.name===a));Ht[r].addTodo(t),Et(),Lt(Ht,r),xt(Rt,le)}},re.onclick=t=>{t.preventDefault();const e=document.getElementById("noteText").value;if(e){const t=Dt(new Date);$t.push({text:e,dateAdded:t}),Et(),ye(),xt(Vt,le)}};const we=document.querySelector(".sidebar-container");we.addEventListener("click",(t=>{if("BUTTON"===t.target.tagName){we.querySelectorAll(".list-item button, .project-btn").forEach((t=>t.parentNode.classList.remove("active"))),t.target.parentNode.classList.contains("list-item")||t.target.classList.contains("project-btn")?t.target.parentNode.classList.add("active"):t.target.classList.contains("project-btn")&&t.target.classList.add("active")}})),document.addEventListener("DOMContentLoaded",(()=>{!function(){const t=document.getElementById("dueDate"),e=(new Date).toISOString().split("T")[0];t.setAttribute("min",e)}();document.querySelectorAll('input[name="priority"]').forEach((t=>{"high"===t.value&&(t.checked=!0)}))})),pe(),Lt(Ht),ye(),he()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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N2IsUUFDVDZiLEVBQU03RixTQUFVLEVBQ2pCLEdBQ0MsSUFJSHFFLEtBQ0FyRixHQUFhZixJQUNiMkcsS0FDQVosSSIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW4vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vb2Rpbi93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vb2Rpbi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvY29uc3RhbnRzLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3BhcnNlSVNPLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3RvRGF0ZS5tanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9jb21wYXJlQXNjLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vc3JjL29kaW50b2RvL2pzL3Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL3NyYy9vZGludG9kby9qcy90b2RvLmpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4ubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy5tanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS5tanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4ubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4ubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvZGVmYXVsdE9wdGlvbnMubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZkRheS5tanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2NvbnN0cnVjdEZyb20ubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZlllYXIubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0RGF5T2ZZZWFyLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZXZWVrLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZJU09XZWVrLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldElTT1dlZWtZZWFyLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZJU09XZWVrWWVhci5tanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRJU09XZWVrLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2dldFdlZWtZZWFyLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZXZWVrWWVhci5tanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRXZWVrLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvYWRkTGVhZGluZ1plcm9zLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvZm9ybWF0L2xpZ2h0Rm9ybWF0dGVycy5tanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL19saWIvcHJvdGVjdGVkVG9rZW5zLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzRGF0ZS5tanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc1ZhbGlkLm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2Zvcm1hdC5tanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9mb3JtYXRJU08ubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZlRvZGF5Lm1qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2FkZERheXMubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvYWRkV2Vla3MubWpzIiwid2VicGFjazovL29kaW4vLi9zcmMvb2RpbnRvZG8vanMvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL3NyYy9vZGludG9kby9qcy9zaG93SGlkZU1vZGFscy5qcyIsIndlYnBhY2s6Ly9vZGluLy4vc3JjL29kaW50b2RvL2pzL3NhdmVUb0xvY2FsU3RvcmFnZS5qcyIsIndlYnBhY2s6Ly9vZGluLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VuZE9mV2Vlay5tanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pc1NhbWVEYXkubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNXaXRoaW5JbnRlcnZhbC5tanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9kaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZGlmZmVyZW5jZUluSG91cnMubWpzIiwid2VicGFjazovL29kaW4vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9nZXRSb3VuZGluZ01ldGhvZC5tanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mVG9tb3Jyb3cubWpzIiwid2VicGFjazovL29kaW4vLi9zcmMvb2RpbnRvZG8vanMvZGlzcGxheVRhc2tzLmpzIiwid2VicGFjazovL29kaW4vLi9zcmMvb2RpbnRvZG8vanMvYXBwZW5kVGFzay5qcyIsIndlYnBhY2s6Ly9vZGluLy4vc3JjL29kaW50b2RvL2pzL2NyZWF0ZVRhc2suanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL3NyYy9vZGludG9kby9qcy9maWx0ZXJUYXNrcy5qcyIsIndlYnBhY2s6Ly9vZGluLy4vc3JjL29kaW50b2RvL2luZGV4LmpzIiwid2VicGFjazovL29kaW4vLi9zcmMvb2RpbnRvZG8vanMvbW9kYWxzLmpzIiwid2VicGFjazovL29kaW4vLi9zcmMvb2RpbnRvZG8vbGF5b3V0cy9wcm9qZWN0bW9kYWwuaHRtbCIsIndlYnBhY2s6Ly9vZGluLy4vc3JjL29kaW50b2RvL2xheW91dHMvdGFza21vZGFsLmh0bWwiLCJ3ZWJwYWNrOi8vb2Rpbi8uL3NyYy9vZGludG9kby9sYXlvdXRzL25vdGVzbW9kYWwuaHRtbCIsIndlYnBhY2s6Ly9vZGluLy4vc3JjL29kaW50b2RvL2xheW91dHMvY29uZmlybWF0aW9ubW9kYWwuaHRtbCIsIndlYnBhY2s6Ly9vZGluLy4vc3JjL29kaW50b2RvL2pzL3NpZGViYXIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi8uL3NyYy9vZGludG9kby9sYXlvdXRzL3NpZGViYXIuaHRtbCIsIndlYnBhY2s6Ly9vZGluLy4vc3JjL29kaW50b2RvL2pzL25vdGVzLmpzIiwid2VicGFjazovL29kaW4vLi9zcmMvb2RpbnRvZG8vbGF5b3V0cy9ub3Rlcy5odG1sIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCIvKipcbiAqIEBtb2R1bGUgY29uc3RhbnRzXG4gKiBAc3VtbWFyeSBVc2VmdWwgY29uc3RhbnRzXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbGxlY3Rpb24gb2YgdXNlZnVsIGRhdGUgY29uc3RhbnRzLlxuICpcbiAqIFRoZSBjb25zdGFudHMgY291bGQgYmUgaW1wb3J0ZWQgZnJvbSBgZGF0ZS1mbnMvY29uc3RhbnRzYDpcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgbWF4VGltZSwgbWluVGltZSB9IGZyb20gXCIuL2NvbnN0YW50cy9kYXRlLWZucy9jb25zdGFudHNcIjtcbiAqXG4gKiBmdW5jdGlvbiBpc0FsbG93ZWRUaW1lKHRpbWUpIHtcbiAqICAgcmV0dXJuIHRpbWUgPD0gbWF4VGltZSAmJiB0aW1lID49IG1pblRpbWU7XG4gKiB9XG4gKiBgYGBcbiAqL1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgZGF5c0luV2Vla1xuICogQHN1bW1hcnkgRGF5cyBpbiAxIHdlZWsuXG4gKi9cbmV4cG9ydCBjb25zdCBkYXlzSW5XZWVrID0gNztcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIGRheXNJblllYXJcbiAqIEBzdW1tYXJ5IERheXMgaW4gMSB5ZWFyLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSG93IG1hbnkgZGF5cyBpbiBhIHllYXIuXG4gKlxuICogT25lIHllYXJzIGVxdWFscyAzNjUuMjQyNSBkYXlzIGFjY29yZGluZyB0byB0aGUgZm9ybXVsYTpcbiAqXG4gKiA+IExlYXAgeWVhciBvY2N1cmVzIGV2ZXJ5IDQgeWVhcnMsIGV4Y2VwdCBmb3IgeWVhcnMgdGhhdCBhcmUgZGl2aXNhYmxlIGJ5IDEwMCBhbmQgbm90IGRpdmlzYWJsZSBieSA0MDAuXG4gKiA+IDEgbWVhbiB5ZWFyID0gKDM2NSsxLzQtMS8xMDArMS80MDApIGRheXMgPSAzNjUuMjQyNSBkYXlzXG4gKi9cbmV4cG9ydCBjb25zdCBkYXlzSW5ZZWFyID0gMzY1LjI0MjU7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtYXhUaW1lXG4gKiBAc3VtbWFyeSBNYXhpbXVtIGFsbG93ZWQgdGltZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgbWF4VGltZSB9IGZyb20gXCIuL2NvbnN0YW50cy9kYXRlLWZucy9jb25zdGFudHNcIjtcbiAqXG4gKiBjb25zdCBpc1ZhbGlkID0gODY0MDAwMDAwMDAwMDAwMSA8PSBtYXhUaW1lO1xuICogLy89PiBmYWxzZVxuICpcbiAqIG5ldyBEYXRlKDg2NDAwMDAwMDAwMDAwMDEpO1xuICogLy89PiBJbnZhbGlkIERhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IG1heFRpbWUgPSBNYXRoLnBvdygxMCwgOCkgKiAyNCAqIDYwICogNjAgKiAxMDAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWluVGltZVxuICogQHN1bW1hcnkgTWluaW11bSBhbGxvd2VkIHRpbWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCB7IG1pblRpbWUgfSBmcm9tIFwiLi9jb25zdGFudHMvZGF0ZS1mbnMvY29uc3RhbnRzXCI7XG4gKlxuICogY29uc3QgaXNWYWxpZCA9IC04NjQwMDAwMDAwMDAwMDAxID49IG1pblRpbWU7XG4gKiAvLz0+IGZhbHNlXG4gKlxuICogbmV3IERhdGUoLTg2NDAwMDAwMDAwMDAwMDEpXG4gKiAvLz0+IEludmFsaWQgRGF0ZVxuICovXG5leHBvcnQgY29uc3QgbWluVGltZSA9IC1tYXhUaW1lO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5XZWVrXG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSB3ZWVrLlxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5XZWVrID0gNjA0ODAwMDAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5EYXlcbiAqIEBzdW1tYXJ5IE1pbGxpc2Vjb25kcyBpbiAxIGRheS5cbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luRGF5ID0gODY0MDAwMDA7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtaWxsaXNlY29uZHNJbk1pbnV0ZVxuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgbWludXRlXG4gKi9cbmV4cG9ydCBjb25zdCBtaWxsaXNlY29uZHNJbk1pbnV0ZSA9IDYwMDAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5Ib3VyXG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSBob3VyXG4gKi9cbmV4cG9ydCBjb25zdCBtaWxsaXNlY29uZHNJbkhvdXIgPSAzNjAwMDAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWlsbGlzZWNvbmRzSW5TZWNvbmRcbiAqIEBzdW1tYXJ5IE1pbGxpc2Vjb25kcyBpbiAxIHNlY29uZFxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5TZWNvbmQgPSAxMDAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWludXRlc0luWWVhclxuICogQHN1bW1hcnkgTWludXRlcyBpbiAxIHllYXIuXG4gKi9cbmV4cG9ydCBjb25zdCBtaW51dGVzSW5ZZWFyID0gNTI1NjAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWludXRlc0luTW9udGhcbiAqIEBzdW1tYXJ5IE1pbnV0ZXMgaW4gMSBtb250aC5cbiAqL1xuZXhwb3J0IGNvbnN0IG1pbnV0ZXNJbk1vbnRoID0gNDMyMDA7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtaW51dGVzSW5EYXlcbiAqIEBzdW1tYXJ5IE1pbnV0ZXMgaW4gMSBkYXkuXG4gKi9cbmV4cG9ydCBjb25zdCBtaW51dGVzSW5EYXkgPSAxNDQwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbWludXRlc0luSG91clxuICogQHN1bW1hcnkgTWludXRlcyBpbiAxIGhvdXIuXG4gKi9cbmV4cG9ydCBjb25zdCBtaW51dGVzSW5Ib3VyID0gNjA7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtb250aHNJblF1YXJ0ZXJcbiAqIEBzdW1tYXJ5IE1vbnRocyBpbiAxIHF1YXJ0ZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBtb250aHNJblF1YXJ0ZXIgPSAzO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgbW9udGhzSW5ZZWFyXG4gKiBAc3VtbWFyeSBNb250aHMgaW4gMSB5ZWFyLlxuICovXG5leHBvcnQgY29uc3QgbW9udGhzSW5ZZWFyID0gMTI7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBxdWFydGVyc0luWWVhclxuICogQHN1bW1hcnkgUXVhcnRlcnMgaW4gMSB5ZWFyXG4gKi9cbmV4cG9ydCBjb25zdCBxdWFydGVyc0luWWVhciA9IDQ7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBzZWNvbmRzSW5Ib3VyXG4gKiBAc3VtbWFyeSBTZWNvbmRzIGluIDEgaG91ci5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlY29uZHNJbkhvdXIgPSAzNjAwO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luTWludXRlXG4gKiBAc3VtbWFyeSBTZWNvbmRzIGluIDEgbWludXRlLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luTWludXRlID0gNjA7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBzZWNvbmRzSW5EYXlcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSBkYXkuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5EYXkgPSBzZWNvbmRzSW5Ib3VyICogMjQ7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBzZWNvbmRzSW5XZWVrXG4gKiBAc3VtbWFyeSBTZWNvbmRzIGluIDEgd2Vlay5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlY29uZHNJbldlZWsgPSBzZWNvbmRzSW5EYXkgKiA3O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luWWVhclxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIHllYXIuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5ZZWFyID0gc2Vjb25kc0luRGF5ICogZGF5c0luWWVhcjtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJbk1vbnRoXG4gKiBAc3VtbWFyeSBTZWNvbmRzIGluIDEgbW9udGhcbiAqL1xuZXhwb3J0IGNvbnN0IHNlY29uZHNJbk1vbnRoID0gc2Vjb25kc0luWWVhciAvIDEyO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luUXVhcnRlclxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIHF1YXJ0ZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5RdWFydGVyID0gc2Vjb25kc0luTW9udGggKiAzO1xuIiwiaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5Ib3VyLCBtaWxsaXNlY29uZHNJbk1pbnV0ZSB9IGZyb20gXCIuL2NvbnN0YW50cy5tanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIHBhcnNlSVNPfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgcGFyc2VJU09cbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUGFyc2UgSVNPIHN0cmluZ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUGFyc2UgdGhlIGdpdmVuIHN0cmluZyBpbiBJU08gODYwMSBmb3JtYXQgYW5kIHJldHVybiBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEZ1bmN0aW9uIGFjY2VwdHMgY29tcGxldGUgSVNPIDg2MDEgZm9ybWF0cyBhcyB3ZWxsIGFzIHBhcnRpYWwgaW1wbGVtZW50YXRpb25zLlxuICogSVNPIDg2MDE6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDFcbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXNuJ3QgYSBzdHJpbmcsIHRoZSBmdW5jdGlvbiBjYW5ub3QgcGFyc2UgdGhlIHN0cmluZyBvclxuICogdGhlIHZhbHVlcyBhcmUgaW52YWxpZCwgaXQgcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGFyZ3VtZW50IC0gVGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgc3RyaW5nICcyMDE0LTAyLTExVDExOjMwOjMwJyB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gcGFyc2VJU08oJzIwMTQtMDItMTFUMTE6MzA6MzAnKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCBzdHJpbmcgJyswMjAxNDEwMScgdG8gZGF0ZSxcbiAqIC8vIGlmIHRoZSBhZGRpdGlvbmFsIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGV4dGVuZGVkIHllYXIgZm9ybWF0IGlzIDE6XG4gKiBjb25zdCByZXN1bHQgPSBwYXJzZUlTTygnKzAyMDE0MTAxJywgeyBhZGRpdGlvbmFsRGlnaXRzOiAxIH0pXG4gKiAvLz0+IEZyaSBBcHIgMTEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJU08oYXJndW1lbnQsIG9wdGlvbnMpIHtcbiAgY29uc3QgYWRkaXRpb25hbERpZ2l0cyA9IG9wdGlvbnM/LmFkZGl0aW9uYWxEaWdpdHMgPz8gMjtcbiAgY29uc3QgZGF0ZVN0cmluZ3MgPSBzcGxpdERhdGVTdHJpbmcoYXJndW1lbnQpO1xuXG4gIGxldCBkYXRlO1xuICBpZiAoZGF0ZVN0cmluZ3MuZGF0ZSkge1xuICAgIGNvbnN0IHBhcnNlWWVhclJlc3VsdCA9IHBhcnNlWWVhcihkYXRlU3RyaW5ncy5kYXRlLCBhZGRpdGlvbmFsRGlnaXRzKTtcbiAgICBkYXRlID0gcGFyc2VEYXRlKHBhcnNlWWVhclJlc3VsdC5yZXN0RGF0ZVN0cmluZywgcGFyc2VZZWFyUmVzdWx0LnllYXIpO1xuICB9XG5cbiAgaWYgKCFkYXRlIHx8IGlzTmFOKGRhdGUuZ2V0VGltZSgpKSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgY29uc3QgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGxldCB0aW1lID0gMDtcbiAgbGV0IG9mZnNldDtcblxuICBpZiAoZGF0ZVN0cmluZ3MudGltZSkge1xuICAgIHRpbWUgPSBwYXJzZVRpbWUoZGF0ZVN0cmluZ3MudGltZSk7XG4gICAgaWYgKGlzTmFOKHRpbWUpKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGF0ZVN0cmluZ3MudGltZXpvbmUpIHtcbiAgICBvZmZzZXQgPSBwYXJzZVRpbWV6b25lKGRhdGVTdHJpbmdzLnRpbWV6b25lKTtcbiAgICBpZiAoaXNOYU4ob2Zmc2V0KSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGRpcnR5RGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUpO1xuICAgIC8vIEpTIHBhcnNlZCBzdHJpbmcgYXNzdW1pbmcgaXQncyBpbiBVVEMgdGltZXpvbmVcbiAgICAvLyBidXQgd2UgbmVlZCBpdCB0byBiZSBwYXJzZWQgaW4gb3VyIHRpbWV6b25lXG4gICAgLy8gc28gd2UgdXNlIHV0YyB2YWx1ZXMgdG8gYnVpbGQgZGF0ZSBpbiBvdXIgdGltZXpvbmUuXG4gICAgLy8gWWVhciB2YWx1ZXMgZnJvbSAwIHRvIDk5IG1hcCB0byB0aGUgeWVhcnMgMTkwMCB0byAxOTk5XG4gICAgLy8gc28gc2V0IHllYXIgZXhwbGljaXRseSB3aXRoIHNldEZ1bGxZZWFyLlxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBEYXRlKDApO1xuICAgIHJlc3VsdC5zZXRGdWxsWWVhcihcbiAgICAgIGRpcnR5RGF0ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgZGlydHlEYXRlLmdldFVUQ01vbnRoKCksXG4gICAgICBkaXJ0eURhdGUuZ2V0VVRDRGF0ZSgpLFxuICAgICk7XG4gICAgcmVzdWx0LnNldEhvdXJzKFxuICAgICAgZGlydHlEYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICBkaXJ0eURhdGUuZ2V0VVRDTWludXRlcygpLFxuICAgICAgZGlydHlEYXRlLmdldFVUQ1NlY29uZHMoKSxcbiAgICAgIGRpcnR5RGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKSxcbiAgICApO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSArIG9mZnNldCk7XG59XG5cbmNvbnN0IHBhdHRlcm5zID0ge1xuICBkYXRlVGltZURlbGltaXRlcjogL1tUIF0vLFxuICB0aW1lWm9uZURlbGltaXRlcjogL1taIF0vaSxcbiAgdGltZXpvbmU6IC8oW1orLV0uKikkLyxcbn07XG5cbmNvbnN0IGRhdGVSZWdleCA9XG4gIC9eLT8oPzooXFxkezN9KXwoXFxkezJ9KSg/Oi0/KFxcZHsyfSkpP3xXKFxcZHsyfSkoPzotPyhcXGR7MX0pKT98KSQvO1xuY29uc3QgdGltZVJlZ2V4ID1cbiAgL14oXFxkezJ9KD86Wy4sXVxcZCopPykoPzo6PyhcXGR7Mn0oPzpbLixdXFxkKik/KSk/KD86Oj8oXFxkezJ9KD86Wy4sXVxcZCopPykpPyQvO1xuY29uc3QgdGltZXpvbmVSZWdleCA9IC9eKFsrLV0pKFxcZHsyfSkoPzo6PyhcXGR7Mn0pKT8kLztcblxuZnVuY3Rpb24gc3BsaXREYXRlU3RyaW5nKGRhdGVTdHJpbmcpIHtcbiAgY29uc3QgZGF0ZVN0cmluZ3MgPSB7fTtcbiAgY29uc3QgYXJyYXkgPSBkYXRlU3RyaW5nLnNwbGl0KHBhdHRlcm5zLmRhdGVUaW1lRGVsaW1pdGVyKTtcbiAgbGV0IHRpbWVTdHJpbmc7XG5cbiAgLy8gVGhlIHJlZ2V4IG1hdGNoIHNob3VsZCBvbmx5IHJldHVybiBhdCBtYXhpbXVtIHR3byBhcnJheSBlbGVtZW50cy5cbiAgLy8gW2RhdGVdLCBbdGltZV0sIG9yIFtkYXRlLCB0aW1lXS5cbiAgaWYgKGFycmF5Lmxlbmd0aCA+IDIpIHtcbiAgICByZXR1cm4gZGF0ZVN0cmluZ3M7XG4gIH1cblxuICBpZiAoLzovLnRlc3QoYXJyYXlbMF0pKSB7XG4gICAgdGltZVN0cmluZyA9IGFycmF5WzBdO1xuICB9IGVsc2Uge1xuICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBhcnJheVswXTtcbiAgICB0aW1lU3RyaW5nID0gYXJyYXlbMV07XG4gICAgaWYgKHBhdHRlcm5zLnRpbWVab25lRGVsaW1pdGVyLnRlc3QoZGF0ZVN0cmluZ3MuZGF0ZSkpIHtcbiAgICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBkYXRlU3RyaW5nLnNwbGl0KHBhdHRlcm5zLnRpbWVab25lRGVsaW1pdGVyKVswXTtcbiAgICAgIHRpbWVTdHJpbmcgPSBkYXRlU3RyaW5nLnN1YnN0cihcbiAgICAgICAgZGF0ZVN0cmluZ3MuZGF0ZS5sZW5ndGgsXG4gICAgICAgIGRhdGVTdHJpbmcubGVuZ3RoLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGltZVN0cmluZykge1xuICAgIGNvbnN0IHRva2VuID0gcGF0dGVybnMudGltZXpvbmUuZXhlYyh0aW1lU3RyaW5nKTtcbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nLnJlcGxhY2UodG9rZW5bMV0sIFwiXCIpO1xuICAgICAgZGF0ZVN0cmluZ3MudGltZXpvbmUgPSB0b2tlblsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0ZVN0cmluZ3MudGltZSA9IHRpbWVTdHJpbmc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGVTdHJpbmdzO1xufVxuXG5mdW5jdGlvbiBwYXJzZVllYXIoZGF0ZVN0cmluZywgYWRkaXRpb25hbERpZ2l0cykge1xuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoXG4gICAgXCJeKD86KFxcXFxkezR9fFsrLV1cXFxcZHtcIiArXG4gICAgICAoNCArIGFkZGl0aW9uYWxEaWdpdHMpICtcbiAgICAgIFwifSl8KFxcXFxkezJ9fFsrLV1cXFxcZHtcIiArXG4gICAgICAoMiArIGFkZGl0aW9uYWxEaWdpdHMpICtcbiAgICAgIFwifSkkKVwiLFxuICApO1xuXG4gIGNvbnN0IGNhcHR1cmVzID0gZGF0ZVN0cmluZy5tYXRjaChyZWdleCk7XG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB5ZWFyXG4gIGlmICghY2FwdHVyZXMpIHJldHVybiB7IHllYXI6IE5hTiwgcmVzdERhdGVTdHJpbmc6IFwiXCIgfTtcblxuICBjb25zdCB5ZWFyID0gY2FwdHVyZXNbMV0gPyBwYXJzZUludChjYXB0dXJlc1sxXSkgOiBudWxsO1xuICBjb25zdCBjZW50dXJ5ID0gY2FwdHVyZXNbMl0gPyBwYXJzZUludChjYXB0dXJlc1syXSkgOiBudWxsO1xuXG4gIC8vIGVpdGhlciB5ZWFyIG9yIGNlbnR1cnkgaXMgbnVsbCwgbm90IGJvdGhcbiAgcmV0dXJuIHtcbiAgICB5ZWFyOiBjZW50dXJ5ID09PSBudWxsID8geWVhciA6IGNlbnR1cnkgKiAxMDAsXG4gICAgcmVzdERhdGVTdHJpbmc6IGRhdGVTdHJpbmcuc2xpY2UoKGNhcHR1cmVzWzFdIHx8IGNhcHR1cmVzWzJdKS5sZW5ndGgpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZURhdGUoZGF0ZVN0cmluZywgeWVhcikge1xuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxuICBpZiAoeWVhciA9PT0gbnVsbCkgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG5cbiAgY29uc3QgY2FwdHVyZXMgPSBkYXRlU3RyaW5nLm1hdGNoKGRhdGVSZWdleCk7XG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCBzdHJpbmdcbiAgaWYgKCFjYXB0dXJlcykgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG5cbiAgY29uc3QgaXNXZWVrRGF0ZSA9ICEhY2FwdHVyZXNbNF07XG4gIGNvbnN0IGRheU9mWWVhciA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbMV0pO1xuICBjb25zdCBtb250aCA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbMl0pIC0gMTtcbiAgY29uc3QgZGF5ID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1szXSk7XG4gIGNvbnN0IHdlZWsgPSBwYXJzZURhdGVVbml0KGNhcHR1cmVzWzRdKTtcbiAgY29uc3QgZGF5T2ZXZWVrID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1s1XSkgLSAxO1xuXG4gIGlmIChpc1dlZWtEYXRlKSB7XG4gICAgaWYgKCF2YWxpZGF0ZVdlZWtEYXRlKHllYXIsIHdlZWssIGRheU9mV2VlaykpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgICByZXR1cm4gZGF5T2ZJU09XZWVrWWVhcih5ZWFyLCB3ZWVrLCBkYXlPZldlZWspO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgICBpZiAoXG4gICAgICAhdmFsaWRhdGVEYXRlKHllYXIsIG1vbnRoLCBkYXkpIHx8XG4gICAgICAhdmFsaWRhdGVEYXlPZlllYXJEYXRlKHllYXIsIGRheU9mWWVhcilcbiAgICApIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBNYXRoLm1heChkYXlPZlllYXIsIGRheSkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF0ZVVuaXQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID8gcGFyc2VJbnQodmFsdWUpIDogMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lKHRpbWVTdHJpbmcpIHtcbiAgY29uc3QgY2FwdHVyZXMgPSB0aW1lU3RyaW5nLm1hdGNoKHRpbWVSZWdleCk7XG4gIGlmICghY2FwdHVyZXMpIHJldHVybiBOYU47IC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB0aW1lXG5cbiAgY29uc3QgaG91cnMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzFdKTtcbiAgY29uc3QgbWludXRlcyA9IHBhcnNlVGltZVVuaXQoY2FwdHVyZXNbMl0pO1xuICBjb25zdCBzZWNvbmRzID0gcGFyc2VUaW1lVW5pdChjYXB0dXJlc1szXSk7XG5cbiAgaWYgKCF2YWxpZGF0ZVRpbWUoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgaG91cnMgKiBtaWxsaXNlY29uZHNJbkhvdXIgKyBtaW51dGVzICogbWlsbGlzZWNvbmRzSW5NaW51dGUgKyBzZWNvbmRzICogMTAwMFxuICApO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWVVbml0KHZhbHVlKSB7XG4gIHJldHVybiAodmFsdWUgJiYgcGFyc2VGbG9hdCh2YWx1ZS5yZXBsYWNlKFwiLFwiLCBcIi5cIikpKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWV6b25lKHRpbWV6b25lU3RyaW5nKSB7XG4gIGlmICh0aW1lem9uZVN0cmluZyA9PT0gXCJaXCIpIHJldHVybiAwO1xuXG4gIGNvbnN0IGNhcHR1cmVzID0gdGltZXpvbmVTdHJpbmcubWF0Y2godGltZXpvbmVSZWdleCk7XG4gIGlmICghY2FwdHVyZXMpIHJldHVybiAwO1xuXG4gIGNvbnN0IHNpZ24gPSBjYXB0dXJlc1sxXSA9PT0gXCIrXCIgPyAtMSA6IDE7XG4gIGNvbnN0IGhvdXJzID0gcGFyc2VJbnQoY2FwdHVyZXNbMl0pO1xuICBjb25zdCBtaW51dGVzID0gKGNhcHR1cmVzWzNdICYmIHBhcnNlSW50KGNhcHR1cmVzWzNdKSkgfHwgMDtcblxuICBpZiAoIXZhbGlkYXRlVGltZXpvbmUoaG91cnMsIG1pbnV0ZXMpKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHJldHVybiBzaWduICogKGhvdXJzICogbWlsbGlzZWNvbmRzSW5Ib3VyICsgbWludXRlcyAqIG1pbGxpc2Vjb25kc0luTWludXRlKTtcbn1cblxuZnVuY3Rpb24gZGF5T2ZJU09XZWVrWWVhcihpc29XZWVrWWVhciwgd2VlaywgZGF5KSB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihpc29XZWVrWWVhciwgMCwgNCk7XG4gIGNvbnN0IGZvdXJ0aE9mSmFudWFyeURheSA9IGRhdGUuZ2V0VVRDRGF5KCkgfHwgNztcbiAgY29uc3QgZGlmZiA9ICh3ZWVrIC0gMSkgKiA3ICsgZGF5ICsgMSAtIGZvdXJ0aE9mSmFudWFyeURheTtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgZGlmZik7XG4gIHJldHVybiBkYXRlO1xufVxuXG4vLyBWYWxpZGF0aW9uIGZ1bmN0aW9uc1xuXG4vLyBGZWJydWFyeSBpcyBudWxsIHRvIGhhbmRsZSB0aGUgbGVhcCB5ZWFyICh1c2luZyB8fClcbmNvbnN0IGRheXNJbk1vbnRocyA9IFszMSwgbnVsbCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xuXG5mdW5jdGlvbiBpc0xlYXBZZWFySW5kZXgoeWVhcikge1xuICByZXR1cm4geWVhciAlIDQwMCA9PT0gMCB8fCAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSkge1xuICByZXR1cm4gKFxuICAgIG1vbnRoID49IDAgJiZcbiAgICBtb250aCA8PSAxMSAmJlxuICAgIGRhdGUgPj0gMSAmJlxuICAgIGRhdGUgPD0gKGRheXNJbk1vbnRoc1ttb250aF0gfHwgKGlzTGVhcFllYXJJbmRleCh5ZWFyKSA/IDI5IDogMjgpKVxuICApO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURheU9mWWVhckRhdGUoeWVhciwgZGF5T2ZZZWFyKSB7XG4gIHJldHVybiBkYXlPZlllYXIgPj0gMSAmJiBkYXlPZlllYXIgPD0gKGlzTGVhcFllYXJJbmRleCh5ZWFyKSA/IDM2NiA6IDM2NSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlV2Vla0RhdGUoX3llYXIsIHdlZWssIGRheSkge1xuICByZXR1cm4gd2VlayA+PSAxICYmIHdlZWsgPD0gNTMgJiYgZGF5ID49IDAgJiYgZGF5IDw9IDY7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykge1xuICBpZiAoaG91cnMgPT09IDI0KSB7XG4gICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgJiYgc2Vjb25kcyA9PT0gMDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgc2Vjb25kcyA+PSAwICYmXG4gICAgc2Vjb25kcyA8IDYwICYmXG4gICAgbWludXRlcyA+PSAwICYmXG4gICAgbWludXRlcyA8IDYwICYmXG4gICAgaG91cnMgPj0gMCAmJlxuICAgIGhvdXJzIDwgMjVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVUaW1lem9uZShfaG91cnMsIG1pbnV0ZXMpIHtcbiAgcmV0dXJuIG1pbnV0ZXMgPj0gMCAmJiBtaW51dGVzIDw9IDU5O1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHBhcnNlSVNPO1xuIiwiLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGFyZ3VtZW50IC0gVGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqXG4gKiBAcmV0dXJucyBUaGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICBjb25zdCBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpO1xuXG4gIC8vIENsb25lIHRoZSBkYXRlXG4gIGlmIChcbiAgICBhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAodHlwZW9mIGFyZ3VtZW50ID09PSBcIm9iamVjdFwiICYmIGFyZ1N0ciA9PT0gXCJbb2JqZWN0IERhdGVdXCIpXG4gICkge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgYXJndW1lbnQuY29uc3RydWN0b3IoK2FyZ3VtZW50KTtcbiAgfSBlbHNlIGlmIChcbiAgICB0eXBlb2YgYXJndW1lbnQgPT09IFwibnVtYmVyXCIgfHxcbiAgICBhcmdTdHIgPT09IFwiW29iamVjdCBOdW1iZXJdXCIgfHxcbiAgICB0eXBlb2YgYXJndW1lbnQgPT09IFwic3RyaW5nXCIgfHxcbiAgICBhcmdTdHIgPT09IFwiW29iamVjdCBTdHJpbmddXCJcbiAgKSB7XG4gICAgLy8gVE9ETzogQ2FuIHdlIGdldCByaWQgb2YgYXM/XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUT0RPOiBDYW4gd2UgZ2V0IHJpZCBvZiBhcz9cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHRvRGF0ZTtcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBjb21wYXJlQXNjXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbXBhcmUgdGhlIHR3byBkYXRlcyBhbmQgcmV0dXJuIC0xLCAwIG9yIDEuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wYXJlIHRoZSB0d28gZGF0ZXMgYW5kIHJldHVybiAxIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGFmdGVyIHRoZSBzZWNvbmQsXG4gKiAtMSBpZiB0aGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBvciAwIGlmIGRhdGVzIGFyZSBlcXVhbC5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZUxlZnQgLSBUaGUgZmlyc3QgZGF0ZSB0byBjb21wYXJlXG4gKiBAcGFyYW0gZGF0ZVJpZ2h0IC0gVGhlIHNlY29uZCBkYXRlIHRvIGNvbXBhcmVcbiAqXG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIHRoZSBjb21wYXJpc29uXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbXBhcmUgMTEgRmVicnVhcnkgMTk4NyBhbmQgMTAgSnVseSAxOTg5OlxuICogY29uc3QgcmVzdWx0ID0gY29tcGFyZUFzYyhuZXcgRGF0ZSgxOTg3LCAxLCAxMSksIG5ldyBEYXRlKDE5ODksIDYsIDEwKSlcbiAqIC8vPT4gLTFcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU29ydCB0aGUgYXJyYXkgb2YgZGF0ZXM6XG4gKiBjb25zdCByZXN1bHQgPSBbXG4gKiAgIG5ldyBEYXRlKDE5OTUsIDYsIDIpLFxuICogICBuZXcgRGF0ZSgxOTg3LCAxLCAxMSksXG4gKiAgIG5ldyBEYXRlKDE5ODksIDYsIDEwKVxuICogXS5zb3J0KGNvbXBhcmVBc2MpXG4gKiAvLz0+IFtcbiAqIC8vICAgV2VkIEZlYiAxMSAxOTg3IDAwOjAwOjAwLFxuICogLy8gICBNb24gSnVsIDEwIDE5ODkgMDA6MDA6MDAsXG4gKiAvLyAgIFN1biBKdWwgMDIgMTk5NSAwMDowMDowMFxuICogLy8gXVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZUFzYyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSB7XG4gIGNvbnN0IF9kYXRlTGVmdCA9IHRvRGF0ZShkYXRlTGVmdCk7XG4gIGNvbnN0IF9kYXRlUmlnaHQgPSB0b0RhdGUoZGF0ZVJpZ2h0KTtcblxuICBjb25zdCBkaWZmID0gX2RhdGVMZWZ0LmdldFRpbWUoKSAtIF9kYXRlUmlnaHQuZ2V0VGltZSgpO1xuXG4gIGlmIChkaWZmIDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmIChkaWZmID4gMCkge1xuICAgIHJldHVybiAxO1xuICAgIC8vIFJldHVybiAwIGlmIGRpZmYgaXMgMDsgcmV0dXJuIE5hTiBpZiBkaWZmIGlzIE5hTlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBkaWZmO1xuICB9XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgY29tcGFyZUFzYztcbiIsImltcG9ydCB7IGNvbXBhcmVBc2MsIHBhcnNlSVNPIH0gZnJvbSBcImRhdGUtZm5zXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9qZWN0IHtcclxuXHRjb25zdHJ1Y3RvcihuYW1lLCBkZXNjcmlwdGlvbikge1xyXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHRcdHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuXHRcdHRoaXMudG9kb3MgPSBbXTtcclxuXHR9XHJcblxyXG5cdGFkZFRvZG8gPSAodG9kbykgPT4ge1xyXG5cdFx0dGhpcy50b2Rvcy5wdXNoKHRvZG8pO1xyXG5cdH07XHJcblxyXG5cdGRlbGV0ZVRvZG8gPSAodG9kb0luZGV4KSA9PiB7XHJcblx0XHR0aGlzLnRvZG9zLnNwbGljZSh0b2RvSW5kZXgsIDEpO1xyXG5cdH07XHJcblxyXG5cdGVkaXRUb2RvID0gKHRvZG9JbmRleCwgbmV3RGV0YWlscykgPT4ge1xyXG5cdFx0T2JqZWN0LmFzc2lnbih0aGlzLnRvZG9zW3RvZG9JbmRleF0sIG5ld0RldGFpbHMpO1xyXG5cdH07XHJcblxyXG5cdHNvcnRUb2RvcyA9ICgpID0+IHtcclxuXHRcdHRoaXMudG9kb3Muc29ydCgoYSwgYikgPT4ge1xyXG5cdFx0XHRjb25zdCBkYXRlQSA9IHBhcnNlSVNPKGAke2EuZHVlRGF0ZX1gKTtcclxuXHRcdFx0Y29uc3QgZGF0ZUIgPSBwYXJzZUlTTyhgJHtiLmR1ZURhdGV9YCk7XHJcblx0XHRcdGNvbnN0IGRhdGVDb21wYXJpc29uID0gY29tcGFyZUFzYyhkYXRlQSwgZGF0ZUIpO1xyXG5cdFx0XHRpZiAoZGF0ZUNvbXBhcmlzb24gIT09IDApIHJldHVybiBkYXRlQ29tcGFyaXNvbjtcclxuXHRcdFx0Ly8gSWYgZGF0ZXMgYXJlIGVxdWFsLCBzb3J0IGJ5IHByaW9yaXR5XHJcblx0XHRcdGNvbnN0IHByaW9yaXR5T3JkZXIgPSB7IGxvdzogMywgbWVkaXVtOiAyLCBoaWdoOiAxIH07XHJcblx0XHRcdHJldHVybiBwcmlvcml0eU9yZGVyW2EucHJpb3JpdHldIC0gcHJpb3JpdHlPcmRlcltiLnByaW9yaXR5XTtcclxuXHRcdH0pO1xyXG5cdH07XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9EbyB7XHJcblx0Y29uc3RydWN0b3IobmFtZSwgZHVlRGF0ZSwgcHJpb3JpdHksIHByb2plY3ROYW1lLCBjb21wbGV0ZWQgPSBmYWxzZSkge1xyXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHRcdHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XHJcblx0XHR0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XHJcblx0XHR0aGlzLnByb2plY3ROYW1lID0gcHJvamVjdE5hbWU7XHJcblx0XHR0aGlzLmNvbXBsZXRlZCA9IGNvbXBsZXRlZDtcclxuXHR9XHJcblxyXG5cdHRvZ2dsZUNvbXBsZXRlKCkge1xyXG5cdFx0dGhpcy5jb21wbGV0ZWQgPSAhdGhpcy5jb21wbGV0ZWQ7XHJcblx0fVxyXG59XHJcbiIsImNvbnN0IGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiBcImxlc3MgdGhhbiBhIHNlY29uZFwiLFxuICAgIG90aGVyOiBcImxlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kc1wiLFxuICB9LFxuXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiBcIjEgc2Vjb25kXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IHNlY29uZHNcIixcbiAgfSxcblxuICBoYWxmQU1pbnV0ZTogXCJoYWxmIGEgbWludXRlXCIsXG5cbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogXCJsZXNzIHRoYW4gYSBtaW51dGVcIixcbiAgICBvdGhlcjogXCJsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXNcIixcbiAgfSxcblxuICB4TWludXRlczoge1xuICAgIG9uZTogXCIxIG1pbnV0ZVwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBtaW51dGVzXCIsXG4gIH0sXG5cbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6IFwiYWJvdXQgMSBob3VyXCIsXG4gICAgb3RoZXI6IFwiYWJvdXQge3tjb3VudH19IGhvdXJzXCIsXG4gIH0sXG5cbiAgeEhvdXJzOiB7XG4gICAgb25lOiBcIjEgaG91clwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBob3Vyc1wiLFxuICB9LFxuXG4gIHhEYXlzOiB7XG4gICAgb25lOiBcIjEgZGF5XCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IGRheXNcIixcbiAgfSxcblxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogXCJhYm91dCAxIHdlZWtcIixcbiAgICBvdGhlcjogXCJhYm91dCB7e2NvdW50fX0gd2Vla3NcIixcbiAgfSxcblxuICB4V2Vla3M6IHtcbiAgICBvbmU6IFwiMSB3ZWVrXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IHdlZWtzXCIsXG4gIH0sXG5cbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiBcImFib3V0IDEgbW9udGhcIixcbiAgICBvdGhlcjogXCJhYm91dCB7e2NvdW50fX0gbW9udGhzXCIsXG4gIH0sXG5cbiAgeE1vbnRoczoge1xuICAgIG9uZTogXCIxIG1vbnRoXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IG1vbnRoc1wiLFxuICB9LFxuXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiBcImFib3V0IDEgeWVhclwiLFxuICAgIG90aGVyOiBcImFib3V0IHt7Y291bnR9fSB5ZWFyc1wiLFxuICB9LFxuXG4gIHhZZWFyczoge1xuICAgIG9uZTogXCIxIHllYXJcIixcbiAgICBvdGhlcjogXCJ7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcblxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiBcIm92ZXIgMSB5ZWFyXCIsXG4gICAgb3RoZXI6IFwib3ZlciB7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcblxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6IFwiYWxtb3N0IDEgeWVhclwiLFxuICAgIG90aGVyOiBcImFsbW9zdCB7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXREaXN0YW5jZSA9ICh0b2tlbiwgY291bnQsIG9wdGlvbnMpID0+IHtcbiAgbGV0IHJlc3VsdDtcblxuICBjb25zdCB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKFwie3tjb3VudH19XCIsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnM/LmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuIFwiaW4gXCIgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyBcIiBhZ29cIjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBidWlsZEZvcm1hdExvbmdGbihhcmdzKSB7XG4gIHJldHVybiAob3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgY29uc3QgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBidWlsZEZvcm1hdExvbmdGbiB9IGZyb20gXCIuLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuLm1qc1wiO1xuXG5jb25zdCBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJFRUVFLCBNTU1NIGRvLCB5XCIsXG4gIGxvbmc6IFwiTU1NTSBkbywgeVwiLFxuICBtZWRpdW06IFwiTU1NIGQsIHlcIixcbiAgc2hvcnQ6IFwiTU0vZGQveXl5eVwiLFxufTtcblxuY29uc3QgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwiaDptbTpzcyBhIHp6enpcIixcbiAgbG9uZzogXCJoOm1tOnNzIGEgelwiLFxuICBtZWRpdW06IFwiaDptbTpzcyBhXCIsXG4gIHNob3J0OiBcImg6bW0gYVwiLFxufTtcblxuY29uc3QgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogXCJ7e2RhdGV9fSwge3t0aW1lfX1cIixcbiAgc2hvcnQ6IFwie3tkYXRlfX0sIHt7dGltZX19XCIsXG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJmdWxsXCIsXG4gIH0pLFxuXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6IFwiZnVsbFwiLFxuICB9KSxcblxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6IFwiZnVsbFwiLFxuICB9KSxcbn07XG4iLCJjb25zdCBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6IFwiUFwiLFxufTtcblxuZXhwb3J0IGNvbnN0IGZvcm1hdFJlbGF0aXZlID0gKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykgPT5cbiAgZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBUaGUgbG9jYWxpemUgZnVuY3Rpb24gYXJndW1lbnQgY2FsbGJhY2sgd2hpY2ggYWxsb3dzIHRvIGNvbnZlcnQgcmF3IHZhbHVlIHRvXG4gKiB0aGUgYWN0dWFsIHR5cGUuXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqXG4gKiBAcmV0dXJucyBUaGUgY29udmVydGVkIHZhbHVlXG4gKi9cblxuLyoqXG4gKiBUaGUgbWFwIG9mIGxvY2FsaXplZCB2YWx1ZXMgZm9yIGVhY2ggd2lkdGguXG4gKi9cblxuLyoqXG4gKiBUaGUgaW5kZXggdHlwZSBvZiB0aGUgbG9jYWxlIHVuaXQgdmFsdWUuIEl0IHR5cGVzIGNvbnZlcnNpb24gb2YgdW5pdHMgb2ZcbiAqIHZhbHVlcyB0aGF0IGRvbid0IHN0YXJ0IGF0IDAgKGkuZS4gcXVhcnRlcnMpLlxuICovXG5cbi8qKlxuICogQ29udmVydHMgdGhlIHVuaXQgdmFsdWUgdG8gdGhlIHR1cGxlIG9mIHZhbHVlcy5cbiAqL1xuXG4vKipcbiAqIFRoZSB0dXBsZSBvZiBsb2NhbGl6ZWQgZXJhIHZhbHVlcy4gVGhlIGZpcnN0IGVsZW1lbnQgcmVwcmVzZW50cyBCQyxcbiAqIHRoZSBzZWNvbmQgZWxlbWVudCByZXByZXNlbnRzIEFELlxuICovXG5cbi8qKlxuICogVGhlIHR1cGxlIG9mIGxvY2FsaXplZCBxdWFydGVyIHZhbHVlcy4gVGhlIGZpcnN0IGVsZW1lbnQgcmVwcmVzZW50cyBRMS5cbiAqL1xuXG4vKipcbiAqIFRoZSB0dXBsZSBvZiBsb2NhbGl6ZWQgZGF5IHZhbHVlcy4gVGhlIGZpcnN0IGVsZW1lbnQgcmVwcmVzZW50cyBTdW5kYXkuXG4gKi9cblxuLyoqXG4gKiBUaGUgdHVwbGUgb2YgbG9jYWxpemVkIG1vbnRoIHZhbHVlcy4gVGhlIGZpcnN0IGVsZW1lbnQgcmVwcmVzZW50cyBKYW51YXJ5LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gKHZhbHVlLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgY29udGV4dCA9IG9wdGlvbnM/LmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6IFwic3RhbmRhbG9uZVwiO1xuXG4gICAgbGV0IHZhbHVlc0FycmF5O1xuICAgIGlmIChjb250ZXh0ID09PSBcImZvcm1hdHRpbmdcIiAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucz8ud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID1cbiAgICAgICAgYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICBjb25zdCB3aWR0aCA9IG9wdGlvbnM/LndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbd2lkdGhdIHx8IGFyZ3MudmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gKHN0cmluZywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3Qgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuXG4gICAgY29uc3QgbWF0Y2hQYXR0ZXJuID1cbiAgICAgICh3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdKSB8fFxuICAgICAgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIGNvbnN0IG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuXG4gICAgY29uc3QgcGFyc2VQYXR0ZXJucyA9XG4gICAgICAod2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSkgfHxcbiAgICAgIGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcblxuICAgIGNvbnN0IGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucylcbiAgICAgID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIChwYXR0ZXJuKSA9PiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZykpXG4gICAgICA6IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55IC0tIEkgY2hhbGxhbmdlIHlvdSB0byBmaXggdGhlIHR5cGVcbiAgICAgICAgZmluZEtleShwYXJzZVBhdHRlcm5zLCAocGF0dGVybikgPT4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpKTtcblxuICAgIGxldCB2YWx1ZTtcblxuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKGtleSkgOiBrZXk7XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2tcbiAgICAgID8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgLS0gSSBjaGFsbGFuZ2UgeW91IHRvIGZpeCB0aGUgdHlwZVxuICAgICAgICBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpXG4gICAgICA6IHZhbHVlO1xuXG4gICAgY29uc3QgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG5cbiAgICByZXR1cm4geyB2YWx1ZSwgcmVzdCB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChcbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiZcbiAgICAgIHByZWRpY2F0ZShvYmplY3Rba2V5XSlcbiAgICApIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAobGV0IGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gKHN0cmluZywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgY29uc3QgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcblxuICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICBsZXQgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2tcbiAgICAgID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKVxuICAgICAgOiBwYXJzZVJlc3VsdFswXTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55IC0tIEkgY2hhbGxhbmdlIHlvdSB0byBmaXggdGhlIHR5cGVcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIGNvbnN0IHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIHsgdmFsdWUsIHJlc3QgfTtcbiAgfTtcbn1cbiIsImltcG9ydCB7IGZvcm1hdERpc3RhbmNlIH0gZnJvbSBcIi4vZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS5tanNcIjtcbmltcG9ydCB7IGZvcm1hdExvbmcgfSBmcm9tIFwiLi9lbi1VUy9fbGliL2Zvcm1hdExvbmcubWpzXCI7XG5pbXBvcnQgeyBmb3JtYXRSZWxhdGl2ZSB9IGZyb20gXCIuL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUubWpzXCI7XG5pbXBvcnQgeyBsb2NhbGl6ZSB9IGZyb20gXCIuL2VuLVVTL19saWIvbG9jYWxpemUubWpzXCI7XG5pbXBvcnQgeyBtYXRjaCB9IGZyb20gXCIuL2VuLVVTL19saWIvbWF0Y2gubWpzXCI7XG5cbi8qKlxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF0oaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnApXG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3MpXG4gKi9cbmV4cG9ydCBjb25zdCBlblVTID0ge1xuICBjb2RlOiBcImVuLVVTXCIsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMCAvKiBTdW5kYXkgKi8sXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxLFxuICB9LFxufTtcblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBlblVTO1xuIiwiaW1wb3J0IHsgYnVpbGRMb2NhbGl6ZUZuIH0gZnJvbSBcIi4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuLm1qc1wiO1xuXG5jb25zdCBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogW1wiQlwiLCBcIkFcIl0sXG4gIGFiYnJldmlhdGVkOiBbXCJCQ1wiLCBcIkFEXCJdLFxuICB3aWRlOiBbXCJCZWZvcmUgQ2hyaXN0XCIsIFwiQW5ubyBEb21pbmlcIl0sXG59O1xuXG5jb25zdCBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFtcIjFcIiwgXCIyXCIsIFwiM1wiLCBcIjRcIl0sXG4gIGFiYnJldmlhdGVkOiBbXCJRMVwiLCBcIlEyXCIsIFwiUTNcIiwgXCJRNFwiXSxcbiAgd2lkZTogW1wiMXN0IHF1YXJ0ZXJcIiwgXCIybmQgcXVhcnRlclwiLCBcIjNyZCBxdWFydGVyXCIsIFwiNHRoIHF1YXJ0ZXJcIl0sXG59O1xuXG4vLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbi8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4vLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG5jb25zdCBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbXCJKXCIsIFwiRlwiLCBcIk1cIiwgXCJBXCIsIFwiTVwiLCBcIkpcIiwgXCJKXCIsIFwiQVwiLCBcIlNcIiwgXCJPXCIsIFwiTlwiLCBcIkRcIl0sXG4gIGFiYnJldmlhdGVkOiBbXG4gICAgXCJKYW5cIixcbiAgICBcIkZlYlwiLFxuICAgIFwiTWFyXCIsXG4gICAgXCJBcHJcIixcbiAgICBcIk1heVwiLFxuICAgIFwiSnVuXCIsXG4gICAgXCJKdWxcIixcbiAgICBcIkF1Z1wiLFxuICAgIFwiU2VwXCIsXG4gICAgXCJPY3RcIixcbiAgICBcIk5vdlwiLFxuICAgIFwiRGVjXCIsXG4gIF0sXG5cbiAgd2lkZTogW1xuICAgIFwiSmFudWFyeVwiLFxuICAgIFwiRmVicnVhcnlcIixcbiAgICBcIk1hcmNoXCIsXG4gICAgXCJBcHJpbFwiLFxuICAgIFwiTWF5XCIsXG4gICAgXCJKdW5lXCIsXG4gICAgXCJKdWx5XCIsXG4gICAgXCJBdWd1c3RcIixcbiAgICBcIlNlcHRlbWJlclwiLFxuICAgIFwiT2N0b2JlclwiLFxuICAgIFwiTm92ZW1iZXJcIixcbiAgICBcIkRlY2VtYmVyXCIsXG4gIF0sXG59O1xuXG5jb25zdCBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogW1wiU1wiLCBcIk1cIiwgXCJUXCIsIFwiV1wiLCBcIlRcIiwgXCJGXCIsIFwiU1wiXSxcbiAgc2hvcnQ6IFtcIlN1XCIsIFwiTW9cIiwgXCJUdVwiLCBcIldlXCIsIFwiVGhcIiwgXCJGclwiLCBcIlNhXCJdLFxuICBhYmJyZXZpYXRlZDogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICB3aWRlOiBbXG4gICAgXCJTdW5kYXlcIixcbiAgICBcIk1vbmRheVwiLFxuICAgIFwiVHVlc2RheVwiLFxuICAgIFwiV2VkbmVzZGF5XCIsXG4gICAgXCJUaHVyc2RheVwiLFxuICAgIFwiRnJpZGF5XCIsXG4gICAgXCJTYXR1cmRheVwiLFxuICBdLFxufTtcblxuY29uc3QgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogXCJhXCIsXG4gICAgcG06IFwicFwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pXCIsXG4gICAgbm9vbjogXCJuXCIsXG4gICAgbW9ybmluZzogXCJtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImFmdGVybm9vblwiLFxuICAgIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcIm5pZ2h0XCIsXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06IFwiQU1cIixcbiAgICBwbTogXCJQTVwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pZG5pZ2h0XCIsXG4gICAgbm9vbjogXCJub29uXCIsXG4gICAgbW9ybmluZzogXCJtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImFmdGVybm9vblwiLFxuICAgIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcIm5pZ2h0XCIsXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogXCJhLm0uXCIsXG4gICAgcG06IFwicC5tLlwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pZG5pZ2h0XCIsXG4gICAgbm9vbjogXCJub29uXCIsXG4gICAgbW9ybmluZzogXCJtb3JuaW5nXCIsXG4gICAgYWZ0ZXJub29uOiBcImFmdGVybm9vblwiLFxuICAgIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcIm5pZ2h0XCIsXG4gIH0sXG59O1xuXG5jb25zdCBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogXCJhXCIsXG4gICAgcG06IFwicFwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pXCIsXG4gICAgbm9vbjogXCJuXCIsXG4gICAgbW9ybmluZzogXCJpbiB0aGUgbW9ybmluZ1wiLFxuICAgIGFmdGVybm9vbjogXCJpbiB0aGUgYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJpbiB0aGUgZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcImF0IG5pZ2h0XCIsXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06IFwiQU1cIixcbiAgICBwbTogXCJQTVwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pZG5pZ2h0XCIsXG4gICAgbm9vbjogXCJub29uXCIsXG4gICAgbW9ybmluZzogXCJpbiB0aGUgbW9ybmluZ1wiLFxuICAgIGFmdGVybm9vbjogXCJpbiB0aGUgYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJpbiB0aGUgZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcImF0IG5pZ2h0XCIsXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogXCJhLm0uXCIsXG4gICAgcG06IFwicC5tLlwiLFxuICAgIG1pZG5pZ2h0OiBcIm1pZG5pZ2h0XCIsXG4gICAgbm9vbjogXCJub29uXCIsXG4gICAgbW9ybmluZzogXCJpbiB0aGUgbW9ybmluZ1wiLFxuICAgIGFmdGVybm9vbjogXCJpbiB0aGUgYWZ0ZXJub29uXCIsXG4gICAgZXZlbmluZzogXCJpbiB0aGUgZXZlbmluZ1wiLFxuICAgIG5pZ2h0OiBcImF0IG5pZ2h0XCIsXG4gIH0sXG59O1xuXG5jb25zdCBvcmRpbmFsTnVtYmVyID0gKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykgPT4ge1xuICBjb25zdCBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YC5cbiAgLy9cbiAgLy8gYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcuXG5cbiAgY29uc3QgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBcInN0XCI7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBcIm5kXCI7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBcInJkXCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBudW1iZXIgKyBcInRoXCI7XG59O1xuXG5leHBvcnQgY29uc3QgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXIsXG5cbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gIH0pLFxuXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gICAgYXJndW1lbnRDYWxsYmFjazogKHF1YXJ0ZXIpID0+IHF1YXJ0ZXIgLSAxLFxuICB9KSxcblxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gIH0pLFxuXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6IFwid2lkZVwiLFxuICB9KSxcblxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6IFwid2lkZVwiLFxuICB9KSxcbn07XG4iLCJpbXBvcnQgeyBidWlsZE1hdGNoRm4gfSBmcm9tIFwiLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4ubWpzXCI7XG5pbXBvcnQgeyBidWlsZE1hdGNoUGF0dGVybkZuIH0gZnJvbSBcIi4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi5tanNcIjtcblxuY29uc3QgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbmNvbnN0IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xuXG5jb25zdCBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2ksXG59O1xuY29uc3QgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV0sXG59O1xuXG5jb25zdCBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pLFxufTtcbmNvbnN0IHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXSxcbn07XG5cbmNvbnN0IG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxufTtcbmNvbnN0IHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbXG4gICAgL15qL2ksXG4gICAgL15mL2ksXG4gICAgL15tL2ksXG4gICAgL15hL2ksXG4gICAgL15tL2ksXG4gICAgL15qL2ksXG4gICAgL15qL2ksXG4gICAgL15hL2ksXG4gICAgL15zL2ksXG4gICAgL15vL2ksXG4gICAgL15uL2ksXG4gICAgL15kL2ksXG4gIF0sXG5cbiAgYW55OiBbXG4gICAgL15qYS9pLFxuICAgIC9eZi9pLFxuICAgIC9ebWFyL2ksXG4gICAgL15hcC9pLFxuICAgIC9ebWF5L2ksXG4gICAgL15qdW4vaSxcbiAgICAvXmp1bC9pLFxuICAgIC9eYXUvaSxcbiAgICAvXnMvaSxcbiAgICAvXm8vaSxcbiAgICAvXm4vaSxcbiAgICAvXmQvaSxcbiAgXSxcbn07XG5cbmNvbnN0IG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2ksXG59O1xuY29uc3QgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldLFxufTtcblxuY29uc3QgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG59O1xuY29uc3QgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pLFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6ICh2YWx1ZSkgPT4gcGFyc2VJbnQodmFsdWUsIDEwKSxcbiAgfSksXG5cbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxuXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiBcImFueVwiLFxuICAgIHZhbHVlQ2FsbGJhY2s6IChpbmRleCkgPT4gaW5kZXggKyAxLFxuICB9KSxcblxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogXCJhbnlcIixcbiAgfSksXG5cbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6IFwid2lkZVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxuXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcImFueVwiLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxufTtcbiIsImxldCBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbnMoKSB7XG4gIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRPcHRpb25zKG5ld09wdGlvbnMpIHtcbiAgZGVmYXVsdE9wdGlvbnMgPSBuZXdPcHRpb25zO1xufVxuIiwiaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhIGRheVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSBkYXkgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFR1ZSBTZXAgMDIgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZkRheShkYXRlKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUpO1xuICBfZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIF9kYXRlO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZEYXk7XG4iLCJpbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi4vdG9EYXRlLm1qc1wiO1xuXG4vKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGUpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IHV0Y0RhdGUgPSBuZXcgRGF0ZShcbiAgICBEYXRlLlVUQyhcbiAgICAgIF9kYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICBfZGF0ZS5nZXRNb250aCgpLFxuICAgICAgX2RhdGUuZ2V0RGF0ZSgpLFxuICAgICAgX2RhdGUuZ2V0SG91cnMoKSxcbiAgICAgIF9kYXRlLmdldE1pbnV0ZXMoKSxcbiAgICAgIF9kYXRlLmdldFNlY29uZHMoKSxcbiAgICAgIF9kYXRlLmdldE1pbGxpc2Vjb25kcygpLFxuICAgICksXG4gICk7XG4gIHV0Y0RhdGUuc2V0VVRDRnVsbFllYXIoX2RhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiArZGF0ZSAtICt1dGNEYXRlO1xufVxuIiwiaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5EYXkgfSBmcm9tIFwiLi9jb25zdGFudHMubWpzXCI7XG5pbXBvcnQgeyBzdGFydE9mRGF5IH0gZnJvbSBcIi4vc3RhcnRPZkRheS5tanNcIjtcbmltcG9ydCB7IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgfSBmcm9tIFwiLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLiBUaGlzIG1lYW5zIHRoYXQgdGhlIHRpbWVzIGFyZSByZW1vdmVkXG4gKiBmcm9tIHRoZSBkYXRlcyBhbmQgdGhlbiB0aGUgZGlmZmVyZW5jZSBpbiBkYXlzIGlzIGNhbGN1bGF0ZWQuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGVMZWZ0IC0gVGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSBkYXRlUmlnaHQgLSBUaGUgZWFybGllciBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjAwOjAwIGFuZCAyIEp1bHkgMjAxMiAwMDowMDowMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMiwgNiwgMiwgMCwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCAwKVxuICogKVxuICogLy89PiAzNjZcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjU5OjAwIGFuZCAzIEp1bHkgMjAxMSAwMDowMTowMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMSwgNiwgMywgMCwgMSksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCA1OSlcbiAqIClcbiAqIC8vPT4gMVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKGRhdGVMZWZ0LCBkYXRlUmlnaHQpIHtcbiAgY29uc3Qgc3RhcnRPZkRheUxlZnQgPSBzdGFydE9mRGF5KGRhdGVMZWZ0KTtcbiAgY29uc3Qgc3RhcnRPZkRheVJpZ2h0ID0gc3RhcnRPZkRheShkYXRlUmlnaHQpO1xuXG4gIGNvbnN0IHRpbWVzdGFtcExlZnQgPVxuICAgICtzdGFydE9mRGF5TGVmdCAtIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoc3RhcnRPZkRheUxlZnQpO1xuICBjb25zdCB0aW1lc3RhbXBSaWdodCA9XG4gICAgK3N0YXJ0T2ZEYXlSaWdodCAtIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoc3RhcnRPZkRheVJpZ2h0KTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlciBiZWNhdXNlIHRoZSBudW1iZXIgb2ZcbiAgLy8gbWlsbGlzZWNvbmRzIGluIGEgZGF5IGlzIG5vdCBjb25zdGFudCAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZlxuICAvLyB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpLlxuICByZXR1cm4gTWF0aC5yb3VuZCgodGltZXN0YW1wTGVmdCAtIHRpbWVzdGFtcFJpZ2h0KSAvIG1pbGxpc2Vjb25kc0luRGF5KTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXM7XG4iLCIvKipcbiAqIEBuYW1lIGNvbnN0cnVjdEZyb21cbiAqIEBjYXRlZ29yeSBHZW5lcmljIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnN0cnVjdHMgYSBkYXRlIHVzaW5nIHRoZSByZWZlcmVuY2UgZGF0ZSBhbmQgdGhlIHZhbHVlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgZnVuY3Rpb24gY29uc3RydWN0cyBhIG5ldyBkYXRlIHVzaW5nIHRoZSBjb25zdHJ1Y3RvciBmcm9tIHRoZSByZWZlcmVuY2VcbiAqIGRhdGUgYW5kIHRoZSBnaXZlbiB2YWx1ZS4gSXQgaGVscHMgdG8gYnVpbGQgZ2VuZXJpYyBmdW5jdGlvbnMgdGhhdCBhY2NlcHRcbiAqIGRhdGUgZXh0ZW5zaW9ucy5cbiAqXG4gKiBJdCBkZWZhdWx0cyB0byBgRGF0ZWAgaWYgdGhlIHBhc3NlZCByZWZlcmVuY2UgZGF0ZSBpcyBhIG51bWJlciBvciBhIHN0cmluZy5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSByZWZlcmVuY2UgZGF0ZSB0byB0YWtlIGNvbnN0cnVjdG9yIGZyb21cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjcmVhdGUgdGhlIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBEYXRlIGluaXRpYWxpemVkIHVzaW5nIHRoZSBnaXZlbiBkYXRlIGFuZCB2YWx1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSAnZGF0ZS1mbnMnXG4gKlxuICogLy8gQSBmdW5jdGlvbiB0aGF0IGNsb25lcyBhIGRhdGUgcHJlc2VydmluZyB0aGUgb3JpZ2luYWwgdHlwZVxuICogZnVuY3Rpb24gY2xvbmVEYXRlPERhdGVUeXBlIGV4dGVuZHMgRGF0ZShkYXRlOiBEYXRlVHlwZSk6IERhdGVUeXBlIHtcbiAqICAgcmV0dXJuIGNvbnN0cnVjdEZyb20oXG4gKiAgICAgZGF0ZSwgLy8gVXNlIGNvbnRydXN0b3IgZnJvbSB0aGUgZ2l2ZW4gZGF0ZVxuICogICAgIGRhdGUuZ2V0VGltZSgpIC8vIFVzZSB0aGUgZGF0ZSB2YWx1ZSB0byBjcmVhdGUgYSBuZXcgZGF0ZVxuICogICApXG4gKiB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25zdHJ1Y3RGcm9tKGRhdGUsIHZhbHVlKSB7XG4gIGlmIChkYXRlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiBuZXcgZGF0ZS5jb25zdHJ1Y3Rvcih2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlKTtcbiAgfVxufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGNvbnN0cnVjdEZyb207XG4iLCJpbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5pbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mWWVhclxuICogQGNhdGVnb3J5IFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIHN0YXJ0IG9mIGEgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSB5ZWFyIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZlllYXIobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwMCkpXG4gKiAvLz0+IFdlZCBKYW4gMDEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZlllYXIoZGF0ZSkge1xuICBjb25zdCBjbGVhbkRhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IF9kYXRlID0gY29uc3RydWN0RnJvbShkYXRlLCAwKTtcbiAgX2RhdGUuc2V0RnVsbFllYXIoY2xlYW5EYXRlLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICBfZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIF9kYXRlO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZZZWFyO1xuIiwiaW1wb3J0IHsgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIH0gZnJvbSBcIi4vZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZlllYXIgfSBmcm9tIFwiLi9zdGFydE9mWWVhci5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBnZXREYXlPZlllYXJcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBkYXkgb2YgdGhlIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIGRheSBvZiB0aGUgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBnaXZlbiBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIGRheSBvZiB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIGRheSBvZiB0aGUgeWVhciBpcyAyIEp1bHkgMjAxND9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldERheU9mWWVhcihuZXcgRGF0ZSgyMDE0LCA2LCAyKSlcbiAqIC8vPT4gMTgzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXlPZlllYXIoZGF0ZSkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgZGlmZiA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhfZGF0ZSwgc3RhcnRPZlllYXIoX2RhdGUpKTtcbiAgY29uc3QgZGF5T2ZZZWFyID0gZGlmZiArIDE7XG4gIHJldHVybiBkYXlPZlllYXI7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZ2V0RGF5T2ZZZWFyO1xuIiwiaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLm1qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi9fbGliL2RlZmF1bHRPcHRpb25zLm1qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgc3RhcnRPZldlZWt9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mV2Vla1xuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEFuIG9iamVjdCB3aXRoIG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYSB3ZWVrXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBTdW4gQXVnIDMxIDIwMTQgMDA6MDA6MDBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdGhlIHdlZWsgc3RhcnRzIG9uIE1vbmRheSwgdGhlIHN0YXJ0IG9mIHRoZSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZldlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSwgeyB3ZWVrU3RhcnRzT246IDEgfSlcbiAqIC8vPT4gTW9uIFNlcCAwMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE9mV2VlayhkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgY29uc3Qgd2Vla1N0YXJ0c09uID1cbiAgICBvcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICBvcHRpb25zPy5sb2NhbGU/Lm9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbiA/P1xuICAgIGRlZmF1bHRPcHRpb25zLmxvY2FsZT8ub3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgMDtcblxuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgZGF5ID0gX2RhdGUuZ2V0RGF5KCk7XG4gIGNvbnN0IGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuXG4gIF9kYXRlLnNldERhdGUoX2RhdGUuZ2V0RGF0ZSgpIC0gZGlmZik7XG4gIF9kYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gX2RhdGU7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgc3RhcnRPZldlZWs7XG4iLCJpbXBvcnQgeyBzdGFydE9mV2VlayB9IGZyb20gXCIuL3N0YXJ0T2ZXZWVrLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZJU09XZWVrXG4gKiBAY2F0ZWdvcnkgSVNPIFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYW4gSVNPIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZklTT1dlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gTW9uIFNlcCAwMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE9mSVNPV2VlayhkYXRlKSB7XG4gIHJldHVybiBzdGFydE9mV2VlayhkYXRlLCB7IHdlZWtTdGFydHNPbjogMSB9KTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mSVNPV2VlaztcbiIsImltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZklTT1dlZWsgfSBmcm9tIFwiLi9zdGFydE9mSVNPV2Vlay5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBnZXRJU09XZWVrWWVhclxuICogQGNhdGVnb3J5IElTTyBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLFxuICogd2hpY2ggYWx3YXlzIHN0YXJ0cyAzIGRheXMgYmVmb3JlIHRoZSB5ZWFyJ3MgZmlyc3QgVGh1cnNkYXkuXG4gKlxuICogSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGdpdmVuIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBUaGUgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggSVNPLXdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMiBKYW51YXJ5IDIwMDU/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRJU09XZWVrWWVhcihuZXcgRGF0ZSgyMDA1LCAwLCAyKSlcbiAqIC8vPT4gMjAwNFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SVNPV2Vla1llYXIoZGF0ZSkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgeWVhciA9IF9kYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgY29uc3QgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IGNvbnN0cnVjdEZyb20oZGF0ZSwgMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0RnVsbFllYXIoeWVhciArIDEsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcblxuICBjb25zdCBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyID0gY29uc3RydWN0RnJvbShkYXRlLCAwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgY29uc3Qgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZklTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG5cbiAgaWYgKF9kYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKF9kYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZ2V0SVNPV2Vla1llYXI7XG4iLCJpbXBvcnQgeyBnZXRJU09XZWVrWWVhciB9IGZyb20gXCIuL2dldElTT1dlZWtZZWFyLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZklTT1dlZWsgfSBmcm9tIFwiLi9zdGFydE9mSVNPV2Vlay5tanNcIjtcbmltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZJU09XZWVrWWVhclxuICogQGNhdGVnb3J5IElTTyBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcixcbiAqIHdoaWNoIGFsd2F5cyBzdGFydHMgMyBkYXlzIGJlZm9yZSB0aGUgeWVhcidzIGZpcnN0IFRodXJzZGF5LlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhbiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgZm9yIDIgSnVseSAyMDA1OlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZklTT1dlZWtZZWFyKG5ldyBEYXRlKDIwMDUsIDYsIDIpKVxuICogLy89PiBNb24gSmFuIDAzIDIwMDUgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZJU09XZWVrWWVhcihkYXRlKSB7XG4gIGNvbnN0IHllYXIgPSBnZXRJU09XZWVrWWVhcihkYXRlKTtcbiAgY29uc3QgZm91cnRoT2ZKYW51YXJ5ID0gY29uc3RydWN0RnJvbShkYXRlLCAwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldEZ1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZJU09XZWVrWWVhcjtcbiIsImltcG9ydCB7IG1pbGxpc2Vjb25kc0luV2VlayB9IGZyb20gXCIuL2NvbnN0YW50cy5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZJU09XZWVrIH0gZnJvbSBcIi4vc3RhcnRPZklTT1dlZWsubWpzXCI7XG5pbXBvcnQgeyBzdGFydE9mSVNPV2Vla1llYXIgfSBmcm9tIFwiLi9zdGFydE9mSVNPV2Vla1llYXIubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgZ2V0SVNPV2Vla1xuICogQGNhdGVnb3J5IElTTyBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgSVNPIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIElTTyB3ZWVrIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBnaXZlbiBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIElTTyB3ZWVrXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIHdlZWsgb2YgdGhlIElTTy13ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDIgSmFudWFyeSAyMDA1P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0SVNPV2VlayhuZXcgRGF0ZSgyMDA1LCAwLCAyKSlcbiAqIC8vPT4gNTNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldElTT1dlZWsoZGF0ZSkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgZGlmZiA9ICtzdGFydE9mSVNPV2VlayhfZGF0ZSkgLSArc3RhcnRPZklTT1dlZWtZZWFyKF9kYXRlKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIHdlZWtzIHRvIHRoZSBuZWFyZXN0IGludGVnZXIgYmVjYXVzZSB0aGUgbnVtYmVyIG9mXG4gIC8vIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50IChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mXG4gIC8vIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdCkuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBtaWxsaXNlY29uZHNJbldlZWspICsgMTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBnZXRJU09XZWVrO1xuIiwiaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20ubWpzXCI7XG5pbXBvcnQgeyBzdGFydE9mV2VlayB9IGZyb20gXCIuL3N0YXJ0T2ZXZWVrLm1qc1wiO1xuaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLm1qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi9fbGliL2RlZmF1bHRPcHRpb25zLm1qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgZ2V0V2Vla1llYXJ9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBnZXRXZWVrWWVhclxuICogQGNhdGVnb3J5IFdlZWstTnVtYmVyaW5nIFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIGV4YWN0IGNhbGN1bGF0aW9uIGRlcGVuZHMgb24gdGhlIHZhbHVlcyBvZlxuICogYG9wdGlvbnMud2Vla1N0YXJ0c09uYCAod2hpY2ggaXMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWspXG4gKiBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAod2hpY2ggaXMgdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpcyBhbHdheXMgaW5cbiAqIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyKVxuICpcbiAqIFdlZWsgbnVtYmVyaW5nOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XZWVrI1RoZV9JU09fd2Vla19kYXRlX3N5c3RlbVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGdpdmVuIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB3ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDI2IERlY2VtYmVyIDIwMDQgd2l0aCB0aGUgZGVmYXVsdCBzZXR0aW5ncz9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldFdlZWtZZWFyKG5ldyBEYXRlKDIwMDQsIDExLCAyNikpXG4gKiAvLz0+IDIwMDVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBudW1iZXJpbmcgeWVhciBpcyAyNiBEZWNlbWJlciAyMDA0IGlmIHdlZWsgc3RhcnRzIG9uIFNhdHVyZGF5P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0V2Vla1llYXIobmV3IERhdGUoMjAwNCwgMTEsIDI2KSwgeyB3ZWVrU3RhcnRzT246IDYgfSlcbiAqIC8vPT4gMjAwNFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB3ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDI2IERlY2VtYmVyIDIwMDQgaWYgdGhlIGZpcnN0IHdlZWsgY29udGFpbnMgNCBKYW51YXJ5P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0V2Vla1llYXIobmV3IERhdGUoMjAwNCwgMTEsIDI2KSwgeyBmaXJzdFdlZWtDb250YWluc0RhdGU6IDQgfSlcbiAqIC8vPT4gMjAwNFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2Vla1llYXIoZGF0ZSwgb3B0aW9ucykge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgeWVhciA9IF9kYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICBjb25zdCBmaXJzdFdlZWtDb250YWluc0RhdGUgPVxuICAgIG9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIG9wdGlvbnM/LmxvY2FsZT8ub3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgZGVmYXVsdE9wdGlvbnMubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICAxO1xuXG4gIGNvbnN0IGZpcnN0V2Vla09mTmV4dFllYXIgPSBjb25zdHJ1Y3RGcm9tKGRhdGUsIDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldEZ1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBvcHRpb25zKTtcblxuICBjb25zdCBmaXJzdFdlZWtPZlRoaXNZZWFyID0gY29uc3RydWN0RnJvbShkYXRlLCAwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBvcHRpb25zKTtcblxuICBpZiAoX2RhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoX2RhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBnZXRXZWVrWWVhcjtcbiIsImltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLm1qc1wiO1xuaW1wb3J0IHsgZ2V0V2Vla1llYXIgfSBmcm9tIFwiLi9nZXRXZWVrWWVhci5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZXZWVrIH0gZnJvbSBcIi4vc3RhcnRPZldlZWsubWpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuL19saWIvZGVmYXVsdE9wdGlvbnMubWpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBzdGFydE9mV2Vla1llYXJ9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mV2Vla1llYXJcbiAqIEBjYXRlZ29yeSBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogVGhlIGV4YWN0IGNhbGN1bGF0aW9uIGRlcGVuZHMgb24gdGhlIHZhbHVlcyBvZlxuICogYG9wdGlvbnMud2Vla1N0YXJ0c09uYCAod2hpY2ggaXMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWspXG4gKiBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAod2hpY2ggaXMgdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpcyBhbHdheXMgaW5cbiAqIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyKVxuICpcbiAqIFdlZWsgbnVtYmVyaW5nOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XZWVrI1RoZV9JU09fd2Vla19kYXRlX3N5c3RlbVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGFuIGEgd2Vlay1udW1iZXJpbmcgeWVhciBmb3IgMiBKdWx5IDIwMDUgd2l0aCBkZWZhdWx0IHNldHRpbmdzOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZldlZWtZZWFyKG5ldyBEYXRlKDIwMDUsIDYsIDIpKVxuICogLy89PiBTdW4gRGVjIDI2IDIwMDQgMDA6MDA6MDBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgd2Vlay1udW1iZXJpbmcgeWVhciBmb3IgMiBKdWx5IDIwMDVcbiAqIC8vIGlmIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHdlZWtcbiAqIC8vIGFuZCA0IEphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZldlZWtZZWFyKG5ldyBEYXRlKDIwMDUsIDYsIDIpLCB7XG4gKiAgIHdlZWtTdGFydHNPbjogMSxcbiAqICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiA0XG4gKiB9KVxuICogLy89PiBNb24gSmFuIDAzIDIwMDUgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZXZWVrWWVhcihkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgY29uc3QgZmlyc3RXZWVrQ29udGFpbnNEYXRlID1cbiAgICBvcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBvcHRpb25zPy5sb2NhbGU/Lm9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIGRlZmF1bHRPcHRpb25zLmxvY2FsZT8ub3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgMTtcblxuICBjb25zdCB5ZWFyID0gZ2V0V2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7XG4gIGNvbnN0IGZpcnN0V2VlayA9IGNvbnN0cnVjdEZyb20oZGF0ZSwgMCk7XG4gIGZpcnN0V2Vlay5zZXRGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIGNvbnN0IF9kYXRlID0gc3RhcnRPZldlZWsoZmlyc3RXZWVrLCBvcHRpb25zKTtcbiAgcmV0dXJuIF9kYXRlO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZXZWVrWWVhcjtcbiIsImltcG9ydCB7IG1pbGxpc2Vjb25kc0luV2VlayB9IGZyb20gXCIuL2NvbnN0YW50cy5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZXZWVrIH0gZnJvbSBcIi4vc3RhcnRPZldlZWsubWpzXCI7XG5pbXBvcnQgeyBzdGFydE9mV2Vla1llYXIgfSBmcm9tIFwiLi9zdGFydE9mV2Vla1llYXIubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBnZXRXZWVrfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgZ2V0V2Vla1xuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBsb2NhbCB3ZWVrIGluZGV4IG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBsb2NhbCB3ZWVrIGluZGV4IG9mIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIGV4YWN0IGNhbGN1bGF0aW9uIGRlcGVuZHMgb24gdGhlIHZhbHVlcyBvZlxuICogYG9wdGlvbnMud2Vla1N0YXJ0c09uYCAod2hpY2ggaXMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWspXG4gKiBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAod2hpY2ggaXMgdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpcyBhbHdheXMgaW5cbiAqIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyKVxuICpcbiAqIFdlZWsgbnVtYmVyaW5nOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XZWVrI1RoZV9JU09fd2Vla19kYXRlX3N5c3RlbVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGdpdmVuIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIFRoZSB3ZWVrXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIHdlZWsgb2YgdGhlIGxvY2FsIHdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMiBKYW51YXJ5IDIwMDUgd2l0aCBkZWZhdWx0IG9wdGlvbnM/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRXZWVrKG5ldyBEYXRlKDIwMDUsIDAsIDIpKVxuICogLy89PiAyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIHdlZWsgb2YgdGhlIGxvY2FsIHdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMiBKYW51YXJ5IDIwMDUsXG4gKiAvLyBpZiBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayxcbiAqIC8vIGFuZCB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhciBhbHdheXMgY29udGFpbnMgNCBKYW51YXJ5P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0V2VlayhuZXcgRGF0ZSgyMDA1LCAwLCAyKSwge1xuICogICB3ZWVrU3RhcnRzT246IDEsXG4gKiAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNFxuICogfSlcbiAqIC8vPT4gNTNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2VlayhkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUpO1xuICBjb25zdCBkaWZmID0gK3N0YXJ0T2ZXZWVrKF9kYXRlLCBvcHRpb25zKSAtICtzdGFydE9mV2Vla1llYXIoX2RhdGUsIG9wdGlvbnMpO1xuXG4gIC8vIFJvdW5kIHRoZSBudW1iZXIgb2Ygd2Vla3MgdG8gdGhlIG5lYXJlc3QgaW50ZWdlciBiZWNhdXNlIHRoZSBudW1iZXIgb2ZcbiAgLy8gbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnQgKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2ZcbiAgLy8gdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KS5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIG1pbGxpc2Vjb25kc0luV2VlaykgKyAxO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldFdlZWs7XG4iLCJleHBvcnQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIGNvbnN0IHNpZ24gPSBudW1iZXIgPCAwID8gXCItXCIgOiBcIlwiO1xuICBjb25zdCBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCkucGFkU3RhcnQodGFyZ2V0TGVuZ3RoLCBcIjBcIik7XG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufVxuIiwiaW1wb3J0IHsgYWRkTGVhZGluZ1plcm9zIH0gZnJvbSBcIi4uL2FkZExlYWRpbmdaZXJvcy5tanNcIjtcblxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxuZXhwb3J0IGNvbnN0IGxpZ2h0Rm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5KGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG5cbiAgICBjb25zdCBzaWduZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgY29uc3QgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09IFwieXlcIiA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIE1vbnRoXG4gIE0oZGF0ZSwgdG9rZW4pIHtcbiAgICBjb25zdCBtb250aCA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09IFwiTVwiID8gU3RyaW5nKG1vbnRoICsgMSkgOiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgfSxcblxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0RGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIEFNIG9yIFBNXG4gIGEoZGF0ZSwgdG9rZW4pIHtcbiAgICBjb25zdCBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldEhvdXJzKCkgLyAxMiA+PSAxID8gXCJwbVwiIDogXCJhbVwiO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSBcImFcIjpcbiAgICAgIGNhc2UgXCJhYVwiOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICBjYXNlIFwiYWFhXCI6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG4gICAgICBjYXNlIFwiYWFhYWFcIjpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcbiAgICAgIGNhc2UgXCJhYWFhXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSBcImFtXCIgPyBcImEubS5cIiA6IFwicC5tLlwiO1xuICAgIH1cbiAgfSxcblxuICAvLyBIb3VyIFsxLTEyXVxuICBoKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldEhvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBIb3VyIFswLTIzXVxuICBIKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldEhvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gTWludXRlXG4gIG0oZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0TWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIFNlY29uZFxuICBzKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFNlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUyhkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIGNvbnN0IG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgY29uc3QgZnJhY3Rpb25hbFNlY29uZHMgPSBNYXRoLnRydW5jKFxuICAgICAgbWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMyksXG4gICAgKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxufTtcbiIsImltcG9ydCB7IGdldERheU9mWWVhciB9IGZyb20gXCIuLi8uLi9nZXREYXlPZlllYXIubWpzXCI7XG5pbXBvcnQgeyBnZXRJU09XZWVrIH0gZnJvbSBcIi4uLy4uL2dldElTT1dlZWsubWpzXCI7XG5pbXBvcnQgeyBnZXRJU09XZWVrWWVhciB9IGZyb20gXCIuLi8uLi9nZXRJU09XZWVrWWVhci5tanNcIjtcbmltcG9ydCB7IGdldFdlZWsgfSBmcm9tIFwiLi4vLi4vZ2V0V2Vlay5tanNcIjtcbmltcG9ydCB7IGdldFdlZWtZZWFyIH0gZnJvbSBcIi4uLy4uL2dldFdlZWtZZWFyLm1qc1wiO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1plcm9zIH0gZnJvbSBcIi4uL2FkZExlYWRpbmdaZXJvcy5tanNcIjtcbmltcG9ydCB7IGxpZ2h0Rm9ybWF0dGVycyB9IGZyb20gXCIuL2xpZ2h0Rm9ybWF0dGVycy5tanNcIjtcblxuY29uc3QgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06IFwiYW1cIixcbiAgcG06IFwicG1cIixcbiAgbWlkbmlnaHQ6IFwibWlkbmlnaHRcIixcbiAgbm9vbjogXCJub29uXCIsXG4gIG1vcm5pbmc6IFwibW9ybmluZ1wiLFxuICBhZnRlcm5vb246IFwiYWZ0ZXJub29uXCIsXG4gIGV2ZW5pbmc6IFwiZXZlbmluZ1wiLFxuICBuaWdodDogXCJuaWdodFwiLFxufTtcblxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbmV4cG9ydCBjb25zdCBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IGVyYSA9IGRhdGUuZ2V0RnVsbFllYXIoKSA+IDAgPyAxIDogMDtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgXCJHXCI6XG4gICAgICBjYXNlIFwiR0dcIjpcbiAgICAgIGNhc2UgXCJHR0dcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHsgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIiB9KTtcbiAgICAgIC8vIEEsIEJcbiAgICAgIGNhc2UgXCJHR0dHR1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwgeyB3aWR0aDogXCJuYXJyb3dcIiB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG4gICAgICBjYXNlIFwiR0dHR1wiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHsgd2lkdGg6IFwid2lkZVwiIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gXCJ5b1wiKSB7XG4gICAgICBjb25zdCBzaWduZWRZZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICAgIGNvbnN0IHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHsgdW5pdDogXCJ5ZWFyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzaWduZWRXZWVrWWVhciA9IGdldFdlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgY29uc3Qgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjtcblxuICAgIC8vIFR3byBkaWdpdCB5ZWFyXG4gICAgaWYgKHRva2VuID09PSBcIllZXCIpIHtcbiAgICAgIGNvbnN0IHR3b0RpZ2l0WWVhciA9IHdlZWtZZWFyICUgMTAwO1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0d29EaWdpdFllYXIsIDIpO1xuICAgIH1cblxuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSBcIllvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7IHVuaXQ6IFwieWVhclwiIH0pO1xuICAgIH1cblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IGlzb1dlZWtZZWFyID0gZ2V0SVNPV2Vla1llYXIoZGF0ZSk7XG5cbiAgICAvLyBQYWRkaW5nXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICBjb25zdCB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldE1vbnRoKCkgKyAxKSAvIDMpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgXCJRXCI6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgY2FzZSBcIlFRXCI6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcbiAgICAgIGNhc2UgXCJRb1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7IHVuaXQ6IFwicXVhcnRlclwiIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcbiAgICAgIGNhc2UgXCJRUVFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG4gICAgICBjYXNlIFwiUVFRUVFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiBcIm5hcnJvd1wiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG4gICAgICBjYXNlIFwiUVFRUVwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiBcIndpZGVcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0TW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSBcInFcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICBjYXNlIFwicXFcIjpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuICAgICAgY2FzZSBcInFvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHsgdW5pdDogXCJxdWFydGVyXCIgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSBcInFxcVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcbiAgICAgIGNhc2UgXCJxcXFxcVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cbiAgICAgIGNhc2UgXCJxcXFxXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwic3RhbmRhbG9uZVwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJNXCI6XG4gICAgICBjYXNlIFwiTU1cIjpcbiAgICAgICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5NKGRhdGUsIHRva2VuKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgXCJNb1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHsgdW5pdDogXCJtb250aFwiIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlIFwiTU1NXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlIFwiTU1NTU1cIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgXCJNTU1NXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHsgd2lkdGg6IFwid2lkZVwiLCBjb250ZXh0OiBcImZvcm1hdHRpbmdcIiB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuICAgICAgY2FzZSBcIkxMXCI6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgXCJMb1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHsgdW5pdDogXCJtb250aFwiIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlIFwiTExMXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlIFwiTExMTExcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgXCJMTExMXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHsgd2lkdGg6IFwid2lkZVwiLCBjb250ZXh0OiBcInN0YW5kYWxvbmVcIiB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB3ZWVrID0gZ2V0V2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gXCJ3b1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7IHVuaXQ6IFwid2Vla1wiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBpc29XZWVrID0gZ2V0SVNPV2VlayhkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gXCJJb1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7IHVuaXQ6IFwid2Vla1wiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09IFwiZG9cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXREYXRlKCksIHsgdW5pdDogXCJkYXRlXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBEYXkgb2YgeWVhclxuICBEOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgZGF5T2ZZZWFyID0gZ2V0RGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSBcIkRvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwgeyB1bml0OiBcImRheU9mWWVhclwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSBcIkVcIjpcbiAgICAgIGNhc2UgXCJFRVwiOlxuICAgICAgY2FzZSBcIkVFRVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSBcIkVFRUVFXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgXCJFRUVFRUVcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJzaG9ydFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgXCJFRUVFXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcIndpZGVcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIGNvbnN0IGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlIFwiZVwiOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcbiAgICAgIGNhc2UgXCJlZVwiOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuICAgICAgY2FzZSBcImVvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7IHVuaXQ6IFwiZGF5XCIgfSk7XG4gICAgICBjYXNlIFwiZWVlXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiZWVlZWVcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcImVlZWVlZVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcImVlZWVcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGRheU9mV2VlayA9IGRhdGUuZ2V0RGF5KCk7XG4gICAgY29uc3QgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG4gICAgICBjYXNlIFwiY2NcIjpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuICAgICAgY2FzZSBcImNvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7IHVuaXQ6IFwiZGF5XCIgfSk7XG4gICAgICBjYXNlIFwiY2NjXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiY2NjY2NcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcImNjY2NjY1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcImNjY2NcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwic3RhbmRhbG9uZVwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBkYXlPZldlZWsgPSBkYXRlLmdldERheSgpO1xuICAgIGNvbnN0IGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSBcImlcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcbiAgICAgIGNhc2UgXCJpaVwiOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuICAgICAgY2FzZSBcImlvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2VlaywgeyB1bml0OiBcImRheVwiIH0pO1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlIFwiaWlpXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiaWlpaWlcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcImlpaWlpaVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcImlpaWlcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xuICAgIGNvbnN0IGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/IFwicG1cIiA6IFwiYW1cIjtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJhXCI6XG4gICAgICBjYXNlIFwiYWFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgXCJhYWFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplXG4gICAgICAgICAgLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FzZSBcImFhYWFhXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSBcImFhYWFcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgbGV0IGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gXCJwbVwiIDogXCJhbVwiO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJiXCI6XG4gICAgICBjYXNlIFwiYmJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgXCJiYmJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplXG4gICAgICAgICAgLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FzZSBcImJiYmJiXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSBcImJiYmJcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgbGV0IGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlIFwiQlwiOlxuICAgICAgY2FzZSBcIkJCXCI6XG4gICAgICBjYXNlIFwiQkJCXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICBjYXNlIFwiQkJCQkJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICBjYXNlIFwiQkJCQlwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJ3aWRlXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSBcImhvXCIpIHtcbiAgICAgIGxldCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHsgdW5pdDogXCJob3VyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSBcIkhvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0SG91cnMoKSwgeyB1bml0OiBcImhvdXJcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSBcIktvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7IHVuaXQ6IFwiaG91clwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGxldCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09IFwia29cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHsgdW5pdDogXCJob3VyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gXCJtb1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldE1pbnV0ZXMoKSwgeyB1bml0OiBcIm1pbnV0ZVwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG5cbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09IFwic29cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRTZWNvbmRzKCksIHsgdW5pdDogXCJzZWNvbmRcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplKSB7XG4gICAgY29uc3QgdGltZXpvbmVPZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiBcIlpcIjtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSBcIlhcIjpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuICAgICAgY2FzZSBcIlhYWFhcIjpcbiAgICAgIGNhc2UgXCJYWFwiOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhYYFxuICAgICAgY2FzZSBcIlhYWFhYXCI6XG4gICAgICBjYXNlIFwiWFhYXCI6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCBcIjpcIik7XG4gICAgfVxuICB9LFxuXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBgJyswMDowMCdgIG9yIGVxdWl2YWxlbnQpXG4gIHg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplKSB7XG4gICAgY29uc3QgdGltZXpvbmVPZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSBcInhcIjpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuICAgICAgY2FzZSBcInh4eHhcIjpcbiAgICAgIGNhc2UgXCJ4eFwiOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuICAgICAgY2FzZSBcInh4eHh4XCI6XG4gICAgICBjYXNlIFwieHh4XCI6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCBcIjpcIik7XG4gICAgfVxuICB9LFxuXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplKSB7XG4gICAgY29uc3QgdGltZXpvbmVPZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSBcIk9cIjpcbiAgICAgIGNhc2UgXCJPT1wiOlxuICAgICAgY2FzZSBcIk9PT1wiOlxuICAgICAgICByZXR1cm4gXCJHTVRcIiArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICAgIC8vIExvbmdcbiAgICAgIGNhc2UgXCJPT09PXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gXCJHTVRcIiArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCBcIjpcIik7XG4gICAgfVxuICB9LFxuXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplKSB7XG4gICAgY29uc3QgdGltZXpvbmVPZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSBcInpcIjpcbiAgICAgIGNhc2UgXCJ6elwiOlxuICAgICAgY2FzZSBcInp6elwiOlxuICAgICAgICByZXR1cm4gXCJHTVRcIiArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICAgIC8vIExvbmdcbiAgICAgIGNhc2UgXCJ6enp6XCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gXCJHTVRcIiArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCBcIjpcIik7XG4gICAgfVxuICB9LFxuXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplKSB7XG4gICAgY29uc3QgdGltZXN0YW1wID0gTWF0aC50cnVuYyhkYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUpIHtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkZWxpbWl0ZXIgPSBcIlwiKSB7XG4gIGNvbnN0IHNpZ24gPSBvZmZzZXQgPiAwID8gXCItXCIgOiBcIitcIjtcbiAgY29uc3QgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgY29uc3QgaG91cnMgPSBNYXRoLnRydW5jKGFic09mZnNldCAvIDYwKTtcbiAgY29uc3QgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyBhZGRMZWFkaW5nWmVyb3MobWludXRlcywgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICBjb25zdCBzaWduID0gb2Zmc2V0ID4gMCA/IFwiLVwiIDogXCIrXCI7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkZWxpbWl0ZXIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRlbGltaXRlciA9IFwiXCIpIHtcbiAgY29uc3Qgc2lnbiA9IG9mZnNldCA+IDAgPyBcIi1cIiA6IFwiK1wiO1xuICBjb25zdCBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICBjb25zdCBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLnRydW5jKGFic09mZnNldCAvIDYwKSwgMik7XG4gIGNvbnN0IG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoYWJzT2Zmc2V0ICUgNjAsIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1pdGVyICsgbWludXRlcztcbn1cbiIsImNvbnN0IGRhdGVMb25nRm9ybWF0dGVyID0gKHBhdHRlcm4sIGZvcm1hdExvbmcpID0+IHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSBcIlBcIjpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoeyB3aWR0aDogXCJzaG9ydFwiIH0pO1xuICAgIGNhc2UgXCJQUFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7IHdpZHRoOiBcIm1lZGl1bVwiIH0pO1xuICAgIGNhc2UgXCJQUFBcIjpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoeyB3aWR0aDogXCJsb25nXCIgfSk7XG4gICAgY2FzZSBcIlBQUFBcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7IHdpZHRoOiBcImZ1bGxcIiB9KTtcbiAgfVxufTtcblxuY29uc3QgdGltZUxvbmdGb3JtYXR0ZXIgPSAocGF0dGVybiwgZm9ybWF0TG9uZykgPT4ge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlIFwicFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7IHdpZHRoOiBcInNob3J0XCIgfSk7XG4gICAgY2FzZSBcInBwXCI6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHsgd2lkdGg6IFwibWVkaXVtXCIgfSk7XG4gICAgY2FzZSBcInBwcFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7IHdpZHRoOiBcImxvbmdcIiB9KTtcbiAgICBjYXNlIFwicHBwcFwiOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHsgd2lkdGg6IFwiZnVsbFwiIH0pO1xuICB9XG59O1xuXG5jb25zdCBkYXRlVGltZUxvbmdGb3JtYXR0ZXIgPSAocGF0dGVybiwgZm9ybWF0TG9uZykgPT4ge1xuICBjb25zdCBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pIHx8IFtdO1xuICBjb25zdCBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICBjb25zdCB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICBsZXQgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgXCJQXCI6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoeyB3aWR0aDogXCJzaG9ydFwiIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlBQXCI6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoeyB3aWR0aDogXCJtZWRpdW1cIiB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJQUFBcIjpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7IHdpZHRoOiBcImxvbmdcIiB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJQUFBQXCI6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7IHdpZHRoOiBcImZ1bGxcIiB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0XG4gICAgLnJlcGxhY2UoXCJ7e2RhdGV9fVwiLCBkYXRlTG9uZ0Zvcm1hdHRlcihkYXRlUGF0dGVybiwgZm9ybWF0TG9uZykpXG4gICAgLnJlcGxhY2UoXCJ7e3RpbWV9fVwiLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyLFxufTtcbiIsImNvbnN0IGRheU9mWWVhclRva2VuUkUgPSAvXkQrJC87XG5jb25zdCB3ZWVrWWVhclRva2VuUkUgPSAvXlkrJC87XG5cbmNvbnN0IHRocm93VG9rZW5zID0gW1wiRFwiLCBcIkREXCIsIFwiWVlcIiwgXCJZWVlZXCJdO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gZGF5T2ZZZWFyVG9rZW5SRS50ZXN0KHRva2VuKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gd2Vla1llYXJUb2tlblJFLnRlc3QodG9rZW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2Fybk9yVGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBjb25zdCBfbWVzc2FnZSA9IG1lc3NhZ2UodG9rZW4sIGZvcm1hdCwgaW5wdXQpO1xuICBjb25zb2xlLndhcm4oX21lc3NhZ2UpO1xuICBpZiAodGhyb3dUb2tlbnMuaW5jbHVkZXModG9rZW4pKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihfbWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIG1lc3NhZ2UodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgY29uc3Qgc3ViamVjdCA9IHRva2VuWzBdID09PSBcIllcIiA/IFwieWVhcnNcIiA6IFwiZGF5cyBvZiB0aGUgbW9udGhcIjtcbiAgcmV0dXJuIGBVc2UgXFxgJHt0b2tlbi50b0xvd2VyQ2FzZSgpfVxcYCBpbnN0ZWFkIG9mIFxcYCR7dG9rZW59XFxgIChpbiBcXGAke2Zvcm1hdH1cXGApIGZvciBmb3JtYXR0aW5nICR7c3ViamVjdH0gdG8gdGhlIGlucHV0IFxcYCR7aW5wdXR9XFxgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRgO1xufVxuIiwiLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGRhdGVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGEgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZSgpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoTmFOKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3Igc29tZSB2YWx1ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSgnMjAxNC0wMi0zMScpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBvYmplY3Q6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoe30pXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgRGF0ZV1cIilcbiAgKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBpc0RhdGU7XG4iLCJpbXBvcnQgeyBpc0RhdGUgfSBmcm9tIFwiLi9pc0RhdGUubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV0oaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGUpXG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBkYXRlIHRvIGNoZWNrXG4gKlxuICogQHJldHVybnMgVGhlIGRhdGUgaXMgdmFsaWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWQoZGF0ZSkge1xuICBpZiAoIWlzRGF0ZShkYXRlKSAmJiB0eXBlb2YgZGF0ZSAhPT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoX2RhdGUpKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBpc1ZhbGlkO1xuIiwiaW1wb3J0IHsgZGVmYXVsdExvY2FsZSB9IGZyb20gXCIuL19saWIvZGVmYXVsdExvY2FsZS5tanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4vX2xpYi9kZWZhdWx0T3B0aW9ucy5tanNcIjtcbmltcG9ydCB7IGZvcm1hdHRlcnMgfSBmcm9tIFwiLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzLm1qc1wiO1xuaW1wb3J0IHsgbG9uZ0Zvcm1hdHRlcnMgfSBmcm9tIFwiLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy5tanNcIjtcbmltcG9ydCB7XG4gIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4sXG4gIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbixcbiAgd2Fybk9yVGhyb3dQcm90ZWN0ZWRFcnJvcixcbn0gZnJvbSBcIi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMubWpzXCI7XG5pbXBvcnQgeyBpc1ZhbGlkIH0gZnJvbSBcIi4vaXNWYWxpZC5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLy8gUmV4cG9ydHMgb2YgaW50ZXJuYWwgZm9yIGxpYnJhcmllcyB0byB1c2UuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzYzOCNpc3N1ZWNvbW1lbnQtMTg3NzA4Mjg3NFxuZXhwb3J0IHsgZm9ybWF0dGVycywgbG9uZ0Zvcm1hdHRlcnMgfTtcblxuLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG5jb25zdCBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID1cbiAgL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xuXG4vLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG5jb25zdCBsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xuXG5jb25zdCBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG5jb25zdCBkb3VibGVRdW90ZVJlZ0V4cCA9IC8nJy9nO1xuY29uc3QgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuXG5leHBvcnQgeyBmb3JtYXQgYXMgZm9ybWF0RGF0ZSB9O1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgZm9ybWF0fSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAYWxpYXMgZm9ybWF0RGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXShodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyKVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl0oaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcikpLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogOS4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0gZm9ybWF0IC0gVGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIFRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcbiAqXG4gKiBAdGhyb3dzIGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3MgYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3MgdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgMSwgMTEpLCAnTU0vZGQveXl5eScpXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXQoZGF0ZSwgZm9ybWF0U3RyLCBvcHRpb25zKSB7XG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgY29uc3QgbG9jYWxlID0gb3B0aW9ucz8ubG9jYWxlID8/IGRlZmF1bHRPcHRpb25zLmxvY2FsZSA/PyBkZWZhdWx0TG9jYWxlO1xuXG4gIGNvbnN0IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9XG4gICAgb3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIDE7XG5cbiAgY29uc3Qgd2Vla1N0YXJ0c09uID1cbiAgICBvcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICBvcHRpb25zPy5sb2NhbGU/Lm9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbiA/P1xuICAgIGRlZmF1bHRPcHRpb25zLmxvY2FsZT8ub3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgMDtcblxuICBjb25zdCBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGF0ZSk7XG5cbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgdGltZSB2YWx1ZVwiKTtcbiAgfVxuXG4gIGxldCBwYXJ0cyA9IGZvcm1hdFN0clxuICAgIC5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cClcbiAgICAubWFwKChzdWJzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuICAgICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSBcInBcIiB8fCBmaXJzdENoYXJhY3RlciA9PT0gXCJQXCIpIHtcbiAgICAgICAgY29uc3QgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgICAgcmV0dXJuIGxvbmdGb3JtYXR0ZXIoc3Vic3RyaW5nLCBsb2NhbGUuZm9ybWF0TG9uZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3Vic3RyaW5nO1xuICAgIH0pXG4gICAgLmpvaW4oXCJcIilcbiAgICAubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cClcbiAgICAubWFwKChzdWJzdHJpbmcpID0+IHtcbiAgICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgICByZXR1cm4geyBpc1Rva2VuOiBmYWxzZSwgdmFsdWU6IFwiJ1wiIH07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuICAgICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSBcIidcIikge1xuICAgICAgICByZXR1cm4geyBpc1Rva2VuOiBmYWxzZSwgdmFsdWU6IGNsZWFuRXNjYXBlZFN0cmluZyhzdWJzdHJpbmcpIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXSkge1xuICAgICAgICByZXR1cm4geyBpc1Rva2VuOiB0cnVlLCB2YWx1ZTogc3Vic3RyaW5nIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICAgICAgXCJGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYFwiICtcbiAgICAgICAgICAgIGZpcnN0Q2hhcmFjdGVyICtcbiAgICAgICAgICAgIFwiYFwiLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4geyBpc1Rva2VuOiBmYWxzZSwgdmFsdWU6IHN1YnN0cmluZyB9O1xuICAgIH0pO1xuXG4gIC8vIGludm9rZSBsb2NhbGl6ZSBwcmVwcm9jZXNzb3IgKG9ubHkgZm9yIGZyZW5jaCBsb2NhbGVzIGF0IHRoZSBtb21lbnQpXG4gIGlmIChsb2NhbGUubG9jYWxpemUucHJlcHJvY2Vzc29yKSB7XG4gICAgcGFydHMgPSBsb2NhbGUubG9jYWxpemUucHJlcHJvY2Vzc29yKG9yaWdpbmFsRGF0ZSwgcGFydHMpO1xuICB9XG5cbiAgY29uc3QgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGUsXG4gICAgd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZSxcbiAgfTtcblxuICByZXR1cm4gcGFydHNcbiAgICAubWFwKChwYXJ0KSA9PiB7XG4gICAgICBpZiAoIXBhcnQuaXNUb2tlbikgcmV0dXJuIHBhcnQudmFsdWU7XG5cbiAgICAgIGNvbnN0IHRva2VuID0gcGFydC52YWx1ZTtcblxuICAgICAgaWYgKFxuICAgICAgICAoIW9wdGlvbnM/LnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyAmJlxuICAgICAgICAgIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikpIHx8XG4gICAgICAgICghb3B0aW9ucz8udXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyAmJlxuICAgICAgICAgIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4odG9rZW4pKVxuICAgICAgKSB7XG4gICAgICAgIHdhcm5PclRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdFN0ciwgU3RyaW5nKGRhdGUpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1t0b2tlblswXV07XG4gICAgICByZXR1cm4gZm9ybWF0dGVyKG9yaWdpbmFsRGF0ZSwgdG9rZW4sIGxvY2FsZS5sb2NhbGl6ZSwgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfSlcbiAgICAuam9pbihcIlwiKTtcbn1cblxuZnVuY3Rpb24gY2xlYW5Fc2NhcGVkU3RyaW5nKGlucHV0KSB7XG4gIGNvbnN0IG1hdGNoZWQgPSBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKTtcblxuICBpZiAoIW1hdGNoZWQpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlZFsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0O1xuIiwiaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLm1qc1wiO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1plcm9zIH0gZnJvbSBcIi4vX2xpYi9hZGRMZWFkaW5nWmVyb3MubWpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBmb3JtYXRJU099IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBmb3JtYXRJU09cbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlIGFjY29yZGluZyB0byB0aGUgSVNPIDg2MDEgc3RhbmRhcmQgKGh0dHBzOi8vc3VwcG9ydC5zYXMuY29tL2RvY3VtZW50YXRpb24vY2RsL2VuL2xyZGljdC82NDMxNi9IVE1ML2RlZmF1bHQvdmlld2VyLmh0bSNhMDAzMTY5ODE0Lmh0bSkuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiBJU08gODYwMSBmb3JtYXQuIE9wdGlvbnMgbWF5IGJlIHBhc3NlZCB0byBjb250cm9sIHRoZSBwYXJ0cyBhbmQgbm90YXRpb25zIG9mIHRoZSBkYXRlLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqXG4gKiBAcmV0dXJucyBUaGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIChpbiBsb2NhLmwgdGltZSB6b25lKVxuICpcbiAqIEB0aHJvd3MgYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTggU2VwdGVtYmVyIDIwMTkgaW4gSVNPIDg2MDEgZm9ybWF0IChsb2NhbCB0aW1lIHpvbmUgaXMgVVRDKTpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdElTTyhuZXcgRGF0ZSgyMDE5LCA4LCAxOCwgMTksIDAsIDUyKSlcbiAqIC8vPT4gJzIwMTktMDktMThUMTk6MDA6NTJaJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTggU2VwdGVtYmVyIDIwMTkgaW4gSVNPIDg2MDEsIHNob3J0IGZvcm1hdCAobG9jYWwgdGltZSB6b25lIGlzIFVUQyk6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXRJU08obmV3IERhdGUoMjAxOSwgOCwgMTgsIDE5LCAwLCA1MiksIHsgZm9ybWF0OiAnYmFzaWMnIH0pXG4gKiAvLz0+ICcyMDE5MDkxOFQxOTAwNTInXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxOCBTZXB0ZW1iZXIgMjAxOSBpbiBJU08gODYwMSBmb3JtYXQsIGRhdGUgb25seTpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdElTTyhuZXcgRGF0ZSgyMDE5LCA4LCAxOCwgMTksIDAsIDUyKSwgeyByZXByZXNlbnRhdGlvbjogJ2RhdGUnIH0pXG4gKiAvLz0+ICcyMDE5LTA5LTE4J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTggU2VwdGVtYmVyIDIwMTkgaW4gSVNPIDg2MDEgZm9ybWF0LCB0aW1lIG9ubHkgKGxvY2FsIHRpbWUgem9uZSBpcyBVVEMpOlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0SVNPKG5ldyBEYXRlKDIwMTksIDgsIDE4LCAxOSwgMCwgNTIpLCB7IHJlcHJlc2VudGF0aW9uOiAndGltZScgfSlcbiAqIC8vPT4gJzE5OjAwOjUyWidcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdElTTyhkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUpO1xuXG4gIGlmIChpc05hTihfZGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHRpbWUgdmFsdWVcIik7XG4gIH1cblxuICBjb25zdCBmb3JtYXQgPSBvcHRpb25zPy5mb3JtYXQgPz8gXCJleHRlbmRlZFwiO1xuICBjb25zdCByZXByZXNlbnRhdGlvbiA9IG9wdGlvbnM/LnJlcHJlc2VudGF0aW9uID8/IFwiY29tcGxldGVcIjtcblxuICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgbGV0IHR6T2Zmc2V0ID0gXCJcIjtcblxuICBjb25zdCBkYXRlRGVsaW1pdGVyID0gZm9ybWF0ID09PSBcImV4dGVuZGVkXCIgPyBcIi1cIiA6IFwiXCI7XG4gIGNvbnN0IHRpbWVEZWxpbWl0ZXIgPSBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIiA/IFwiOlwiIDogXCJcIjtcblxuICAvLyBSZXByZXNlbnRhdGlvbiBpcyBlaXRoZXIgJ2RhdGUnIG9yICdjb21wbGV0ZSdcbiAgaWYgKHJlcHJlc2VudGF0aW9uICE9PSBcInRpbWVcIikge1xuICAgIGNvbnN0IGRheSA9IGFkZExlYWRpbmdaZXJvcyhfZGF0ZS5nZXREYXRlKCksIDIpO1xuICAgIGNvbnN0IG1vbnRoID0gYWRkTGVhZGluZ1plcm9zKF9kYXRlLmdldE1vbnRoKCkgKyAxLCAyKTtcbiAgICBjb25zdCB5ZWFyID0gYWRkTGVhZGluZ1plcm9zKF9kYXRlLmdldEZ1bGxZZWFyKCksIDQpO1xuXG4gICAgLy8geXl5eU1NZGQgb3IgeXl5eS1NTS1kZC5cbiAgICByZXN1bHQgPSBgJHt5ZWFyfSR7ZGF0ZURlbGltaXRlcn0ke21vbnRofSR7ZGF0ZURlbGltaXRlcn0ke2RheX1gO1xuICB9XG5cbiAgLy8gUmVwcmVzZW50YXRpb24gaXMgZWl0aGVyICd0aW1lJyBvciAnY29tcGxldGUnXG4gIGlmIChyZXByZXNlbnRhdGlvbiAhPT0gXCJkYXRlXCIpIHtcbiAgICAvLyBBZGQgdGhlIHRpbWV6b25lLlxuICAgIGNvbnN0IG9mZnNldCA9IF9kYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAob2Zmc2V0ICE9PSAwKSB7XG4gICAgICBjb25zdCBhYnNvbHV0ZU9mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gICAgICBjb25zdCBob3VyT2Zmc2V0ID0gYWRkTGVhZGluZ1plcm9zKE1hdGgudHJ1bmMoYWJzb2x1dGVPZmZzZXQgLyA2MCksIDIpO1xuICAgICAgY29uc3QgbWludXRlT2Zmc2V0ID0gYWRkTGVhZGluZ1plcm9zKGFic29sdXRlT2Zmc2V0ICUgNjAsIDIpO1xuICAgICAgLy8gSWYgbGVzcyB0aGFuIDAsIHRoZSBzaWduIGlzICssIGJlY2F1c2UgaXQgaXMgYWhlYWQgb2YgdGltZS5cbiAgICAgIGNvbnN0IHNpZ24gPSBvZmZzZXQgPCAwID8gXCIrXCIgOiBcIi1cIjtcblxuICAgICAgdHpPZmZzZXQgPSBgJHtzaWdufSR7aG91ck9mZnNldH06JHttaW51dGVPZmZzZXR9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgdHpPZmZzZXQgPSBcIlpcIjtcbiAgICB9XG5cbiAgICBjb25zdCBob3VyID0gYWRkTGVhZGluZ1plcm9zKF9kYXRlLmdldEhvdXJzKCksIDIpO1xuICAgIGNvbnN0IG1pbnV0ZSA9IGFkZExlYWRpbmdaZXJvcyhfZGF0ZS5nZXRNaW51dGVzKCksIDIpO1xuICAgIGNvbnN0IHNlY29uZCA9IGFkZExlYWRpbmdaZXJvcyhfZGF0ZS5nZXRTZWNvbmRzKCksIDIpO1xuXG4gICAgLy8gSWYgdGhlcmUncyBhbHNvIGRhdGUsIHNlcGFyYXRlIGl0IHdpdGggdGltZSB3aXRoICdUJ1xuICAgIGNvbnN0IHNlcGFyYXRvciA9IHJlc3VsdCA9PT0gXCJcIiA/IFwiXCIgOiBcIlRcIjtcblxuICAgIC8vIENyZWF0ZXMgYSB0aW1lIHN0cmluZyBjb25zaXN0aW5nIG9mIGhvdXIsIG1pbnV0ZSwgYW5kIHNlY29uZCwgc2VwYXJhdGVkIGJ5IGRlbGltaXRlcnMsIGlmIGRlZmluZWQuXG4gICAgY29uc3QgdGltZSA9IFtob3VyLCBtaW51dGUsIHNlY29uZF0uam9pbih0aW1lRGVsaW1pdGVyKTtcblxuICAgIC8vIEhIbW1zcyBvciBISDptbTpzcy5cbiAgICByZXN1bHQgPSBgJHtyZXN1bHR9JHtzZXBhcmF0b3J9JHt0aW1lfSR7dHpPZmZzZXR9YDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0SVNPO1xuIiwiaW1wb3J0IHsgc3RhcnRPZkRheSB9IGZyb20gXCIuL3N0YXJ0T2ZEYXkubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZlRvZGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgdG9kYXkuXG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiB0b2RheS5cbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgdG9kYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdG9kYXkgaXMgNiBPY3RvYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mVG9kYXkoKVxuICogLy89PiBNb24gT2N0IDYgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZlRvZGF5KCkge1xuICByZXR1cm4gc3RhcnRPZkRheShEYXRlLm5vdygpKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mVG9kYXk7XG4iLCJpbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5pbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBhZGREYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0gYW1vdW50IC0gVGhlIGFtb3VudCBvZiBkYXlzIHRvIGJlIGFkZGVkLlxuICpcbiAqIEByZXR1cm5zIFRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBkYXlzIGFkZGVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCAxMCBkYXlzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBhZGREYXlzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCAxMClcbiAqIC8vPT4gVGh1IFNlcCAxMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGREYXlzKGRhdGUsIGFtb3VudCkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgaWYgKGlzTmFOKGFtb3VudCkpIHJldHVybiBjb25zdHJ1Y3RGcm9tKGRhdGUsIE5hTik7XG4gIGlmICghYW1vdW50KSB7XG4gICAgLy8gSWYgMCBkYXlzLCBuby1vcCB0byBhdm9pZCBjaGFuZ2luZyB0aW1lcyBpbiB0aGUgaG91ciBiZWZvcmUgZW5kIG9mIERTVFxuICAgIHJldHVybiBfZGF0ZTtcbiAgfVxuICBfZGF0ZS5zZXREYXRlKF9kYXRlLmdldERhdGUoKSArIGFtb3VudCk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBhZGREYXlzO1xuIiwiaW1wb3J0IHsgYWRkRGF5cyB9IGZyb20gXCIuL2FkZERheXMubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgYWRkV2Vla3NcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiB3ZWVrcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiB3ZWVrIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIGFtb3VudCAtIFRoZSBhbW91bnQgb2Ygd2Vla3MgdG8gYmUgYWRkZWQuXG4gKlxuICogQHJldHVybnMgVGhlIG5ldyBkYXRlIHdpdGggdGhlIHdlZWtzIGFkZGVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA0IHdlZWtzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRXZWVrcyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgNClcbiAqIC8vPT4gTW9uIFNlcCAyOSAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRXZWVrcyhkYXRlLCBhbW91bnQpIHtcbiAgY29uc3QgZGF5cyA9IGFtb3VudCAqIDc7XG4gIHJldHVybiBhZGREYXlzKGRhdGUsIGRheXMpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGFkZFdlZWtzO1xuIiwiaW1wb3J0IHsgc3RhcnRPZlRvZGF5LCBhZGREYXlzLCBhZGRXZWVrcywgZm9ybWF0SVNPLCBmb3JtYXQgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcclxuaW1wb3J0IFRvRG8gZnJvbSBcIi4vdG9kb1wiO1xyXG5cclxuY29uc3QgdG9kYXkgPSBmb3JtYXRJU08oc3RhcnRPZlRvZGF5KCksIHsgcmVwcmVzZW50YXRpb246IFwiZGF0ZVwiIH0pO1xyXG5jb25zdCB0b21vcnJvdyA9IGZvcm1hdElTTyhhZGREYXlzKHN0YXJ0T2ZUb2RheSgpLCAxKSwgeyByZXByZXNlbnRhdGlvbjogXCJkYXRlXCIgfSk7XHJcbmNvbnN0IG5leHRXZWVrID0gZm9ybWF0SVNPKGFkZFdlZWtzKHN0YXJ0T2ZUb2RheSgpLCAxKSwgeyByZXByZXNlbnRhdGlvbjogXCJkYXRlXCIgfSk7XHJcblxyXG5leHBvcnQgY29uc3QgZGVmYXVsdFByb2plY3RzID0ge1xyXG5cdERlZmF1bHQ6IHtcclxuXHRcdG5hbWU6IFwiRGVmYXVsdFwiLFxyXG5cdFx0ZGVzY3JpcHRpb246IFwiRGVmYXVsdCBwcm9qZWN0LiBDYW5ub3QgYmUgcmVtb3ZlZFwiLFxyXG5cdFx0dG9kb3M6IFtcclxuXHRcdFx0bmV3IFRvRG8oXCJEZWZhdWx0IEhpZ2ggUHJpbyBUYXNrXCIsIHRvZGF5LCBcImhpZ2hcIiwgXCJEZWZhdWx0XCIpLFxyXG5cdFx0XHRuZXcgVG9EbyhcIkRlZmF1bHQgTWVkaXVtIFByaW8gVGFza1wiLCB0b2RheSwgXCJtZWRpdW1cIiwgXCJEZWZhdWx0XCIpLFxyXG5cdFx0XHRuZXcgVG9EbyhcIkRlZmF1bHQgTG93IFByaW8gVGFza1wiLCB0b2RheSwgXCJsb3dcIiwgXCJEZWZhdWx0XCIpLFxyXG5cdFx0XHRuZXcgVG9EbyhcIkRlZmF1bHQgSGlnaCBQcmlvIFRhc2sgVG9tb3Jyb3dcIiwgdG9tb3Jyb3csIFwiaGlnaFwiLCBcIkRlZmF1bHRcIiksXHJcblx0XHRcdG5ldyBUb0RvKFwiRGVmYXVsdCBNZWRpdW0gUHJpbyBUYXNrIE5leHQgV2Vla1wiLCBuZXh0V2VlaywgXCJtZWRpdW1cIiwgXCJEZWZhdWx0XCIpLFxyXG5cdFx0XSxcclxuXHR9LFxyXG59O1xyXG5jb25zdCBmb3JtYXREYXRlID0gKGRhdGUpID0+IHtcclxuXHRjb25zdCBmb3JtYXR0ZWREYXRlID0gZm9ybWF0KGRhdGUsIFwiRSwgZG8gJ29mJyBNTU1NIHl5eXkgSEg6bW06c3NcIik7XHJcblx0cmV0dXJuIGZvcm1hdHRlZERhdGUucmVwbGFjZSgvKFxcZCspKHN0fG5kfHJkfHRoKS8sIFwiJDE8c3VwPiQyPC9zdXA+XCIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHROb3RlcyA9IFtcclxuXHR7XHJcblx0XHR0ZXh0OiBcIlRoZSBxdWljaywgYnJvd24gZm94IGp1bXBzIG92ZXIgYSBsYXp5IGRvZy4gREpzIGZsb2NrIGJ5IHdoZW4gTVRWIGF4IHF1aXogcHJvZy4gSnVuayBNVFYgcXVpeiBncmFjZWQgYnkgZm94IHdoZWxwcy4gQmF3ZHMgam9nLCBmbGljayBxdWFydHosIHZleCBueW1waHMuIFdhbHR6LCBiYWQgbnltcGgsIGZvciBxdWlja1wiLFxyXG5cdFx0ZGF0ZUFkZGVkOiBmb3JtYXREYXRlKG5ldyBEYXRlKCkpLFxyXG5cdH0sXHJcblx0e1xyXG5cdFx0dGV4dDogXCJTYW1wbGUgTm90ZSAyXCIsXHJcblx0XHRkYXRlQWRkZWQ6IGZvcm1hdERhdGUobmV3IERhdGUoKSksXHJcblx0fSxcclxuXTtcclxuXHJcbmV4cG9ydCB7IGZvcm1hdERhdGUgfTtcclxuIiwiZnVuY3Rpb24gc2hvd01vZGFsKG1vZGFsLCBjb250YWluZXIsIGN1cnJlbnRQcm9qZWN0KSB7XHJcblx0bW9kYWwuY2xhc3NMaXN0LmFkZChcIm9wZW5cIik7XHJcblx0Y29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJvcGVuXCIpO1xyXG5cclxuXHRpZiAobW9kYWwgPT09IHRhc2tNb2RhbCkge1xyXG5cdFx0Y29uc3QgcHJvamVjdE9wdGlvbnMgPSBwcm9qZWN0U2VsZWN0Lm9wdGlvbnM7XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RPcHRpb25zLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGlmIChwcm9qZWN0T3B0aW9uc1tpXS52YWx1ZSA9PT0gY3VycmVudFByb2plY3QpIHtcclxuXHRcdFx0XHRwcm9qZWN0T3B0aW9uc1tpXS5zZWxlY3RlZCA9IHRydWU7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhpZGVNb2RhbChtb2RhbCwgY29udGFpbmVyKSB7XHJcblx0bW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcIm9wZW5cIik7XHJcblx0Y29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJvcGVuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgeyBzaG93TW9kYWwsIGhpZGVNb2RhbCB9O1xyXG4iLCJpbXBvcnQgeyBwcm9qZWN0cyB9IGZyb20gXCIuLlwiO1xyXG5pbXBvcnQgeyBub3RlcyB9IGZyb20gXCIuLlwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2F2ZVRvTG9jYWxTdG9yYWdlKCkge1xyXG5cdGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicHJvamVjdHNcIiwgSlNPTi5zdHJpbmdpZnkocHJvamVjdHMpKTtcclxuXHRsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcIm5vdGVzXCIsIEpTT04uc3RyaW5naWZ5KG5vdGVzKSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLm1qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi9fbGliL2RlZmF1bHRPcHRpb25zLm1qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgZW5kT2ZXZWVrfSBmdW5jdGlvbiBvcHRpb25zLlxuICovXG5cbi8qKlxuICogQG5hbWUgZW5kT2ZXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGVuZCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBlbmQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIGVuZCBvZiBhIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIGVuZCBvZiBhIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBlbmRPZldlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gU2F0IFNlcCAwNiAyMDE0IDIzOjU5OjU5Ljk5OVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0aGUgd2VlayBzdGFydHMgb24gTW9uZGF5LCB0aGUgZW5kIG9mIHRoZSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gZW5kT2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCksIHsgd2Vla1N0YXJ0c09uOiAxIH0pXG4gKiAvLz0+IFN1biBTZXAgMDcgMjAxNCAyMzo1OTo1OS45OTlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuZE9mV2VlayhkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgY29uc3Qgd2Vla1N0YXJ0c09uID1cbiAgICBvcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICBvcHRpb25zPy5sb2NhbGU/Lm9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbiA/P1xuICAgIGRlZmF1bHRPcHRpb25zLmxvY2FsZT8ub3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgMDtcblxuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgZGF5ID0gX2RhdGUuZ2V0RGF5KCk7XG4gIGNvbnN0IGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gLTcgOiAwKSArIDYgLSAoZGF5IC0gd2Vla1N0YXJ0c09uKTtcblxuICBfZGF0ZS5zZXREYXRlKF9kYXRlLmdldERhdGUoKSArIGRpZmYpO1xuICBfZGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICByZXR1cm4gX2RhdGU7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZW5kT2ZXZWVrO1xuIiwiaW1wb3J0IHsgc3RhcnRPZkRheSB9IGZyb20gXCIuL3N0YXJ0T2ZEYXkubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgaXNTYW1lRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgZGF5IChhbmQgeWVhciBhbmQgbW9udGgpP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aCk/XG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGVMZWZ0IC0gVGhlIGZpcnN0IGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSBkYXRlUmlnaHQgLSBUaGUgc2Vjb25kIGRhdGUgdG8gY2hlY2tcblxuICogQHJldHVybnMgVGhlIGRhdGVzIGFyZSBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aClcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDQgU2VwdGVtYmVyIDA2OjAwOjAwIGFuZCA0IFNlcHRlbWJlciAxODowMDowMCBpbiB0aGUgc2FtZSBkYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCwgNiwgMCksIG5ldyBEYXRlKDIwMTQsIDgsIDQsIDE4LCAwKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIgYW5kIDQgT2N0b2JlciBpbiB0aGUgc2FtZSBkYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCksIG5ldyBEYXRlKDIwMTQsIDksIDQpKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIsIDIwMTQgYW5kIDQgU2VwdGVtYmVyLCAyMDE1IGluIHRoZSBzYW1lIGRheT9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0KSwgbmV3IERhdGUoMjAxNSwgOCwgNCkpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NhbWVEYXkoZGF0ZUxlZnQsIGRhdGVSaWdodCkge1xuICBjb25zdCBkYXRlTGVmdFN0YXJ0T2ZEYXkgPSBzdGFydE9mRGF5KGRhdGVMZWZ0KTtcbiAgY29uc3QgZGF0ZVJpZ2h0U3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXkoZGF0ZVJpZ2h0KTtcblxuICByZXR1cm4gK2RhdGVMZWZ0U3RhcnRPZkRheSA9PT0gK2RhdGVSaWdodFN0YXJ0T2ZEYXk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgaXNTYW1lRGF5O1xuIiwiaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGlzV2l0aGluSW50ZXJ2YWxcbiAqIEBjYXRlZ29yeSBJbnRlcnZhbCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB3aXRoaW4gdGhlIGludGVydmFsP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIGRhdGUgd2l0aGluIHRoZSBpbnRlcnZhbD8gKEluY2x1ZGluZyBzdGFydCBhbmQgZW5kLilcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcGFyYW0gaW50ZXJ2YWwgLSBUaGUgaW50ZXJ2YWwgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyBUaGUgZGF0ZSBpcyB3aXRoaW4gdGhlIGludGVydmFsXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgZGF0ZSB3aXRoaW4gdGhlIGludGVydmFsOlxuICogaXNXaXRoaW5JbnRlcnZhbChuZXcgRGF0ZSgyMDE0LCAwLCAzKSwge1xuICogICBzdGFydDogbmV3IERhdGUoMjAxNCwgMCwgMSksXG4gKiAgIGVuZDogbmV3IERhdGUoMjAxNCwgMCwgNylcbiAqIH0pXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBkYXRlIG91dHNpZGUgb2YgdGhlIGludGVydmFsOlxuICogaXNXaXRoaW5JbnRlcnZhbChuZXcgRGF0ZSgyMDE0LCAwLCAxMCksIHtcbiAqICAgc3RhcnQ6IG5ldyBEYXRlKDIwMTQsIDAsIDEpLFxuICogICBlbmQ6IG5ldyBEYXRlKDIwMTQsIDAsIDcpXG4gKiB9KVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgZGF0ZSBlcXVhbCB0byBpbnRlcnZhbCBzdGFydDpcbiAqIGlzV2l0aGluSW50ZXJ2YWwoZGF0ZSwgeyBzdGFydCwgZW5kOiBkYXRlIH0pXG4gKiAvLyA9PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBkYXRlIGVxdWFsIHRvIGludGVydmFsIGVuZDpcbiAqIGlzV2l0aGluSW50ZXJ2YWwoZGF0ZSwgeyBzdGFydDogZGF0ZSwgZW5kIH0pXG4gKiAvLyA9PiB0cnVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1dpdGhpbkludGVydmFsKGRhdGUsIGludGVydmFsKSB7XG4gIGNvbnN0IHRpbWUgPSArdG9EYXRlKGRhdGUpO1xuICBjb25zdCBbc3RhcnRUaW1lLCBlbmRUaW1lXSA9IFtcbiAgICArdG9EYXRlKGludGVydmFsLnN0YXJ0KSxcbiAgICArdG9EYXRlKGludGVydmFsLmVuZCksXG4gIF0uc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuXG4gIHJldHVybiB0aW1lID49IHN0YXJ0VGltZSAmJiB0aW1lIDw9IGVuZFRpbWU7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgaXNXaXRoaW5JbnRlcnZhbDtcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGVMZWZ0IC0gVGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSBkYXRlUmlnaHQgLSBUaGUgZWFybGllciBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHNcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgbWlsbGlzZWNvbmRzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxNCAxMjozMDoyMC42MDAgYW5kIDIgSnVseSAyMDE0IDEyOjMwOjIxLjcwMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyhcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCAyMSwgNzAwKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgMiwgMTIsIDMwLCAyMCwgNjAwKVxuICogKVxuICogLy89PiAxMTAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMoZGF0ZUxlZnQsIGRhdGVSaWdodCkge1xuICByZXR1cm4gK3RvRGF0ZShkYXRlTGVmdCkgLSArdG9EYXRlKGRhdGVSaWdodCk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzO1xuIiwiaW1wb3J0IHsgZ2V0Um91bmRpbmdNZXRob2QgfSBmcm9tIFwiLi9fbGliL2dldFJvdW5kaW5nTWV0aG9kLm1qc1wiO1xuaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5Ib3VyIH0gZnJvbSBcIi4vY29uc3RhbnRzLm1qc1wiO1xuaW1wb3J0IHsgZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzIH0gZnJvbSBcIi4vZGlmZmVyZW5jZUluTWlsbGlzZWNvbmRzLm1qc1wiO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgZGlmZmVyZW5jZUluSG91cnN9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5Ib3Vyc1xuICogQGNhdGVnb3J5IEhvdXIgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgaG91cnMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBob3VycyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZUxlZnQgLSBUaGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIGRhdGVSaWdodCAtIFRoZSBlYXJsaWVyIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGhvdXJzXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGhvdXJzIGFyZSBiZXR3ZWVuIDIgSnVseSAyMDE0IDA2OjUwOjAwIGFuZCAyIEp1bHkgMjAxNCAxOTowMDowMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkhvdXJzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxOSwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIsIDYsIDUwKVxuICogKVxuICogLy89PiAxMlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW5jZUluSG91cnMoZGF0ZUxlZnQsIGRhdGVSaWdodCwgb3B0aW9ucykge1xuICBjb25zdCBkaWZmID1cbiAgICBkaWZmZXJlbmNlSW5NaWxsaXNlY29uZHMoZGF0ZUxlZnQsIGRhdGVSaWdodCkgLyBtaWxsaXNlY29uZHNJbkhvdXI7XG4gIHJldHVybiBnZXRSb3VuZGluZ01ldGhvZChvcHRpb25zPy5yb3VuZGluZ01ldGhvZCkoZGlmZik7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZGlmZmVyZW5jZUluSG91cnM7XG4iLCJleHBvcnQgZnVuY3Rpb24gZ2V0Um91bmRpbmdNZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiAobnVtYmVyKSA9PiB7XG4gICAgY29uc3Qgcm91bmQgPSBtZXRob2QgPyBNYXRoW21ldGhvZF0gOiBNYXRoLnRydW5jO1xuICAgIGNvbnN0IHJlc3VsdCA9IHJvdW5kKG51bWJlcik7XG4gICAgLy8gUHJldmVudCBuZWdhdGl2ZSB6ZXJvXG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gMCA/IDAgOiByZXN1bHQ7XG4gIH07XG59XG4iLCIvKipcbiAqIEBuYW1lIHN0YXJ0T2ZUb21vcnJvd1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIHRvbW9ycm93LlxuICogQHB1cmUgZmFsc2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgdG9tb3Jyb3cuXG4gKlxuICogQHJldHVybnMgVGhlIHN0YXJ0IG9mIHRvbW9ycm93XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDYgT2N0b2JlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZlRvbW9ycm93KClcbiAqIC8vPT4gVHVlIE9jdCA3IDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZUb21vcnJvdygpIHtcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgY29uc3QgeWVhciA9IG5vdy5nZXRGdWxsWWVhcigpO1xuICBjb25zdCBtb250aCA9IG5vdy5nZXRNb250aCgpO1xuICBjb25zdCBkYXkgPSBub3cuZ2V0RGF0ZSgpO1xuXG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF5ICsgMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZUb21vcnJvdztcbiIsImltcG9ydCBhcHBlbmRUYXNrIGZyb20gXCIuL2FwcGVuZFRhc2tcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc3BsYXlUYXNrcyhwcm9qZWN0cywgcHJvamVjdEluZGV4ID0gbnVsbCkge1xyXG5cdHRhc2tzQ29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XHJcblx0aWYgKHByb2plY3RJbmRleCA9PT0gbnVsbCkge1xyXG5cdFx0cHJvamVjdHMuZm9yRWFjaCgocHJvamVjdCkgPT4ge1xyXG5cdFx0XHRwcm9qZWN0LnNvcnRUb2RvcygpO1xyXG5cdFx0XHRwcm9qZWN0LnRvZG9zLmZvckVhY2goKHRvZG8sIGluZGV4KSA9PiB7XHJcblx0XHRcdFx0YXBwZW5kVGFzayh0b2RvLCBpbmRleCwgdGFza3NDb250YWluZXIpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRjb25zdCBwcm9qZWN0ID0gcHJvamVjdHNbcHJvamVjdEluZGV4XTtcclxuXHRcdHByb2plY3Quc29ydFRvZG9zKCk7XHJcblx0XHRwcm9qZWN0LnRvZG9zLmZvckVhY2goKHRvZG8sIGluZGV4KSA9PiB7XHJcblx0XHRcdGFwcGVuZFRhc2sodG9kbywgaW5kZXgsIHRhc2tzQ29udGFpbmVyKTtcclxuXHRcdH0pO1xyXG5cdH1cclxufVxyXG4iLCJpbXBvcnQgY3JlYXRlVGFza0hUTUwgZnJvbSBcIi4vY3JlYXRlVGFza1wiO1xyXG5pbXBvcnQgeyBzaG93TW9kYWwsIGhpZGVNb2RhbCB9IGZyb20gXCIuL3Nob3dIaWRlTW9kYWxzXCI7XHJcbmltcG9ydCBzYXZlVG9Mb2NhbFN0b3JhZ2UgZnJvbSBcIi4vc2F2ZVRvTG9jYWxTdG9yYWdlXCI7XHJcbmltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCBkaXNwbGF5VGFza3MgZnJvbSBcIi4vZGlzcGxheVRhc2tzXCI7XHJcbmltcG9ydCB7IHNob3dDb25maXJtYXRpb25Nb2RhbCB9IGZyb20gXCIuLlwiO1xyXG5pbXBvcnQgeyBtb2RhbHNDb250YWluZXIgfSBmcm9tIFwiLi5cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcGVuZFRhc2sodG9kbywgaW5kZXgsIHRhc2tzQ29udGFpbmVyKSB7XHJcblx0Y29uc3QgdG9kb0l0ZW0gPSBjcmVhdGVUYXNrSFRNTCh0b2RvLCBpbmRleCk7XHJcblx0dGFza3NDb250YWluZXIuYXBwZW5kQ2hpbGQodG9kb0l0ZW0pO1xyXG5cclxuXHRpZiAodG9kby5jb21wbGV0ZWQpIHtcclxuXHRcdHRvZG9JdGVtLmNsYXNzTGlzdC5hZGQoXCJjb21wbGV0ZWRcIik7XHJcblx0fVxyXG5cclxuXHQvLyBBZGQgZXZlbnQgbGlzdGVuZXIgZm9yIGRlbGV0ZSB0YXNrIGJ1dHRvblxyXG5cdHRvZG9JdGVtLnF1ZXJ5U2VsZWN0b3IoXCIuZGVsZXRlLXRhc2tcIikub25jbGljayA9ICgpID0+IHtcclxuXHRcdGNvbnN0IHRhc2tOYW1lID0gdG9kby5uYW1lO1xyXG5cdFx0c2hvd0NvbmZpcm1hdGlvbk1vZGFsKFwidGFza1wiLCB0YXNrTmFtZSwgKCkgPT4ge1xyXG5cdFx0XHRjb25zdCBwcm9qZWN0ID0gcHJvamVjdHMuZmluZCgocCkgPT4gcC5uYW1lID09PSB0b2RvLnByb2plY3ROYW1lKTtcclxuXHRcdFx0Y29uc3QgcHJvamVjdEluZGV4ID0gcHJvamVjdHMuaW5kZXhPZihwcm9qZWN0KTtcclxuXHRcdFx0Y29uc3QgdG9kb0luZGV4ID0gcHJvamVjdC50b2Rvcy5pbmRleE9mKHRvZG8pO1xyXG5cdFx0XHRwcm9qZWN0LmRlbGV0ZVRvZG8odG9kb0luZGV4KTtcclxuXHRcdFx0c2F2ZVRvTG9jYWxTdG9yYWdlKCk7XHJcblx0XHRcdGRpc3BsYXlUYXNrcyhwcm9qZWN0cywgcHJvamVjdEluZGV4KTtcclxuXHRcdH0pO1xyXG5cdH07XHJcblxyXG5cdC8vIEFkZCBldmVudCBsaXN0ZW5lciBmb3IgZWRpdCB0YXNrIGJ1dHRvblxyXG5cdHRvZG9JdGVtLnF1ZXJ5U2VsZWN0b3IoXCIuZWRpdC10YXNrXCIpLm9uY2xpY2sgPSAoKSA9PiB7XHJcblx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRhc2tOYW1lXCIpLnZhbHVlID0gdG9kby5uYW1lO1xyXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkdWVEYXRlXCIpLnZhbHVlID0gdG9kby5kdWVEYXRlO1xyXG5cclxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCByYWRpbyBidXR0b24gZm9yIHByaW9yaXR5XHJcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBpbnB1dFtuYW1lPVwicHJpb3JpdHlcIl1bdmFsdWU9XCIke3RvZG8ucHJpb3JpdHl9XCJdYCkuY2hlY2tlZCA9IHRydWU7XHJcblxyXG5cdFx0cHJvamVjdFNlbGVjdC52YWx1ZSA9IHRvZG8ucHJvamVjdE5hbWU7XHJcblxyXG5cdFx0Y29uc3QgcHJvamVjdCA9IHByb2plY3RzLmZpbmQoKHApID0+IHAubmFtZSA9PT0gdG9kby5wcm9qZWN0TmFtZSk7XHJcblx0XHRjb25zdCBwcm9qZWN0SW5kZXggPSBwcm9qZWN0cy5pbmRleE9mKHByb2plY3QpO1xyXG5cclxuXHRcdHNob3dNb2RhbCh0YXNrTW9kYWwsIG1vZGFsc0NvbnRhaW5lcik7XHJcblxyXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzYXZlVGFza0J0blwiKS5vbmNsaWNrID0gKGUpID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHR0b2RvLm5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRhc2tOYW1lXCIpLnZhbHVlO1xyXG5cdFx0XHR0b2RvLmR1ZURhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImR1ZURhdGVcIikudmFsdWU7XHJcblx0XHRcdHRvZG8ucHJpb3JpdHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwicHJpb3JpdHlcIl06Y2hlY2tlZCcpLnZhbHVlO1xyXG5cdFx0XHR0b2RvLnByb2plY3ROYW1lID0gcHJvamVjdFNlbGVjdC52YWx1ZTtcclxuXHJcblx0XHRcdHNhdmVUb0xvY2FsU3RvcmFnZSgpO1xyXG5cdFx0XHRkaXNwbGF5VGFza3MocHJvamVjdHMsIHByb2plY3RJbmRleCk7XHJcblx0XHRcdGhpZGVNb2RhbCh0YXNrTW9kYWwsIG1vZGFsc0NvbnRhaW5lcik7XHJcblx0XHR9O1xyXG5cdH07XHJcblxyXG5cdHRvZG9JdGVtLnF1ZXJ5U2VsZWN0b3IoXCIudG9nZ2xlLWNvbXBsZXRlXCIpLm9uY2xpY2sgPSAoZSkgPT4ge1xyXG5cdFx0Y29uc3QgcHJvamVjdCA9IHByb2plY3RzLmZpbmQoKHApID0+IHAubmFtZSA9PT0gdG9kby5wcm9qZWN0TmFtZSk7XHJcblx0XHRjb25zdCB0b2RvSW5kZXggPSBwcm9qZWN0LnRvZG9zLmluZGV4T2YodG9kbyk7XHJcblx0XHRwcm9qZWN0LnRvZG9zW3RvZG9JbmRleF0udG9nZ2xlQ29tcGxldGUoKTtcclxuXHRcdGlmIChlLnRhcmdldC5jaGVja2VkKSB7XHJcblx0XHRcdHRvZG9JdGVtLmNsYXNzTGlzdC5hZGQoXCJjb21wbGV0ZWRcIik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0b2RvSXRlbS5jbGFzc0xpc3QucmVtb3ZlKFwiY29tcGxldGVkXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHNhdmVUb0xvY2FsU3RvcmFnZSgpO1xyXG5cdH07XHJcbn1cclxuIiwiaW1wb3J0IHsgZm9ybWF0LCBwYXJzZUlTTywgZGlmZmVyZW5jZUluSG91cnMsIHN0YXJ0T2ZUb21vcnJvdyAgIH0gZnJvbSBcImRhdGUtZm5zXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUYXNrSFRNTCh0b2RvLCBpbmRleCkge1xyXG5cdC8vIGNvbnNvbGUubG9nKGBDcmVhdGluZyB0YXNrIEhUTUwgZm9yICR7dG9kby5uYW1lfSB3aXRoIGluZGV4ICR7aW5kZXh9YCk7XHJcblxyXG5cdGNvbnN0IHRvZG9JdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHR0b2RvSXRlbS5jbGFzc0xpc3QuYWRkKFwidGFza1wiKTtcclxuXHQvLyBDcmVhdGUgY2hlY2tib3ggY29udGFpbmVyXHJcblx0Y29uc3QgY2hlY2tib3hDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cdGNoZWNrYm94Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJjaGVja2JveC1jb250YWluZXJcIik7XHJcblxyXG5cdC8vIENyZWF0ZSBhbmQgc2V0IHVwIGNoZWNrYm94XHJcblx0Y29uc3QgY2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcblx0Y2hlY2tib3gudHlwZSA9IFwiY2hlY2tib3hcIjtcclxuXHRjaGVja2JveC5pZCA9IGB0YXNrJHt0b2RvLnByb2plY3ROYW1lfSR7aW5kZXh9YDtcclxuXHRjaGVja2JveC5jbGFzc05hbWUgPSBcInRvZ2dsZS1jb21wbGV0ZVwiO1xyXG5cdGNoZWNrYm94LnNldEF0dHJpYnV0ZShcImRhdGEtcHJvamVjdFwiLCB0b2RvLnByb2plY3ROYW1lKTtcclxuXHRpZiAodG9kby5jb21wbGV0ZWQpIGNoZWNrYm94LmNoZWNrZWQgPSB0cnVlO1xyXG5cclxuXHQvLyBDcmVhdGUgYW5kIHNldCB1cCBsYWJlbFxyXG5cdGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xyXG5cdGxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBjaGVja2JveC5pZCk7XHJcblxyXG5cdC8vIEFwcGVuZCBjaGVja2JveCBhbmQgbGFiZWwgdG8gY2hlY2tib3ggY29udGFpbmVyXHJcblx0Y2hlY2tib3hDb250YWluZXIuYXBwZW5kQ2hpbGQoY2hlY2tib3gpO1xyXG5cdGNoZWNrYm94Q29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcclxuXHJcblx0Y29uc3QgbmFtZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuXHRuYW1lU3Bhbi5jbGFzc05hbWUgPSBcInRhc2stbmFtZVwiO1xyXG5cdG5hbWVTcGFuLmlubmVySFRNTCArPSB0b2RvLm5hbWU7XHJcblx0bmFtZVNwYW4uaW5uZXJIVE1MICs9IGA8c3BhbiBjbGFzcz1cInRhc2stcHJvamVjdFwiPiR7dG9kby5wcm9qZWN0TmFtZX08L3NwYW4+YDtcclxuXHJcblx0Y29uc3QgZHVlRGF0ZVRpbWVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcblx0ZHVlRGF0ZVRpbWVTcGFuLmNsYXNzTmFtZSA9IFwidGFzay1kYXRlLXRpbWVcIjtcclxuXHRjb25zdCBmb3JtYXR0ZWREYXRlID0gZm9ybWF0KHBhcnNlSVNPKHRvZG8uZHVlRGF0ZSksIFwiRSwgZG8gJ29mJyBNTU1NXCIpO1xyXG5cdGNvbnN0IHN1cGVyc2NyaXB0ZWREYXRlID0gZm9ybWF0dGVkRGF0ZS5yZXBsYWNlKC8oXFxkKykoc3R8bmR8cmR8dGgpLywgXCIkMTxzdXA+JDI8L3N1cD5cIik7XHJcblx0ZHVlRGF0ZVRpbWVTcGFuLmlubmVySFRNTCA9IHN1cGVyc2NyaXB0ZWREYXRlO1xyXG5cclxuICAgIFx0Ly8gQWRkIFwiZHVlIGluIFggaG91cnNcIiBpZiBkdWUgdG9kYXlcclxuXHRjb25zdCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKCk7XHJcblx0Y29uc3QgdGFza0R1ZURhdGUgPSBwYXJzZUlTTyh0b2RvLmR1ZURhdGUpO1xyXG5cdGlmIChmb3JtYXQoY3VycmVudERhdGUsICd5eXl5LU1NLWRkJykgPT09IGZvcm1hdCh0YXNrRHVlRGF0ZSwgJ3l5eXktTU0tZGQnKSkge1xyXG5cdFx0Y29uc3QgaG91cnNSZW1haW5pbmcgPSBkaWZmZXJlbmNlSW5Ib3VycyhzdGFydE9mVG9tb3Jyb3coKSwgY3VycmVudERhdGUpO1xyXG5cdFx0ZHVlRGF0ZVRpbWVTcGFuLmlubmVySFRNTCArPSBgPHNwYW4gY2xhc3M9XCJkdWUtaW5cIj5kdWUgaW4gJHtob3Vyc1JlbWFpbmluZ30gaG91cnM8L3NwYW4+YDtcclxuXHR9XHJcblxyXG5cdGNvbnN0IHByaW9yaXR5U3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG5cdHByaW9yaXR5U3Bhbi5jbGFzc05hbWUgPSBgdGFzay1wcmlvcml0eSAke3RvZG8ucHJpb3JpdHl9YDtcclxuXHQvLyBwcmlvcml0eVNwYW4udGV4dENvbnRlbnQgPSB0b2RvLnByaW9yaXR5O1xyXG5cclxuXHRjb25zdCBwcmlvcml0eUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuXHRwcmlvcml0eVNwYW4uYXBwZW5kQ2hpbGQocHJpb3JpdHlJY29uKTtcclxuXHJcblx0Y29uc3QgZWRpdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcblx0ZWRpdEJ1dHRvbi5jbGFzc05hbWUgPSBcImVkaXQtdGFzayBpY29uXCI7XHJcblx0ZWRpdEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiRWRpdFwiO1xyXG5cclxuXHRjb25zdCBkZWxldGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG5cdGRlbGV0ZUJ1dHRvbi5jbGFzc05hbWUgPSBcImRlbGV0ZS10YXNrIGljb25cIjtcclxuXHRkZWxldGVCdXR0b24udGV4dENvbnRlbnQgPSBcIkRlbGV0ZVwiO1xyXG5cclxuXHR0b2RvSXRlbS5hcHBlbmRDaGlsZChwcmlvcml0eVNwYW4pO1xyXG5cdHRvZG9JdGVtLmFwcGVuZENoaWxkKGNoZWNrYm94Q29udGFpbmVyKTtcclxuXHR0b2RvSXRlbS5hcHBlbmRDaGlsZChuYW1lU3Bhbik7XHJcblx0dG9kb0l0ZW0uYXBwZW5kQ2hpbGQoZHVlRGF0ZVRpbWVTcGFuKTtcclxuXHR0b2RvSXRlbS5hcHBlbmRDaGlsZChlZGl0QnV0dG9uKTtcclxuXHR0b2RvSXRlbS5hcHBlbmRDaGlsZChkZWxldGVCdXR0b24pO1xyXG5cclxuXHRyZXR1cm4gdG9kb0l0ZW07XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuXHRzdGFydE9mVG9kYXksXHJcblx0YWRkRGF5cyxcclxuXHRzdGFydE9mV2VlayxcclxuXHRlbmRPZldlZWssXHJcblx0aXNTYW1lRGF5LFxyXG5cdGlzV2l0aGluSW50ZXJ2YWwsXHJcblx0YWRkV2Vla3MsXHJcblx0cGFyc2VJU08sXHJcbn0gZnJvbSBcImRhdGUtZm5zXCI7XHJcblxyXG5pbXBvcnQgYXBwZW5kVGFzayBmcm9tIFwiLi9hcHBlbmRUYXNrXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaWx0ZXJUYXNrc0J5RGF0ZShmaWx0ZXIsIHByb2plY3RzLCB0YXNrc0NvbnRhaW5lcikge1xyXG5cdGNvbnN0IHRvZGF5ID0gc3RhcnRPZlRvZGF5KCk7XHJcblx0Y29uc3QgdG9tb3Jyb3cgPSBhZGREYXlzKHRvZGF5LCAxKTtcclxuXHRjb25zdCBzdGFydE9mV2Vla0RhdGUgPSBzdGFydE9mV2Vlayh0b2RheSwgeyB3ZWVrU3RhcnRzT246IDEgfSk7XHJcblx0Y29uc3QgZW5kT2ZXZWVrRGF0ZSA9IGVuZE9mV2Vlayh0b2RheSwgeyB3ZWVrU3RhcnRzT246IDEgfSk7XHJcblx0Y29uc3QgbmV4dFdlZWtTdGFydCA9IHN0YXJ0T2ZXZWVrKGFkZFdlZWtzKHRvZGF5LCAxKSwgeyB3ZWVrU3RhcnRzT246IDEgfSk7XHJcblx0Y29uc3QgbmV4dFdlZWtFbmQgPSBlbmRPZldlZWsobmV4dFdlZWtTdGFydCwgeyB3ZWVrU3RhcnRzT246IDEgfSk7XHJcblxyXG5cdC8vIGNvbnNvbGUubG9nKGBGaWx0ZXJpbmcgdGFza3MgZm9yOiAke2ZpbHRlcn1gKTtcclxuXHJcblx0dGFza3NDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuXHRwcm9qZWN0cy5mb3JFYWNoKChwcm9qZWN0KSA9PiB7XHJcblx0XHRwcm9qZWN0LnRvZG9zLmZvckVhY2goKHRvZG8sIGluZGV4KSA9PiB7XHJcblx0XHRcdGNvbnN0IHRhc2tEYXRlID0gcGFyc2VJU08odG9kby5kdWVEYXRlKTtcclxuXHRcdFx0bGV0IHNob3VsZEFwcGVuZCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0aWYgKGZpbHRlciA9PT0gXCJ0b2RheVwiICYmIGlzU2FtZURheSh0YXNrRGF0ZSwgdG9kYXkpKSB7XHJcblx0XHRcdFx0c2hvdWxkQXBwZW5kID0gdHJ1ZTtcclxuXHRcdFx0fSBlbHNlIGlmIChmaWx0ZXIgPT09IFwidG9tb3Jyb3dcIiAmJiBpc1NhbWVEYXkodGFza0RhdGUsIHRvbW9ycm93KSkge1xyXG5cdFx0XHRcdHNob3VsZEFwcGVuZCA9IHRydWU7XHJcblx0XHRcdH0gZWxzZSBpZiAoXHJcblx0XHRcdFx0ZmlsdGVyID09PSBcInRoaXNXZWVrXCIgJiZcclxuXHRcdFx0XHRpc1dpdGhpbkludGVydmFsKHRhc2tEYXRlLCB7XHJcblx0XHRcdFx0XHRzdGFydDogc3RhcnRPZldlZWtEYXRlLFxyXG5cdFx0XHRcdFx0ZW5kOiBlbmRPZldlZWtEYXRlLFxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdCkge1xyXG5cdFx0XHRcdHNob3VsZEFwcGVuZCA9IHRydWU7XHJcblx0XHRcdH0gZWxzZSBpZiAoXHJcblx0XHRcdFx0ZmlsdGVyID09PSBcIm5leHRXZWVrXCIgJiZcclxuXHRcdFx0XHRpc1dpdGhpbkludGVydmFsKHRhc2tEYXRlLCB7XHJcblx0XHRcdFx0XHRzdGFydDogbmV4dFdlZWtTdGFydCxcclxuXHRcdFx0XHRcdGVuZDogbmV4dFdlZWtFbmQsXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0KSB7XHJcblx0XHRcdFx0c2hvdWxkQXBwZW5kID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHNob3VsZEFwcGVuZCkge1xyXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGBBcHBlbmRpbmcgdGFzazogJHt0b2RvLm5hbWV9IGR1ZSBvbiAke3RvZG8uZHVlRGF0ZX1gKTtcclxuXHRcdFx0XHRhcHBlbmRUYXNrKHRvZG8sIGluZGV4LCB0YXNrc0NvbnRhaW5lcik7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59XHJcbiIsImltcG9ydCBcIi4vc2Nzcy9zdHlsZS5zY3NzXCI7XHJcblxyXG5pbXBvcnQgUHJvamVjdCBmcm9tIFwiLi9qcy9wcm9qZWN0XCI7XHJcbmltcG9ydCBUb0RvIGZyb20gXCIuL2pzL3RvZG9cIjtcclxuXHJcbmltcG9ydCBpbmplY3RNb2RhbHMgZnJvbSBcIi4vanMvbW9kYWxzXCI7XHJcbmltcG9ydCBpbmplY3RTaWRlYmFyIGZyb20gXCIuL2pzL3NpZGViYXJcIjtcclxuaW1wb3J0IGluamVjdE5vdGVzIGZyb20gXCIuL2pzL25vdGVzXCI7XHJcblxyXG5pbXBvcnQgeyBkZWZhdWx0UHJvamVjdHMsIGRlZmF1bHROb3RlcywgZm9ybWF0RGF0ZSB9IGZyb20gXCIuL2pzL2RlZmF1bHRzXCI7XHJcblxyXG5pbXBvcnQgeyBzaG93TW9kYWwsIGhpZGVNb2RhbCB9IGZyb20gXCIuL2pzL3Nob3dIaWRlTW9kYWxzXCI7XHJcbmltcG9ydCBzYXZlVG9Mb2NhbFN0b3JhZ2UgZnJvbSBcIi4vanMvc2F2ZVRvTG9jYWxTdG9yYWdlXCI7XHJcbmltcG9ydCBmaWx0ZXJUYXNrc0J5RGF0ZSBmcm9tIFwiLi9qcy9maWx0ZXJUYXNrc1wiO1xyXG5pbXBvcnQgZGlzcGxheVRhc2tzIGZyb20gXCIuL2pzL2Rpc3BsYXlUYXNrc1wiO1xyXG5cclxuaW5qZWN0TW9kYWxzKCk7XHJcbmluamVjdFNpZGViYXIoKTtcclxuaW5qZWN0Tm90ZXMoKTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVByb2plY3RGcm9tRGF0YShwcm9qZWN0RGF0YSkge1xyXG5cdGNvbnN0IG5ld1Byb2plY3QgPSBuZXcgUHJvamVjdChwcm9qZWN0RGF0YS5uYW1lLCBwcm9qZWN0RGF0YS5kZXNjcmlwdGlvbik7XHJcblx0cHJvamVjdERhdGEudG9kb3MuZm9yRWFjaCgodG9kb0RhdGEpID0+IHtcclxuXHRcdGNvbnN0IHRvZG8gPSBuZXcgVG9EbyhcclxuXHRcdFx0dG9kb0RhdGEubmFtZSxcclxuXHRcdFx0dG9kb0RhdGEuZHVlRGF0ZSxcclxuXHRcdFx0dG9kb0RhdGEucHJpb3JpdHksXHJcblx0XHRcdHRvZG9EYXRhLnByb2plY3ROYW1lLFxyXG5cdFx0XHR0b2RvRGF0YS5jb21wbGV0ZWRcclxuXHRcdCk7XHJcblx0XHRuZXdQcm9qZWN0LmFkZFRvZG8odG9kbyk7XHJcblx0fSk7XHJcblx0cmV0dXJuIG5ld1Byb2plY3Q7XHJcbn1cclxuZXhwb3J0IGxldCBwcm9qZWN0cyA9XHJcblx0SlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInByb2plY3RzXCIpKSB8fCBPYmplY3QudmFsdWVzKGRlZmF1bHRQcm9qZWN0cykubWFwKGNyZWF0ZVByb2plY3RGcm9tRGF0YSk7XHJcblxyXG5wcm9qZWN0cyA9IHByb2plY3RzLm1hcChjcmVhdGVQcm9qZWN0RnJvbURhdGEpO1xyXG5cclxuZXhwb3J0IGxldCBub3RlcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJub3Rlc1wiKSkgfHwgZGVmYXVsdE5vdGVzO1xyXG5leHBvcnQgbGV0IGN1cnJlbnRQcm9qZWN0ID0gcHJvamVjdHNbMF0ubmFtZSB8fCBcIlwiO1xyXG5cclxuY29uc3QgYWRkUHJvamVjdEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkUHJvamVjdEJ0blwiKTtcclxuY29uc3QgYWRkVGFza0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkVGFza0J0blwiKTtcclxuY29uc3QgYWRkTm90ZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkTm90ZUJ0blwiKTtcclxuY29uc3Qgdmlld0FsbEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlld0FsbEJ0blwiKTtcclxuY29uc3QgdG9kYXlCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZGF5QnRuXCIpO1xyXG5jb25zdCB0b21vcnJvd0J0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9tb3Jyb3dCdG5cIik7XHJcbmNvbnN0IHRoaXNXZWVrQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aGlzV2Vla0J0blwiKTtcclxuY29uc3QgbmV4dFdlZWtCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5leHRXZWVrQnRuXCIpO1xyXG5jb25zdCBwcm9qZWN0TW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2plY3RNb2RhbFwiKTtcclxuY29uc3QgdGFza01vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0YXNrTW9kYWxcIik7XHJcbmNvbnN0IG5vdGVNb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibm90ZU1vZGFsXCIpO1xyXG5jb25zdCBjbG9zZVByb2plY3RNb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2xvc2VQcm9qZWN0TW9kYWxcIik7XHJcbmNvbnN0IGNsb3NlVGFza01vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjbG9zZVRhc2tNb2RhbFwiKTtcclxuY29uc3QgY2xvc2VOb3RlTW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsb3NlTm90ZU1vZGFsXCIpO1xyXG5jb25zdCBjb25maXJtYXRpb25Nb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29uZmlybWF0aW9uTW9kYWxcIik7XHJcbmNvbnN0IGNsb3NlQ29uZmlybWF0aW9uTW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsb3NlQ29uZmlybWF0aW9uTW9kYWxcIik7XHJcbmNvbnN0IHNhdmVQcm9qZWN0QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9qZWN0Rm9ybVwiKTtcclxuY29uc3Qgc2F2ZVRhc2tCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRhc2tGb3JtXCIpO1xyXG5jb25zdCBzYXZlTm90ZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibm90ZUZvcm1cIik7XHJcbmNvbnN0IHRhc2tzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0YXNrc0NvbnRhaW5lclwiKTtcclxuY29uc3Qgbm90ZXNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5vdGVzQ29udGFpbmVyXCIpO1xyXG5jb25zdCBwcm9qZWN0U2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9qZWN0U2VsZWN0XCIpO1xyXG5jb25zdCBjb25maXJtRGVsZXRlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb25maXJtRGVsZXRlQnRuXCIpO1xyXG5jb25zdCBjYW5jZWxEZWxldGVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbmNlbERlbGV0ZUJ0blwiKTtcclxuZXhwb3J0IGNvbnN0IG1vZGFsc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9kYWxzXCIpO1xyXG5cclxubGV0IGRlbGV0ZUFjdGlvbiA9IG51bGw7XHJcblxyXG5mdW5jdGlvbiBkaXNhYmxlQWRkUHJvamVjdEJ0bigpIHtcclxuXHRpZiAocHJvamVjdHMubGVuZ3RoID49IDUpIHtcclxuXHRcdGFkZFByb2plY3RCdG4uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0YWRkUHJvamVjdEJ0bi5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcclxuXHR9XHJcbn1cclxuXHJcbmFkZFByb2plY3RCdG4ub25jbGljayA9ICgpID0+IHNob3dNb2RhbChwcm9qZWN0TW9kYWwsIG1vZGFsc0NvbnRhaW5lcik7XHJcbmFkZFRhc2tCdG4ub25jbGljayA9ICgpID0+IHNob3dNb2RhbCh0YXNrTW9kYWwsIG1vZGFsc0NvbnRhaW5lciwgY3VycmVudFByb2plY3QpO1xyXG5hZGROb3RlQnRuLm9uY2xpY2sgPSAoKSA9PiBzaG93TW9kYWwobm90ZU1vZGFsLCBtb2RhbHNDb250YWluZXIpO1xyXG52aWV3QWxsQnRuLm9uY2xpY2sgPSAoKSA9PiBkaXNwbGF5VGFza3MocHJvamVjdHMpO1xyXG50b2RheUJ0bi5vbmNsaWNrID0gKCkgPT4gZmlsdGVyVGFza3NCeURhdGUoXCJ0b2RheVwiLCBwcm9qZWN0cywgdGFza3NDb250YWluZXIpO1xyXG50b21vcnJvd0J0bi5vbmNsaWNrID0gKCkgPT4gZmlsdGVyVGFza3NCeURhdGUoXCJ0b21vcnJvd1wiLCBwcm9qZWN0cywgdGFza3NDb250YWluZXIpO1xyXG50aGlzV2Vla0J0bi5vbmNsaWNrID0gKCkgPT4gZmlsdGVyVGFza3NCeURhdGUoXCJ0aGlzV2Vla1wiLCBwcm9qZWN0cywgdGFza3NDb250YWluZXIpO1xyXG5uZXh0V2Vla0J0bi5vbmNsaWNrID0gKCkgPT4gZmlsdGVyVGFza3NCeURhdGUoXCJuZXh0V2Vla1wiLCBwcm9qZWN0cywgdGFza3NDb250YWluZXIpO1xyXG5jbG9zZVByb2plY3RNb2RhbC5vbmNsaWNrID0gKCkgPT4gaGlkZU1vZGFsKHByb2plY3RNb2RhbCwgbW9kYWxzQ29udGFpbmVyKTtcclxuY2xvc2VUYXNrTW9kYWwub25jbGljayA9ICgpID0+IGhpZGVNb2RhbCh0YXNrTW9kYWwsIG1vZGFsc0NvbnRhaW5lcik7XHJcbmNsb3NlTm90ZU1vZGFsLm9uY2xpY2sgPSAoKSA9PiBoaWRlTW9kYWwobm90ZU1vZGFsLCBtb2RhbHNDb250YWluZXIpO1xyXG5jbG9zZUNvbmZpcm1hdGlvbk1vZGFsLm9uY2xpY2sgPSAoKSA9PiBoaWRlQ29uZmlybWF0aW9uTW9kYWwoKTtcclxuY2FuY2VsRGVsZXRlQnRuLm9uY2xpY2sgPSAoKSA9PiBoaWRlQ29uZmlybWF0aW9uTW9kYWwoKTtcclxuY29uZmlybURlbGV0ZUJ0bi5vbmNsaWNrID0gKCkgPT4ge1xyXG5cdGlmIChkZWxldGVBY3Rpb24pIHtcclxuXHRcdGRlbGV0ZUFjdGlvbigpO1xyXG5cdFx0aGlkZUNvbmZpcm1hdGlvbk1vZGFsKCk7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3dDb25maXJtYXRpb25Nb2RhbChtZXNzYWdlLCBlbGVtZW50TmFtZSwgYWN0aW9uKSB7XHJcblx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb25mb3JtYXRpb25Nb2RhbEVsZW1lbnRcIikudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xyXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29uZmlybWF0aW9uTWVzc2FnZVwiKS50ZXh0Q29udGVudCA9IGVsZW1lbnROYW1lO1xyXG5cdGRlbGV0ZUFjdGlvbiA9IGFjdGlvbjtcclxuXHRtb2RhbHNDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm9wZW5cIik7XHJcblx0Y29uZmlybWF0aW9uTW9kYWwuY2xhc3NMaXN0LmFkZChcIm9wZW5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoaWRlQ29uZmlybWF0aW9uTW9kYWwoKSB7XHJcblx0bW9kYWxzQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJvcGVuXCIpO1xyXG5cdGNvbmZpcm1hdGlvbk1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJvcGVuXCIpO1xyXG5cdGRlbGV0ZUFjdGlvbiA9IG51bGw7XHJcbn1cclxuXHJcbnNhdmVQcm9qZWN0QnRuLm9uY2xpY2sgPSAoKSA9PiB7XHJcblx0Y29uc3QgbmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdE5hbWVcIikudmFsdWU7XHJcblx0Y29uc3QgZGVzY3JpcHRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2plY3REZXNjcmlwdGlvblwiKS52YWx1ZTtcclxuXHRpZiAobmFtZSkge1xyXG5cdFx0Y29uc3QgcHJvamVjdCA9IG5ldyBQcm9qZWN0KG5hbWUsIGRlc2NyaXB0aW9uKTtcclxuXHRcdHByb2plY3RzLnB1c2gocHJvamVjdCk7XHJcblx0XHRzYXZlVG9Mb2NhbFN0b3JhZ2UoKTtcclxuXHRcdGRpc3BsYXlQcm9qZWN0cygpO1xyXG5cdFx0aGlkZU1vZGFsKHByb2plY3RNb2RhbCwgbW9kYWxzQ29udGFpbmVyKTtcclxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdE5hbWVcIikudmFsdWUgPSBcIlwiO1xyXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9qZWN0RGVzY3JpcHRpb25cIikudmFsdWUgPSBcIlwiO1xyXG5cdFx0ZGlzYWJsZUFkZFByb2plY3RCdG4oKTtcclxuXHR9XHJcbn07XHJcblxyXG5zYXZlVGFza0J0bi5vbnN1Ym1pdCA9IChlKSA9PiB7XHJcblx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdGNvbnN0IHRhc2tOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0YXNrTmFtZVwiKS52YWx1ZTtcclxuXHRjb25zdCBkdWVEYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkdWVEYXRlXCIpLnZhbHVlO1xyXG5cdGNvbnN0IHByb2plY3ROYW1lID0gcHJvamVjdFNlbGVjdC52YWx1ZTtcclxuXHJcblx0Ly8gR2V0IHRoZSBzZWxlY3RlZCBwcmlvcml0eSBmcm9tIHRoZSByYWRpbyBidXR0b25zXHJcblx0Y29uc3QgcHJpb3JpdHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwicHJpb3JpdHlcIl06Y2hlY2tlZCcpLnZhbHVlO1xyXG5cclxuXHRpZiAodGFza05hbWUgJiYgZHVlRGF0ZSAmJiBwcm9qZWN0TmFtZSAmJiBwcmlvcml0eSkge1xyXG5cdFx0Y29uc3QgdG9kbyA9IG5ldyBUb0RvKHRhc2tOYW1lLCBkdWVEYXRlLCBwcmlvcml0eSwgcHJvamVjdE5hbWUpO1xyXG5cdFx0Y29uc3QgcHJvamVjdEluZGV4ID0gcHJvamVjdHMuZmluZEluZGV4KChwKSA9PiBwLm5hbWUgPT09IHByb2plY3ROYW1lKTtcclxuXHRcdGNvbnN0IHByb2plY3QgPSBwcm9qZWN0c1twcm9qZWN0SW5kZXhdO1xyXG5cdFx0cHJvamVjdC5hZGRUb2RvKHRvZG8pO1xyXG5cdFx0c2F2ZVRvTG9jYWxTdG9yYWdlKCk7XHJcblx0XHRkaXNwbGF5VGFza3MocHJvamVjdHMsIHByb2plY3RJbmRleCk7XHJcblx0XHRoaWRlTW9kYWwodGFza01vZGFsLCBtb2RhbHNDb250YWluZXIpO1xyXG5cdH1cclxufTtcclxuXHJcbnNhdmVOb3RlQnRuLm9uY2xpY2sgPSAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdGNvbnN0IG5vdGVUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJub3RlVGV4dFwiKS52YWx1ZTtcclxuXHRpZiAobm90ZVRleHQpIHtcclxuXHRcdGNvbnN0IGRhdGVBZGRlZCA9IGZvcm1hdERhdGUobmV3IERhdGUoKSk7XHJcblx0XHRub3Rlcy5wdXNoKHsgdGV4dDogbm90ZVRleHQsIGRhdGVBZGRlZCB9KTtcclxuXHRcdHNhdmVUb0xvY2FsU3RvcmFnZSgpO1xyXG5cdFx0ZGlzcGxheU5vdGVzKCk7XHJcblx0XHRoaWRlTW9kYWwobm90ZU1vZGFsLCBtb2RhbHNDb250YWluZXIpO1xyXG5cdH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIGRpc3BsYXlQcm9qZWN0cygpIHtcclxuXHRjb25zdCBwcm9qZWN0TGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdExpc3RcIik7XHJcblx0cHJvamVjdExpc3QuaW5uZXJIVE1MID0gXCJcIjtcclxuXHRwcm9qZWN0cy5mb3JFYWNoKChwcm9qZWN0LCBwcm9qZWN0SW5kZXgpID0+IHtcclxuXHRcdHByb2plY3Quc29ydFRvZG9zKCk7XHJcblx0XHRjb25zdCBwcm9qZWN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0XHRwcm9qZWN0SXRlbS5jbGFzc05hbWUgPSBcImxpc3QtaXRlbVwiO1xyXG5cdFx0aWYgKHByb2plY3QubmFtZSA9PT0gXCJEZWZhdWx0XCIpIHtcclxuXHRcdFx0cHJvamVjdEl0ZW0uaW5uZXJIVE1MID0gYDxidXR0b24gY2xhc3M9XCJwcm9qZWN0LWJ1dHRvblwiIGRhdGEtaW5kZXg9XCIke3Byb2plY3RJbmRleH1cIj4ke3Byb2plY3QubmFtZX08L2J1dHRvbj4gPHNwYW4gY2xhc3M9XCJwcm9qZWN0LWRlc2NyaXB0aW9uXCI+JHtwcm9qZWN0LmRlc2NyaXB0aW9ufTwvc3Bhbj5gO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cHJvamVjdEl0ZW0uaW5uZXJIVE1MID0gYDxidXR0b24gY2xhc3M9XCJwcm9qZWN0LWJ1dHRvblwiIGRhdGEtaW5kZXg9XCIke3Byb2plY3RJbmRleH1cIj4ke3Byb2plY3QubmFtZX08L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJkZWxldGUtcHJvamVjdFwiIGRhdGEtaW5kZXg9XCIke3Byb2plY3RJbmRleH1cIj48c3BhbiBjbGFzcz1cImljb25cIj5kZWxldGU8L3NwYW4+PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInByb2plY3QtZGVzY3JpcHRpb25cIj4ke3Byb2plY3QuZGVzY3JpcHRpb259PC9zcGFuPmA7XHJcblx0XHR9XHJcblx0XHRwcm9qZWN0TGlzdC5hcHBlbmRDaGlsZChwcm9qZWN0SXRlbSk7XHJcblx0fSk7XHJcblxyXG5cdHByb2plY3RTZWxlY3QuaW5uZXJIVE1MID0gXCJcIjtcclxuXHRwcm9qZWN0cy5mb3JFYWNoKChwcm9qZWN0KSA9PiB7XHJcblx0XHRjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xyXG5cdFx0b3B0aW9uLnZhbHVlID0gcHJvamVjdC5uYW1lO1xyXG5cdFx0b3B0aW9uLnRleHRDb250ZW50ID0gcHJvamVjdC5uYW1lO1xyXG5cdFx0cHJvamVjdFNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xyXG5cdH0pO1xyXG5cclxuXHQvLyBBZGQgZXZlbnQgbGlzdGVuZXJzIGZvciBwcm9qZWN0IGJ1dHRvbnNcclxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnByb2plY3QtYnV0dG9uXCIpLmZvckVhY2goKGJ1dHRvbikgPT4ge1xyXG5cdFx0YnV0dG9uLm9uY2xpY2sgPSAoZSkgPT4ge1xyXG5cdFx0XHRjb25zdCBwcm9qZWN0SW5kZXggPSBlLnRhcmdldC5kYXRhc2V0LmluZGV4O1xyXG5cdFx0XHRjdXJyZW50UHJvamVjdCA9IHByb2plY3RzW3Byb2plY3RJbmRleF0ubmFtZTtcclxuXHJcblx0XHRcdGRpc3BsYXlUYXNrcyhwcm9qZWN0cywgcHJvamVjdEluZGV4KTtcclxuXHRcdH07XHJcblx0fSk7XHJcblxyXG5cdC8vIEFkZCBldmVudCBsaXN0ZW5lcnMgZm9yIGRlbGV0ZSBwcm9qZWN0IGJ1dHRvbnNcclxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmRlbGV0ZS1wcm9qZWN0XCIpLmZvckVhY2goKGJ1dHRvbikgPT4ge1xyXG5cdFx0YnV0dG9uLm9uY2xpY2sgPSAoZSkgPT4ge1xyXG5cdFx0XHRjb25zdCBwcm9qZWN0SW5kZXggPSBlLnRhcmdldC5kYXRhc2V0LmluZGV4O1xyXG5cdFx0XHRjb25zdCBwcm9qZWN0TmFtZSA9IGBOYW1lOiAke3Byb2plY3RzW3Byb2plY3RJbmRleF0ubmFtZX0sIEZvcjogJHtwcm9qZWN0c1twcm9qZWN0SW5kZXhdLmRlc2NyaXB0aW9ufWA7XHJcblxyXG5cdFx0XHRzaG93Q29uZmlybWF0aW9uTW9kYWwoXCJwcm9qZWN0XCIsIHByb2plY3ROYW1lLCAoKSA9PiB7XHJcblx0XHRcdFx0cHJvamVjdHMuc3BsaWNlKHByb2plY3RJbmRleCwgMSk7XHJcblx0XHRcdFx0c2F2ZVRvTG9jYWxTdG9yYWdlKCk7XHJcblx0XHRcdFx0ZGlzcGxheVByb2plY3RzKCk7XHJcblx0XHRcdFx0ZGlzYWJsZUFkZFByb2plY3RCdG4oKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cdH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkaXNwbGF5Tm90ZXMoKSB7XHJcblx0bm90ZXNDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcclxuXHRub3Rlcy5mb3JFYWNoKChub3RlLCBub3RlSW5kZXgpID0+IHtcclxuXHRcdGNvbnN0IG5vdGVJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHRcdG5vdGVJdGVtLmNsYXNzTmFtZSA9IFwibm90ZVwiO1xyXG5cdFx0bm90ZUl0ZW0uaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICA8cD4ke25vdGUudGV4dH08L3A+XHJcbiAgICAgICAgICAgIDxwIGNsYXNzPVwibm90ZS1kYXRlXCI+QWRkZWQgb246ICR7bm90ZS5kYXRlQWRkZWR9PC9wPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibm90ZS1hY3Rpb25zXCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC1ub3RlIGljb25cIiBkYXRhLWluZGV4PVwiJHtub3RlSW5kZXh9XCI+RWRpdDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImRlbGV0ZS1ub3RlIGljb25cIiBkYXRhLWluZGV4PVwiJHtub3RlSW5kZXh9XCI+RGVsZXRlPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGA7XHJcblx0XHRub3Rlc0NvbnRhaW5lci5hcHBlbmRDaGlsZChub3RlSXRlbSk7XHJcblxyXG5cdFx0Ly8gQWRkIGV2ZW50IGxpc3RlbmVyIGZvciBkZWxldGUgbm90ZSBidXR0b25cclxuXHRcdG5vdGVJdGVtLnF1ZXJ5U2VsZWN0b3IoXCIuZGVsZXRlLW5vdGVcIikub25jbGljayA9ICgpID0+IHtcclxuXHRcdFx0c2hvd0NvbmZpcm1hdGlvbk1vZGFsKFwibm90ZVwiLCBudWxsLCAoKSA9PiB7XHJcblx0XHRcdFx0bm90ZXMuc3BsaWNlKG5vdGVJbmRleCwgMSk7XHJcblx0XHRcdFx0c2F2ZVRvTG9jYWxTdG9yYWdlKCk7XHJcblx0XHRcdFx0ZGlzcGxheU5vdGVzKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHJcblx0XHRub3RlSXRlbS5xdWVyeVNlbGVjdG9yKFwiLmVkaXQtbm90ZVwiKS5vbmNsaWNrID0gKCkgPT4ge1xyXG5cdFx0XHRkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5vdGVUZXh0XCIpLnZhbHVlID0gbm90ZS50ZXh0O1xyXG5cdFx0XHRzaG93TW9kYWwobm90ZU1vZGFsLCBtb2RhbHNDb250YWluZXIpO1xyXG5cclxuXHRcdFx0Ly8gVGVtcG9yYXJpbHkgc3RvcmUgdGhlIGluZGV4IG9mIHRoZSBub3RlIGJlaW5nIGVkaXRlZFxyXG5cdFx0XHRsZXQgY3VycmVudE5vdGVJbmRleCA9IG5vdGVJbmRleDtcclxuXHJcblx0XHRcdC8vIFNhdmUgdGhlIGVkaXRlZCBub3RlXHJcblx0XHRcdHNhdmVOb3RlQnRuLm9uY2xpY2sgPSAoKSA9PiB7XHJcblx0XHRcdFx0bm90ZXNbY3VycmVudE5vdGVJbmRleF0udGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibm90ZVRleHRcIikudmFsdWU7XHJcblx0XHRcdFx0c2F2ZVRvTG9jYWxTdG9yYWdlKCk7XHJcblx0XHRcdFx0ZGlzcGxheU5vdGVzKCk7XHJcblx0XHRcdFx0aGlkZU1vZGFsKG5vdGVNb2RhbCwgbW9kYWxzQ29udGFpbmVyKTtcclxuXHRcdFx0fTtcclxuXHRcdH07XHJcblx0fSk7XHJcbn1cclxuXHJcbmNvbnN0IHNpZGViYXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpZGViYXItY29udGFpbmVyXCIpO1xyXG5cclxuc2lkZWJhckNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuXHRpZiAoZS50YXJnZXQudGFnTmFtZSA9PT0gXCJCVVRUT05cIikge1xyXG5cdFx0Y29uc3QgYnV0dG9ucyA9IHNpZGViYXJDb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcIi5saXN0LWl0ZW0gYnV0dG9uLCAucHJvamVjdC1idG5cIik7XHJcblxyXG5cdFx0Ly8gUmVtb3ZlICdhY3RpdmUnIGNsYXNzIGZyb20gYWxsIGJ1dHRvbnNcclxuXHRcdGJ1dHRvbnMuZm9yRWFjaCgoYnRuKSA9PiBidG4ucGFyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpKTtcclxuXHJcblx0XHQvLyBBZGQgJ2FjdGl2ZScgY2xhc3MgdG8gdGhlIGNsaWNrZWQgYnV0dG9uJ3MgcGFyZW50XHJcblx0XHRpZiAoZS50YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoXCJsaXN0LWl0ZW1cIikgfHwgZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicHJvamVjdC1idG5cIikpIHtcclxuXHRcdFx0ZS50YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG5cdFx0fSBlbHNlIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJwcm9qZWN0LWJ0blwiKSkge1xyXG5cdFx0XHRlLnRhcmdldC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG5cdFx0fVxyXG5cdH1cclxufSk7XHJcblxyXG5mdW5jdGlvbiBzZXRNaW5EYXRlKCkge1xyXG5cdGNvbnN0IGRhdGVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHVlRGF0ZVwiKTtcclxuXHRjb25zdCB0b2RheSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdChcIlRcIilbMF07XHJcblx0ZGF0ZUlucHV0LnNldEF0dHJpYnV0ZShcIm1pblwiLCB0b2RheSk7XHJcbn1cclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcclxuXHRzZXRNaW5EYXRlKCk7XHJcblx0Y29uc3QgZGVmYXVsdFByaW9yaXR5ID0gXCJoaWdoXCI7XHJcblx0Y29uc3QgcHJpb3JpdHlSYWRpb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtuYW1lPVwicHJpb3JpdHlcIl0nKTtcclxuXHRwcmlvcml0eVJhZGlvcy5mb3JFYWNoKChyYWRpbykgPT4ge1xyXG5cdFx0aWYgKHJhZGlvLnZhbHVlID09PSBkZWZhdWx0UHJpb3JpdHkpIHtcclxuXHRcdFx0cmFkaW8uY2hlY2tlZCA9IHRydWU7XHJcblx0XHR9XHJcblx0fSk7XHJcbn0pO1xyXG5cclxuLy8gSW5pdGlhbCBkaXNwbGF5XHJcbmRpc3BsYXlQcm9qZWN0cygpO1xyXG5kaXNwbGF5VGFza3MocHJvamVjdHMpO1xyXG5kaXNwbGF5Tm90ZXMoKTtcclxuZGlzYWJsZUFkZFByb2plY3RCdG4oKTtcclxuIiwiaW1wb3J0IHByb2plY3RNb2RhbCBmcm9tIFwiLi4vbGF5b3V0cy9wcm9qZWN0bW9kYWwuaHRtbFwiO1xyXG5pbXBvcnQgdGFza01vZGFsIGZyb20gXCIuLi9sYXlvdXRzL3Rhc2ttb2RhbC5odG1sXCI7XHJcbmltcG9ydCBub3Rlc01vZGFsIGZyb20gXCIuLi9sYXlvdXRzL25vdGVzbW9kYWwuaHRtbFwiO1xyXG5pbXBvcnQgY29uZmlybWF0aW9uTW9kYWwgZnJvbSBcIi4uL2xheW91dHMvY29uZmlybWF0aW9ubW9kYWwuaHRtbFwiO1xyXG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluamVjdE1vZGFscygpIHtcclxuXHRjb25zdCBtb2RhbHNDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21vZGFsc1wiKTtcclxuXHRtb2RhbHNDb250YWluZXIuaW5uZXJIVE1MICs9IHByb2plY3RNb2RhbDtcclxuXHRtb2RhbHNDb250YWluZXIuaW5uZXJIVE1MICs9IHRhc2tNb2RhbDtcclxuXHRtb2RhbHNDb250YWluZXIuaW5uZXJIVE1MICs9IG5vdGVzTW9kYWw7XHJcblx0bW9kYWxzQ29udGFpbmVyLmlubmVySFRNTCArPSBjb25maXJtYXRpb25Nb2RhbDtcclxuXHJcblx0Y29uc3QgZHVlRGF0ZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkdWVEYXRlXCIpO1xyXG5cdC8vIGNvbnN0IGR1ZVRpbWVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHVlVGltZVwiKTtcclxuXHRzZXRDdXJyZW50RGF0ZShkdWVEYXRlSW5wdXQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRDdXJyZW50RGF0ZShkdWVEYXRlSW5wdXQpIHtcclxuXHRjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xyXG5cdGNvbnN0IGZvcm1hdHRlZERhdGUgPSBmb3JtYXQobm93LCBcInl5eXktTU0tZGRcIik7XHJcblxyXG5cdGR1ZURhdGVJbnB1dC52YWx1ZSA9IGZvcm1hdHRlZERhdGU7XHJcbn1cclxuIiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiPGRpdiBpZD1cXFwicHJvamVjdE1vZGFsXFxcIiBjbGFzcz1cXFwibW9kYWxcXFwiPiA8Zm9ybSBjbGFzcz1cXFwibW9kYWwtY29udGVudFxcXCIgaWQ9XFxcInByb2plY3RGb3JtXFxcIj4gPHNwYW4gY2xhc3M9XFxcImNsb3NlIGljb25cXFwiIGlkPVxcXCJjbG9zZVByb2plY3RNb2RhbFxcXCI+Y2xvc2U8L3NwYW4+IDxoMiBjbGFzcz1cXFwibW9kYWwtdGl0bGVcXFwiPkFkZCBQcm9qZWN0PC9oMj4gPHAgY2xhc3M9XFxcIm5vdGVcXFwiPk9ubHkgNSBwcm9qZWN0cyBhcmUgYWxsb3dlZDwvcD4gPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGlkPVxcXCJwcm9qZWN0TmFtZVxcXCIgY2xhc3M9XFxcInVzZXItaW5wdXRcXFwiIHBsYWNlaG9sZGVyPVxcXCJQcm9qZWN0IE5hbWVcXFwiIHJlcXVpcmVkPiA8dGV4dGFyZWEgaWQ9XFxcInByb2plY3REZXNjcmlwdGlvblxcXCIgbWF4bGVuZ3RoPVxcXCI1MFxcXCIgY2xhc3M9XFxcInVzZXItaW5wdXRcXFwiIHBsYWNlaG9sZGVyPVxcXCJXaGF0IGlzIHRoaXMgcHJvamVjdCBmb3JcXFwiPjwvdGV4dGFyZWE+IDxkaXYgY2xhc3M9XFxcIm1vZGFsLWFjdGlvbnNcXFwiPiA8YnV0dG9uIGlkPVxcXCJzYXZlUHJvamVjdEJ0blxcXCI+U2F2ZSBQcm9qZWN0PC9idXR0b24+IDwvZGl2PiA8L2Zvcm0+IDwvZGl2PlwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8ZGl2IGlkPVxcXCJ0YXNrTW9kYWxcXFwiIGNsYXNzPVxcXCJtb2RhbFxcXCI+IDxmb3JtIGNsYXNzPVxcXCJtb2RhbC1jb250ZW50XFxcIiBpZD1cXFwidGFza0Zvcm1cXFwiPiA8c3BhbiBjbGFzcz1cXFwiY2xvc2UgaWNvblxcXCIgaWQ9XFxcImNsb3NlVGFza01vZGFsXFxcIj5jbG9zZTwvc3Bhbj4gPGgyIGNsYXNzPVxcXCJtb2RhbC10aXRsZVxcXCI+QWRkIFRhc2s8L2gyPiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj4gPGxhYmVsIGZvcj1cXFwidGFza05hbWVcXFwiPldoYXQgbmVlZHMgdG8gZ2V0IGRvbmU/PC9sYWJlbD4gPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIGlkPVxcXCJ0YXNrTmFtZVxcXCIgY2xhc3M9XFxcInVzZXItaW5wdXRcXFwiIHBsYWNlaG9sZGVyPVxcXCJUYXNrIE5hbWVcXFwiIHJlcXVpcmVkPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+IDxsYWJlbCBmb3I9XFxcImR1ZURhdGVcXFwiPldoYXQgaXMgdGhlIGR1ZSBkYXRlPzwvbGFiZWw+IDxpbnB1dCB0eXBlPVxcXCJkYXRlXFxcIiBpZD1cXFwiZHVlRGF0ZVxcXCIgY2xhc3M9XFxcInVzZXItaW5wdXRcXFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwicHJpb3JpdHktY29udGFpbmVyXFxcIj4gPHA+VGFzayBwcmlvcml0eTwvcD4gPGRpdiBjbGFzcz1cXFwiZm9ybS1yYWRpb1xcXCI+IDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwicHJpb3JpdHlcXFwiIGlkPVxcXCJwcmlvcml0eUxvd1xcXCIgdmFsdWU9XFxcImxvd1xcXCIgY2hlY2tlZD1cXFwidHJ1ZVxcXCIgcmVxdWlyZWQ+IDxsYWJlbCBmb3I9XFxcInByaW9yaXR5TG93XFxcIj5Mb3c8L2xhYmVsPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1yYWRpb1xcXCI+IDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwicHJpb3JpdHlcXFwiIGlkPVxcXCJwcmlvcml0eU1lZGl1bVxcXCIgdmFsdWU9XFxcIm1lZGl1bVxcXCIgcmVxdWlyZWQ+IDxsYWJlbCBmb3I9XFxcInByaW9yaXR5TWVkaXVtXFxcIj5NZWRpdW08L2xhYmVsPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZm9ybS1yYWRpb1xcXCI+IDxpbnB1dCB0eXBlPVxcXCJyYWRpb1xcXCIgbmFtZT1cXFwicHJpb3JpdHlcXFwiIGlkPVxcXCJwcmlvcml0eUhpZ2hcXFwiIHZhbHVlPVxcXCJoaWdoXFxcIiByZXF1aXJlZD4gPGxhYmVsIGZvcj1cXFwicHJpb3JpdHlIaWdoXFxcIj5IaWdoPC9sYWJlbD4gPC9kaXY+IDwvZGl2PiA8c2VsZWN0IGlkPVxcXCJwcm9qZWN0U2VsZWN0XFxcIiBjbGFzcz1cXFwidXNlci1pbnB1dFxcXCI+PC9zZWxlY3Q+IDxkaXYgY2xhc3M9XFxcIm1vZGFsLWFjdGlvbnNcXFwiPiA8YnV0dG9uIGlkPVxcXCJzYXZlVGFza0J0blxcXCIgdHlwZT1cXFwic3VibWl0XFxcIiBjbGFzcz1cXFwic2F2ZVxcXCI+U2F2ZSBUYXNrPC9idXR0b24+IDwvZGl2PiA8L2Zvcm0+IDwvZGl2PlwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8ZGl2IGlkPVxcXCJub3RlTW9kYWxcXFwiIGNsYXNzPVxcXCJtb2RhbFxcXCI+IDxmb3JtIGNsYXNzPVxcXCJtb2RhbC1jb250ZW50XFxcIiBpZD1cXFwibm90ZUZvcm1cXFwiPiA8c3BhbiBjbGFzcz1cXFwiY2xvc2UgaWNvblxcXCIgaWQ9XFxcImNsb3NlTm90ZU1vZGFsXFxcIj5jbG9zZTwvc3Bhbj4gPGgyIGNsYXNzPVxcXCJtb2RhbC10aXRsZVxcXCI+QWRkIE5vdGU8L2gyPiA8dGV4dGFyZWEgaWQ9XFxcIm5vdGVUZXh0XFxcIiBjbGFzcz1cXFwidXNlci1pbnB1dFxcXCIgcGxhY2Vob2xkZXI9XFxcIk5vdGUgdGV4dFxcXCIgcmVxdWlyZWQ+PC90ZXh0YXJlYT4gPGRpdiBjbGFzcz1cXFwibW9kYWwtYWN0aW9uc1xcXCI+IDxidXR0b24gaWQ9XFxcInNhdmVOb3RlQnRuXFxcIj5TYXZlIE5vdGU8L2J1dHRvbj4gPC9kaXY+IDwvZm9ybT4gPC9kaXY+XCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIi8vIE1vZHVsZVxudmFyIGNvZGUgPSBcIjxkaXYgaWQ9XFxcImNvbmZpcm1hdGlvbk1vZGFsXFxcIiBjbGFzcz1cXFwibW9kYWxcXFwiPiA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1jb250ZW50XFxcIj4gPHNwYW4gY2xhc3M9XFxcImNsb3NlXFxcIiBpZD1cXFwiY2xvc2VDb25maXJtYXRpb25Nb2RhbFxcXCI+JnRpbWVzOzwvc3Bhbj4gPGgyIGNsYXNzPVxcXCJtb2RhbC10aXRsZSBjZW50ZXJcXFwiPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyA8c3BhbiBpZD1cXFwiY29uZm9ybWF0aW9uTW9kYWxFbGVtZW50XFxcIj48L3NwYW4+PzwvaDI+IDxwIGlkPVxcXCJjb25maXJtYXRpb25NZXNzYWdlXFxcIiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiPjwvcD4gPGRpdiBjbGFzcz1cXFwibW9kYWwtYWN0aW9ucyBjZW50ZXJcXFwiPiA8YnV0dG9uIGlkPVxcXCJjb25maXJtRGVsZXRlQnRuXFxcIiBjbGFzcz1cXFwiYnV0dG9uIGRlbGV0ZVxcXCI+RGVsZXRlPC9idXR0b24+IDxidXR0b24gaWQ9XFxcImNhbmNlbERlbGV0ZUJ0blxcXCIgY2xhc3M9XFxcImJ1dHRvbiBjYW5jZWxcXFwiPkNhbmNlbDwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PlwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCJpbXBvcnQgc2lkZWJhckhUTUwgZnJvbSBcIi4uL2xheW91dHMvc2lkZWJhci5odG1sXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3RTaWRlYmFyKCkge1xyXG5cdGNvbnN0IHNpZGViYXJIVE1MQ29udGVudCA9IHNpZGViYXJIVE1MO1xyXG5cdGNvbnN0IHNpZGViYXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NpZGViYXJcIik7XHJcblx0c2lkZWJhckNvbnRhaW5lci5pbm5lckhUTUwgPSBzaWRlYmFySFRNTENvbnRlbnQ7XHJcbn1cclxuIiwiLy8gTW9kdWxlXG52YXIgY29kZSA9IFwiIDxkaXYgY2xhc3M9XFxcInNpZGViYXItY29udGFpbmVyXFxcIj4gPGRpdiBjbGFzcz1cXFwic2lkZWJhci1sb2dvXFxcIj5Ub0RvIDxzcGFuPkFwcDwvc3Bhbj48L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2lkZWJhci1ncm91cFxcXCI+IDxkaXYgY2xhc3M9XFxcImdyb3VwLWxpc3RcXFwiPiA8ZGl2IGNsYXNzPVxcXCJsaXN0LWl0ZW0gYWN0aXZlXFxcIj4gPGJ1dHRvbiBpZD1cXFwidmlld0FsbEJ0blxcXCI+QWxsIFRhc2tzPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNpZGViYXItZ3JvdXAgZHVlXFxcIj4gPGRpdiBjbGFzcz1cXFwiZ3JvdXAtdGl0bGVcXFwiPiA8aDIgY2xhc3M9XFxcInRpdGxlXFxcIj5EdWUgYnk8L2gyPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZ3JvdXAtbGlzdFxcXCI+IDxkaXYgY2xhc3M9XFxcImxpc3QtaXRlbVxcXCI+IDxidXR0b24gaWQ9XFxcInRvZGF5QnRuXFxcIj5Ub2RheTwvYnV0dG9uPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibGlzdC1pdGVtXFxcIj4gPGJ1dHRvbiBpZD1cXFwidG9tb3Jyb3dCdG5cXFwiPlRvbW9ycm93PC9idXR0b24+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJsaXN0LWl0ZW1cXFwiPiA8YnV0dG9uIGlkPVxcXCJ0aGlzV2Vla0J0blxcXCI+VGhpcyBXZWVrPC9idXR0b24+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJsaXN0LWl0ZW1cXFwiPiA8YnV0dG9uIGlkPVxcXCJuZXh0V2Vla0J0blxcXCI+TmV4dCBXZWVrPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNpZGViYXItZ3JvdXAgcHJvamVjdHNcXFwiPiA8ZGl2IGNsYXNzPVxcXCJncm91cC10aXRsZVxcXCI+IDxoMiBjbGFzcz1cXFwidGl0bGVcXFwiPlByb2plY3RzPC9oMj4gPGJ1dHRvbiBpZD1cXFwiYWRkUHJvamVjdEJ0blxcXCIgY2xhc3M9XFxcImFkZC1uZXctZWxlbWVudFxcXCI+PHNwYW4gY2xhc3M9XFxcImljb25cXFwiPmFkZDwvc3Bhbj48L2J1dHRvbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImdyb3VwLWxpc3RcXFwiIGlkPVxcXCJwcm9qZWN0TGlzdFxcXCI+PC9kaXY+IDwvZGl2PiA8L2Rpdj5cIjtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IGNvZGU7IiwiaW1wb3J0IG5vdGVzSFRNTCBmcm9tIFwiLi4vbGF5b3V0cy9ub3Rlcy5odG1sXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbmplY3ROb3RlcygpIHtcclxuXHRjb25zdCBub3Rlc0hUTUxDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI25vdGVzXCIpO1xyXG5cdGNvbnN0IG5vdGVzID0gbm90ZXNIVE1MO1xyXG5cdG5vdGVzSFRNTENvbnRhaW5lci5pbm5lckhUTUwgPSBub3RlcztcclxufVxyXG4iLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCIgPGRpdiBjbGFzcz1cXFwic2lkZWJhci1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzaWRlYmFyLWdyb3VwXFxcIj4gPGRpdiBjbGFzcz1cXFwiZ3JvdXAtdGl0bGVcXFwiPiA8aDIgY2xhc3M9XFxcInRpdGxlXFxcIj5Ob3RlczwvaDI+IDxidXR0b24gaWQ9XFxcImFkZE5vdGVCdG5cXFwiPjxzcGFuIGNsYXNzPVxcXCJpY29uXFxcIj5hZGQ8L3NwYW4+PC9idXR0b24+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJncm91cC1saXN0XFxcIiBpZD1cXFwibm90ZXNDb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJsaXN0LWl0ZW1cXFwiPiA8ZGl2IGNsYXNzPVxcXCJub3RlXFxcIj4gTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIENvbW1vZGkgZnVnaXQgaXBzdW0gdW5kZSBpbGxvIHNpdCBpcHNhIGN1bHBhLCBlb3MgbWF4aW1lPyBOaWhpbCBpZCB2ZXJvIG5hdHVzIHRlbmV0dXIgcmVydW0gYXV0ZW0gZXNzZSBhc3N1bWVuZGEgYWxpYXMgbW9kaSB1dCEgPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PlwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJNYXRoIiwicG93IiwibWlsbGlzZWNvbmRzSW5XZWVrIiwibWlsbGlzZWNvbmRzSW5EYXkiLCJtaWxsaXNlY29uZHNJbk1pbnV0ZSIsIm1pbGxpc2Vjb25kc0luSG91ciIsInBhcnNlSVNPIiwiYXJndW1lbnQiLCJvcHRpb25zIiwiYWRkaXRpb25hbERpZ2l0cyIsImRhdGVTdHJpbmdzIiwiZGF0ZVN0cmluZyIsImFycmF5Iiwic3BsaXQiLCJwYXR0ZXJucyIsImRhdGVUaW1lRGVsaW1pdGVyIiwidGltZVN0cmluZyIsImxlbmd0aCIsInRlc3QiLCJkYXRlIiwidGltZVpvbmVEZWxpbWl0ZXIiLCJzdWJzdHIiLCJ0b2tlbiIsInRpbWV6b25lIiwiZXhlYyIsInRpbWUiLCJyZXBsYWNlIiwic3BsaXREYXRlU3RyaW5nIiwicGFyc2VZZWFyUmVzdWx0IiwicmVnZXgiLCJSZWdFeHAiLCJjYXB0dXJlcyIsIm1hdGNoIiwieWVhciIsIk5hTiIsInJlc3REYXRlU3RyaW5nIiwicGFyc2VJbnQiLCJjZW50dXJ5Iiwic2xpY2UiLCJwYXJzZVllYXIiLCJEYXRlIiwiZGF0ZVJlZ2V4IiwiaXNXZWVrRGF0ZSIsImRheU9mWWVhciIsInBhcnNlRGF0ZVVuaXQiLCJtb250aCIsImRheSIsIndlZWsiLCJkYXlPZldlZWsiLCJfeWVhciIsInZhbGlkYXRlV2Vla0RhdGUiLCJpc29XZWVrWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwiZm91cnRoT2ZKYW51YXJ5RGF5IiwiZ2V0VVRDRGF5IiwiZGlmZiIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwiZGF5T2ZJU09XZWVrWWVhciIsImRheXNJbk1vbnRocyIsImlzTGVhcFllYXJJbmRleCIsInZhbGlkYXRlRGF0ZSIsInZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSIsIm1heCIsInBhcnNlRGF0ZSIsImlzTmFOIiwiZ2V0VGltZSIsInRpbWVzdGFtcCIsIm9mZnNldCIsInRpbWVSZWdleCIsImhvdXJzIiwicGFyc2VUaW1lVW5pdCIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwidmFsaWRhdGVUaW1lIiwicGFyc2VUaW1lIiwiZGlydHlEYXRlIiwicmVzdWx0Iiwic2V0RnVsbFllYXIiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwic2V0SG91cnMiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwidGltZXpvbmVTdHJpbmciLCJ0aW1lem9uZVJlZ2V4Iiwic2lnbiIsIl9ob3VycyIsInZhbGlkYXRlVGltZXpvbmUiLCJwYXJzZVRpbWV6b25lIiwidmFsdWUiLCJwYXJzZUZsb2F0IiwidG9EYXRlIiwiYXJnU3RyIiwidG9TdHJpbmciLCJjb25zdHJ1Y3RvciIsImNvbXBhcmVBc2MiLCJkYXRlTGVmdCIsImRhdGVSaWdodCIsIl9kYXRlTGVmdCIsIl9kYXRlUmlnaHQiLCJQcm9qZWN0IiwibmFtZSIsImRlc2NyaXB0aW9uIiwidGhpcyIsInRvZG9zIiwiYWRkVG9kbyIsInRvZG8iLCJwdXNoIiwiZGVsZXRlVG9kbyIsInRvZG9JbmRleCIsInNwbGljZSIsImVkaXRUb2RvIiwibmV3RGV0YWlscyIsImFzc2lnbiIsInNvcnRUb2RvcyIsInNvcnQiLCJhIiwiYiIsImRhdGVDb21wYXJpc29uIiwiZHVlRGF0ZSIsInByaW9yaXR5T3JkZXIiLCJsb3ciLCJtZWRpdW0iLCJoaWdoIiwicHJpb3JpdHkiLCJUb0RvIiwicHJvamVjdE5hbWUiLCJjb21wbGV0ZWQiLCJ0b2dnbGVDb21wbGV0ZSIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsImFyZ3MiLCJ3aWR0aCIsIlN0cmluZyIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJmb3JtYXRMb25nIiwiZnVsbCIsImxvbmciLCJzaG9ydCIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsInZhbHVlc0FycmF5IiwiY29udGV4dCIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwidmFsdWVzIiwiYXJndW1lbnRDYWxsYmFjayIsImJ1aWxkTWF0Y2hGbiIsInN0cmluZyIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsIm1hdGNoUmVzdWx0IiwibWF0Y2hlZFN0cmluZyIsInBhcnNlUGF0dGVybnMiLCJkZWZhdWx0UGFyc2VXaWR0aCIsIkFycmF5IiwiaXNBcnJheSIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsInBhdHRlcm4iLCJvYmplY3QiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJlblVTIiwiY29kZSIsImZvcm1hdERpc3RhbmNlIiwiY291bnQiLCJ0b2tlblZhbHVlIiwiYWRkU3VmZml4IiwiY29tcGFyaXNvbiIsImZvcm1hdFJlbGF0aXZlIiwiX2RhdGUiLCJfYmFzZURhdGUiLCJfb3B0aW9ucyIsImxvY2FsaXplIiwib3JkaW5hbE51bWJlciIsImRpcnR5TnVtYmVyIiwibnVtYmVyIiwiTnVtYmVyIiwicmVtMTAwIiwiZXJhIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwicXVhcnRlciIsImRheVBlcmlvZCIsImFtIiwicG0iLCJtaWRuaWdodCIsIm5vb24iLCJtb3JuaW5nIiwiYWZ0ZXJub29uIiwiZXZlbmluZyIsIm5pZ2h0IiwicGFyc2VQYXR0ZXJuIiwicGFyc2VSZXN1bHQiLCJhbnkiLCJpbmRleCIsIndlZWtTdGFydHNPbiIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImRlZmF1bHRPcHRpb25zIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJzdGFydE9mRGF5IiwiZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyIsInV0Y0RhdGUiLCJVVEMiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMiLCJzdGFydE9mRGF5TGVmdCIsInN0YXJ0T2ZEYXlSaWdodCIsInRpbWVzdGFtcExlZnQiLCJ0aW1lc3RhbXBSaWdodCIsInJvdW5kIiwiY29uc3RydWN0RnJvbSIsInN0YXJ0T2ZZZWFyIiwiY2xlYW5EYXRlIiwiZ2V0RGF5T2ZZZWFyIiwic3RhcnRPZldlZWsiLCJsb2NhbGUiLCJnZXREYXkiLCJzZXREYXRlIiwic3RhcnRPZklTT1dlZWsiLCJnZXRJU09XZWVrWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwic3RhcnRPZklTT1dlZWtZZWFyIiwiZm91cnRoT2ZKYW51YXJ5IiwiZ2V0SVNPV2VlayIsImdldFdlZWtZZWFyIiwiZmlyc3RXZWVrT2ZOZXh0WWVhciIsImZpcnN0V2Vla09mVGhpc1llYXIiLCJzdGFydE9mV2Vla1llYXIiLCJmaXJzdFdlZWsiLCJnZXRXZWVrIiwiYWRkTGVhZGluZ1plcm9zIiwidGFyZ2V0TGVuZ3RoIiwiYWJzIiwicGFkU3RhcnQiLCJsaWdodEZvcm1hdHRlcnMiLCJ5Iiwic2lnbmVkWWVhciIsIk0iLCJkIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwidG9VcHBlckNhc2UiLCJoIiwiSCIsIm0iLCJzIiwiUyIsIm51bWJlck9mRGlnaXRzIiwibWlsbGlzZWNvbmRzIiwidHJ1bmMiLCJkYXlQZXJpb2RFbnVtIiwiZm9ybWF0dGVycyIsIkciLCJ1bml0IiwiWSIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJSIiwidSIsIlEiLCJjZWlsIiwicSIsIkwiLCJ3IiwiSSIsImlzb1dlZWsiLCJEIiwiRSIsImUiLCJsb2NhbERheU9mV2VlayIsImMiLCJpIiwiaXNvRGF5T2ZXZWVrIiwidG9Mb3dlckNhc2UiLCJCIiwiSyIsImsiLCJYIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyIsImZvcm1hdFRpbWV6b25lIiwieCIsIk8iLCJmb3JtYXRUaW1lem9uZVNob3J0IiwieiIsInQiLCJUIiwiZGVsaW1pdGVyIiwiYWJzT2Zmc2V0IiwiZGF0ZUxvbmdGb3JtYXR0ZXIiLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsImxvbmdGb3JtYXR0ZXJzIiwicCIsIlAiLCJkYXRlUGF0dGVybiIsInRpbWVQYXR0ZXJuIiwiZGF0ZVRpbWVGb3JtYXQiLCJkYXlPZlllYXJUb2tlblJFIiwid2Vla1llYXJUb2tlblJFIiwidGhyb3dUb2tlbnMiLCJpc0RhdGUiLCJpc1ZhbGlkIiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJmb3JtYXQiLCJmb3JtYXRTdHIiLCJvcmlnaW5hbERhdGUiLCJSYW5nZUVycm9yIiwicGFydHMiLCJtYXAiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJqb2luIiwiaXNUb2tlbiIsImNsZWFuRXNjYXBlZFN0cmluZyIsInByZXByb2Nlc3NvciIsImZvcm1hdHRlck9wdGlvbnMiLCJwYXJ0IiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwiaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuIiwidXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyIsImlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4iLCJpbnB1dCIsIl9tZXNzYWdlIiwic3ViamVjdCIsIm1lc3NhZ2UiLCJjb25zb2xlIiwid2FybiIsImluY2x1ZGVzIiwid2Fybk9yVGhyb3dQcm90ZWN0ZWRFcnJvciIsImZvcm1hdHRlciIsIm1hdGNoZWQiLCJmb3JtYXRJU08iLCJyZXByZXNlbnRhdGlvbiIsInR6T2Zmc2V0IiwiZGF0ZURlbGltaXRlciIsInRpbWVEZWxpbWl0ZXIiLCJhYnNvbHV0ZU9mZnNldCIsInN0YXJ0T2ZUb2RheSIsIm5vdyIsImFkZERheXMiLCJhbW91bnQiLCJhZGRXZWVrcyIsImRlZmF1bHRQcm9qZWN0cyIsIkRlZmF1bHQiLCJmb3JtYXREYXRlIiwiZGVmYXVsdE5vdGVzIiwidGV4dCIsImRhdGVBZGRlZCIsInNob3dNb2RhbCIsIm1vZGFsIiwiY29udGFpbmVyIiwiY3VycmVudFByb2plY3QiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0YXNrTW9kYWwiLCJwcm9qZWN0T3B0aW9ucyIsInByb2plY3RTZWxlY3QiLCJzZWxlY3RlZCIsImhpZGVNb2RhbCIsInJlbW92ZSIsInNhdmVUb0xvY2FsU3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwicHJvamVjdHMiLCJub3RlcyIsImVuZE9mV2VlayIsImlzU2FtZURheSIsImlzV2l0aGluSW50ZXJ2YWwiLCJpbnRlcnZhbCIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJzdGFydCIsImVuZCIsImRpZmZlcmVuY2VJbk1pbGxpc2Vjb25kcyIsImRpZmZlcmVuY2VJbkhvdXJzIiwibWV0aG9kIiwicm91bmRpbmdNZXRob2QiLCJzdGFydE9mVG9tb3Jyb3ciLCJkaXNwbGF5VGFza3MiLCJwcm9qZWN0SW5kZXgiLCJ0YXNrc0NvbnRhaW5lciIsImlubmVySFRNTCIsImZvckVhY2giLCJwcm9qZWN0IiwiYXBwZW5kVGFzayIsInRvZG9JdGVtIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2hlY2tib3hDb250YWluZXIiLCJjaGVja2JveCIsInR5cGUiLCJpZCIsImNsYXNzTmFtZSIsInNldEF0dHJpYnV0ZSIsImNoZWNrZWQiLCJsYWJlbCIsImFwcGVuZENoaWxkIiwibmFtZVNwYW4iLCJkdWVEYXRlVGltZVNwYW4iLCJzdXBlcnNjcmlwdGVkRGF0ZSIsImN1cnJlbnREYXRlIiwidGFza0R1ZURhdGUiLCJob3Vyc1JlbWFpbmluZyIsInByaW9yaXR5U3BhbiIsInByaW9yaXR5SWNvbiIsImVkaXRCdXR0b24iLCJ0ZXh0Q29udGVudCIsImRlbGV0ZUJ1dHRvbiIsImNyZWF0ZVRhc2tIVE1MIiwicXVlcnlTZWxlY3RvciIsIm9uY2xpY2siLCJzaG93Q29uZmlybWF0aW9uTW9kYWwiLCJmaW5kIiwiaW5kZXhPZiIsImdldEVsZW1lbnRCeUlkIiwibW9kYWxzQ29udGFpbmVyIiwicHJldmVudERlZmF1bHQiLCJ0YXJnZXQiLCJmaWx0ZXJUYXNrc0J5RGF0ZSIsImZpbHRlciIsInN0YXJ0T2ZXZWVrRGF0ZSIsImVuZE9mV2Vla0RhdGUiLCJuZXh0V2Vla1N0YXJ0IiwibmV4dFdlZWtFbmQiLCJ0YXNrRGF0ZSIsInNob3VsZEFwcGVuZCIsImNyZWF0ZVByb2plY3RGcm9tRGF0YSIsInByb2plY3REYXRhIiwibmV3UHJvamVjdCIsInRvZG9EYXRhIiwiZHVlRGF0ZUlucHV0IiwiZm9ybWF0dGVkRGF0ZSIsInNldEN1cnJlbnREYXRlIiwiaW5qZWN0TW9kYWxzIiwicGFyc2UiLCJnZXRJdGVtIiwiYWRkUHJvamVjdEJ0biIsImFkZFRhc2tCdG4iLCJhZGROb3RlQnRuIiwidmlld0FsbEJ0biIsInRvZGF5QnRuIiwidG9tb3Jyb3dCdG4iLCJ0aGlzV2Vla0J0biIsIm5leHRXZWVrQnRuIiwicHJvamVjdE1vZGFsIiwibm90ZU1vZGFsIiwiY2xvc2VQcm9qZWN0TW9kYWwiLCJjbG9zZVRhc2tNb2RhbCIsImNsb3NlTm90ZU1vZGFsIiwiY29uZmlybWF0aW9uTW9kYWwiLCJjbG9zZUNvbmZpcm1hdGlvbk1vZGFsIiwic2F2ZVByb2plY3RCdG4iLCJzYXZlVGFza0J0biIsInNhdmVOb3RlQnRuIiwibm90ZXNDb250YWluZXIiLCJjb25maXJtRGVsZXRlQnRuIiwiY2FuY2VsRGVsZXRlQnRuIiwiZGVsZXRlQWN0aW9uIiwiZGlzYWJsZUFkZFByb2plY3RCdG4iLCJyZW1vdmVBdHRyaWJ1dGUiLCJlbGVtZW50TmFtZSIsImFjdGlvbiIsImhpZGVDb25maXJtYXRpb25Nb2RhbCIsImRpc3BsYXlQcm9qZWN0cyIsInByb2plY3RMaXN0IiwicHJvamVjdEl0ZW0iLCJvcHRpb24iLCJxdWVyeVNlbGVjdG9yQWxsIiwiYnV0dG9uIiwiZGF0YXNldCIsImRpc3BsYXlOb3RlcyIsIm5vdGUiLCJub3RlSW5kZXgiLCJub3RlSXRlbSIsImN1cnJlbnROb3RlSW5kZXgiLCJvbnN1Ym1pdCIsInRhc2tOYW1lIiwibm90ZVRleHQiLCJzaWRlYmFyQ29udGFpbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRhZ05hbWUiLCJidG4iLCJwYXJlbnROb2RlIiwiY29udGFpbnMiLCJkYXRlSW5wdXQiLCJ0b0lTT1N0cmluZyIsInNldE1pbkRhdGUiLCJyYWRpbyJdLCJzb3VyY2VSb290IjoiIn0=